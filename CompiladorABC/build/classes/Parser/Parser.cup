package Parser;
import java_cup.runtime.*;
import Clases.Coder;

parser code {:
    
    private Coder coder = new Coder();

    public Coder getCoder() {
        return coder;
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:}

terminal CONST, PUNTOYCOMA, IDENTIFICADOR, FLOAT, INTEGER, PARENTESIS_ABRE, PARENTESIS_CIERRA, OpMUL, OpDIV, Op_DIV,Op_MOD, 
         OpSUMA, OpRESTA, OpIGUAL, OpMAYOR, OpMAYOR_IGUAL, OpMENOR, OpMENOR_IGUAL, OpDIFERENTE, OpNOT, OpAND, OpOR, 
         STRING, COMA, VAR, DOS_PUNTOS, TYPE_INT, TYPE_LONGINT, TYPE_SHORTINT, TYPE_CHAR, TYPE_STRING, TYPE_BOOLEAN, TYPE_REAL, BEGIN, END,
         OprASIGNACION, OprASIG_MAS, OprASIG_RESTA, OprASIG_MUL, OprASIG_DIV, FOR, WHILE, IF, FUNCTION, PROCEDURE, TO, DO, THEN, ELSE,
         PROGRAM, Op_INC, Op_DEC, READ, WRITE;

non terminal TIPO, DECLARAR_CONSTANTES, DECLARAR_VARIABLES, VARIABLES, VARIABLE, IDENTIFICADORES, CONSTANTES, CONSTANTE, TERMINO, 
         NUMERO, UNARIO, MULTIPLICATIVOS, ADITIVOS, COND_REL, COND_AND, COND_NOT, EXP, CONDICION, FUNCION, ARGUMENTOS,
         PROCEDIMIENTO,  ARGUMENTOS_P, SENTENCIA_PUNTOYCOMA, SENTENCIA_END,BLOQUE_FUNCIONES_PROCEDIMIENTOS, PARAMETRO,
         LLAMADA_FUNCION, ASIGNACION, SENTENCIAS, BLOQUE_DECLARACIONES, ESTR_FOR, ESTR_WHILE, ESTR_IF, ESTR_ELSE, ESTRUCTURA_PROGRAMA,
         INC_DEC, ARGUMENTOS_NO_VACIO, ARGUMENTO, PARAMETRO_READ, PARAMETROS_NO_VACIOS, PARAMETROS, FUNCION_BLOQUE, PROCEDIMIENTO_BLOQUE;

start with ESTRUCTURA_PROGRAMA;

ESTRUCTURA_PROGRAMA ::= PROGRAM IDENTIFICADOR {: parser.getCoder().iniciarVar(); :} BLOQUE_DECLARACIONES BLOQUE_FUNCIONES_PROCEDIMIENTOS BEGIN {: parser.getCoder().iniciarCode(); :} SENTENCIAS END
                         | error  {: System.out.println("Error sintáctico: ERROR EN PROGRAMA, FALTA UN BEGIN O END"); :};

BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= PROCEDIMIENTO END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
                                  | FUNCION END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
                                  | ;


PROCEDIMIENTO     ::=  PROCEDURE IDENTIFICADOR PROCEDIMIENTO_BLOQUE;

PROCEDIMIENTO_BLOQUE    ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA  
                            BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
                          | error PUNTOYCOMA {: System.out.println("Error sintáctico: ERROR EN PROCEDIMIENTO"); :};


FUNCION     ::=  FUNCTION IDENTIFICADOR:i FUNCION_BLOQUE {: parser.getCoder().guardarFuncionEnTsimbolo((String)i);:};

FUNCION_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO:t {: parser.getCoder().recordarTipo((String)t);:}
                   BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
                 | error PUNTOYCOMA {: System.out.println("Error sintáctico: ERROR EN FUNCION" ); :};

BLOQUE_DECLARACIONES::= DECLARAR_VARIABLES DECLARAR_CONSTANTES                      
                      | DECLARAR_VARIABLES
                      | DECLARAR_CONSTANTES
                      | ; 

ARGUMENTOS ::=  ARGUMENTOS_NO_VACIO |;

ARGUMENTOS_NO_VACIO ::=  ARGUMENTO ARGUMENTOS_P ;
                          

ARGUMENTOS_P ::= COMA ARGUMENTOS | ;

ARGUMENTO ::= TIPO:t {: parser.getCoder().recordarTipo((String)t);:} IDENTIFICADOR:i {: parser.getCoder().recordarIdentificador((String)i);:};

ESTR_IF     ::=  IF {: parser.getCoder().start_if(); :} CONDICION THEN {: parser.getCoder().evalExp_if(); :} SENTENCIAS {: parser.getCoder().else_if(); :} ESTR_ELSE {: parser.getCoder().end_if(); :};


ESTR_ELSE ::= ELSE SENTENCIAS | ;

ESTR_FOR    ::=  FOR ASIGNACION TO EXP DO BEGIN SENTENCIAS; 

ESTR_WHILE  ::=  WHILE {: parser.getCoder().start_while(); :} CONDICION DO {: parser.getCoder().evalExp_While(); :} BEGIN SENTENCIAS {: parser.getCoder().end_while(); :};

DECLARAR_CONSTANTES ::= CONST CONSTANTES ;
CONSTANTES          ::= CONSTANTE PUNTOYCOMA CONSTANTES
                      | CONSTANTE PUNTOYCOMA;

CONSTANTE           ::= IDENTIFICADOR:i OpIGUAL NUMERO:n {: parser.getCoder().guardarConstanteEnTSimbolos((String)i, "Numero", n);  :}
                      | IDENTIFICADOR:i OpIGUAL STRING:s     {: parser.getCoder().guardarConstanteEnTSimbolos((String)i, "String", s); :}
                      | error NUMERO {: System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); :}
                      | error STRING {: System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); :};

DECLARAR_VARIABLES ::= VAR VARIABLES;

VARIABLES          ::= VARIABLE PUNTOYCOMA VARIABLES
                    |  VARIABLE PUNTOYCOMA;

VARIABLE           ::= IDENTIFICADORES DOS_PUNTOS TIPO:tipo {: parser.getCoder().guardarVariablesEnTSimbolos((String)tipo); :}
                       | error TIPO {: System.out.println("Error sintáctico: ERROR EN DECLARACION DE VARIABLE"); :};
                      
IDENTIFICADORES    ::= IDENTIFICADORES COMA IDENTIFICADOR:i {: parser.getCoder().recordarIdentificador((String)i);:}
                              |  IDENTIFICADOR:i {: parser.getCoder().recordarIdentificador((String)i); :};

EXP ::= ADITIVOS 
      | STRING;

CONDICION ::=	CONDICION OpOR COND_AND 
	      | COND_AND;

COND_AND ::=	COND_AND OpAND COND_NOT 
	      | COND_NOT;

COND_NOT ::=  OpNOT COND_REL
            | COND_REL
            ;

COND_REL ::= 	ADITIVOS OpIGUAL:o {:  parser.getCoder().recordarOperacion((String)o); :} ADITIVOS 
	      | ADITIVOS OpMAYOR:o {:  parser.getCoder().recordarOperacion((String)o); :}	ADITIVOS 
	      | ADITIVOS OpMAYOR_IGUAL:o {:  parser.getCoder().recordarOperacion((String)o); :}  ADITIVOS 
	      | ADITIVOS OpMENOR:o {:  parser.getCoder().recordarOperacion((String)o); :} 	ADITIVOS 
	      | ADITIVOS OpMENOR_IGUAL:o {:  parser.getCoder().recordarOperacion((String)o); :}  ADITIVOS 
	      | ADITIVOS OpDIFERENTE:o {:  parser.getCoder().recordarOperacion((String)o); :}	ADITIVOS 
              | PARENTESIS_ABRE CONDICION PARENTESIS_CIERRA;

ADITIVOS ::=	ADITIVOS OpSUMA:o {: parser.getCoder().recordarOperacion((String)o); :}	MULTIPLICATIVOS 
	      | ADITIVOS OpRESTA:o {: parser.getCoder().recordarOperacion((String)o); :} MULTIPLICATIVOS 
	      | MULTIPLICATIVOS;

MULTIPLICATIVOS ::=	MULTIPLICATIVOS OpMUL:o {: parser.getCoder().recordarOperacion((String)o); :} UNARIO 
		      | MULTIPLICATIVOS OpDIV:o {: parser.getCoder().recordarOperacion((String)o); :} UNARIO 
		      | MULTIPLICATIVOS Op_DIV:o {: parser.getCoder().recordarOperacion((String)o); :} UNARIO 
		      | MULTIPLICATIVOS Op_MOD:o {: parser.getCoder().recordarOperacion((String)o); :} UNARIO 
		      | UNARIO ;

UNARIO	 ::=	INC_DEC 
	      | TERMINO;

INC_DEC  ::=   Op_INC:o {: parser.getCoder().recordarOperacion((String)o); :} TERMINO {: parser.getCoder().preIncDec(); :}
             | Op_DEC:o {: parser.getCoder().recordarOperacion((String)o); :} TERMINO {: parser.getCoder().preIncDec(); :}
             | TERMINO Op_INC:o {: parser.getCoder().recordarOperacion((String)o); parser.getCoder().postIncDec(); :} 
             | TERMINO Op_DEC:o {: parser.getCoder().recordarOperacion((String)o); parser.getCoder().postIncDec(); :} ;

TERMINO  ::=	PARENTESIS_ABRE EXP PARENTESIS_CIERRA
	      | NUMERO:n {: RESULT = n; :}
	      | IDENTIFICADOR:i {: RESULT = i; parser.getCoder().recordarDO((String)i, null); :}
              | LLAMADA_FUNCION;

NUMERO	 ::=  FLOAT:f {: RESULT = f; parser.getCoder().recordarDO("Float", (String)f); :}
            | INTEGER:i {: RESULT = i; parser.getCoder().recordarDO("Int", (String) i); :} ;

LLAMADA_FUNCION  ::=  READ PARENTESIS_ABRE PARAMETRO_READ
                    | WRITE PARENTESIS_ABRE PARAMETROS_NO_VACIOS PARENTESIS_CIERRA
                    | IDENTIFICADOR PARENTESIS_ABRE PARAMETROS PARENTESIS_CIERRA ;

PARAMETRO_READ ::= PARENTESIS_CIERRA | TERMINO PARENTESIS_CIERRA 
                   | error PARENTESIS_CIERRA {: System.out.println("Error sintáctico: La funcion solo acepta 1 parámetro"); :};

PARAMETROS ::= PARAMETROS_NO_VACIOS | ;

PARAMETROS_NO_VACIOS ::= PARAMETRO COMA PARAMETROS_NO_VACIOS| PARAMETRO;

PARAMETRO ::= TERMINO | STRING;
TIPO        ::=   TYPE_INT:t           {: RESULT = t; :}
                | TYPE_LONGINT:t       {: RESULT = t; :}
                | TYPE_SHORTINT:t      {: RESULT = t; :}
                | TYPE_CHAR:t          {: RESULT = t; :}
                | TYPE_STRING:t        {: RESULT = t; :}
                | TYPE_BOOLEAN:t       {: RESULT = t; :}
                | TYPE_REAL:t          {: RESULT = t; :} ;

ASIGNACION  ::= IDENTIFICADOR:i {: parser.getCoder().recordarDO((String)i, null); :} OprASIGNACION:o {: parser.getCoder().recordarOperacion((String)o); :}  EXP {: parser.getCoder().evalBinaria(); parser.getCoder().generarCodigoAsignacion(); :}
              | IDENTIFICADOR:i {: parser.getCoder().recordarDO((String)i, null); :} OprASIG_MAS:o {: parser.getCoder().recordarOperacion((String)o); :} EXP
              | IDENTIFICADOR:i {: parser.getCoder().recordarDO((String)i, null); :} OprASIG_RESTA:o {: parser.getCoder().recordarOperacion((String)o); :} EXP
              | IDENTIFICADOR:i {: parser.getCoder().recordarDO((String)i, null); :} OprASIG_MUL:o {: parser.getCoder().recordarOperacion((String)o); :} EXP
              | IDENTIFICADOR:i {: parser.getCoder().recordarDO((String)i, null); :} OprASIG_DIV:o {: parser.getCoder().recordarOperacion((String)o); :} EXP;
              

SENTENCIAS  ::= SENTENCIA_PUNTOYCOMA SENTENCIAS
              | SENTENCIA_END  SENTENCIAS 
              | ;

SENTENCIA_PUNTOYCOMA  ::= ASIGNACION PUNTOYCOMA
                         | INC_DEC  PUNTOYCOMA
                         | LLAMADA_FUNCION PUNTOYCOMA 
                         | error:e PUNTOYCOMA {: System.out.println("Error sintáctico: ERROR EN SENTENCIA ASIGNACION, LLAMADA A FUNCION O EXPRESION" + e); :};                         
                

SENTENCIA_END ::= ESTR_FOR END
              | ESTR_WHILE END
              | ESTR_IF END 
              | error END {: System.out.println("Error sintáctico: ERROR EN SENTENCIA IF, WHILE O FOR"); :};