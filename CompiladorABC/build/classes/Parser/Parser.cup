package Parser;
import java_cup.runtime.*;

parser code {:

    public void report_error(String message, Object info) {
        System.out.println("ERROR:" + message);
      }

:}

terminal IDENTIFICADOR, FLOAT, INTEGER, PARENTESIS_ABRE, PARENTESIS_CIERRA, OpINC, OpDEC, OpMUL, OpDIV, Op_DIV,Op_MOD, 
         OpSUMA, OpRESTA, OpIGUAL, OpMAYOR, OpMAYOR_IGUAL, OpMENOR, OpMENOR_IGUAL, OpDIFERENTE, Op_NOT, Op_AND, Op_OR, 
         STRING, COMA;

non terminal TERMINO, NUMERO, UNARIO, MULTIPLICATIVOS, ADITIVOS, COND_REL, SENTENCIA, COND_AND, COND_NOT, EXP, CONDICION, FUNCION, ARGUMENTOS;

start with SENTENCIA;

SENTENCIA ::= CONDICION {: System.out.println("cond");  :}
              | EXP {: System.out.println("Exp");  :};

EXP ::= ADITIVOS
      | STRING;

CONDICION ::=	CONDICION Op_OR COND_AND
	      | COND_AND;

COND_AND ::=	COND_AND Op_AND COND_NOT 
	      | COND_NOT;

COND_NOT ::=  Op_NOT COND_REL
            | COND_REL;

COND_REL ::= 	ADITIVOS OpIGUAL 	ADITIVOS
	      | ADITIVOS OpMAYOR	ADITIVOS
	      | ADITIVOS OpMAYOR_IGUAL  ADITIVOS
	      | ADITIVOS OpMENOR 	ADITIVOS
	      | ADITIVOS OpMENOR_IGUAL  ADITIVOS
	      | ADITIVOS OpDIFERENTE	ADITIVOS;



ADITIVOS ::=	ADITIVOS OpSUMA	MULTIPLICATIVOS
	      | ADITIVOS OpRESTA MULTIPLICATIVOS
	      | MULTIPLICATIVOS;

MULTIPLICATIVOS ::=	MULTIPLICATIVOS OpMUL UNARIO
		      | MULTIPLICATIVOS OpDIV UNARIO
		      | MULTIPLICATIVOS Op_DIV UNARIO
		      | MULTIPLICATIVOS Op_MOD UNARIO	
		      | UNARIO;

UNARIO	 ::=	OpINC TERMINO
	      | OpDEC TERMINO
	      | TERMINO;

TERMINO  ::=	PARENTESIS_ABRE EXP PARENTESIS_CIERRA
	      | NUMERO {: System.out.println(" Numero "); :} 
	      | IDENTIFICADOR
              | FUNCION;

NUMERO	 ::=  FLOAT | INTEGER;

FUNCION  ::=  IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA;

ARGUMENTOS ::=	EXP COMA ARGUMENTOS
	      | EXP;