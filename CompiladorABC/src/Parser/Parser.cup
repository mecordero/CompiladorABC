package Parser;
import java_cup.runtime.*;

parser code {:

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:}

terminal CONST, PUNTOYCOMA, IDENTIFICADOR, FLOAT, INTEGER, PARENTESIS_ABRE, PARENTESIS_CIERRA, OpINC, OpDEC, OpMUL, OpDIV, Op_DIV,Op_MOD, 
         OpSUMA, OpRESTA, OpIGUAL, OpMAYOR, OpMAYOR_IGUAL, OpMENOR, OpMENOR_IGUAL, OpDIFERENTE, Op_NOT, Op_AND, Op_OR, 
         STRING, COMA, VAR, DOS_PUNTOS, TYPE_INT, TYPE_LONGINT, TYPE_SHORTINT, TYPE_CHAR, TYPE_STRING, TYPE_BOOLEAN, TYPE_REAL, BEGIN, END,
         OprASIGNACION, OprASIG_MAS, OprASIG_RESTA, OprASIG_MUL, OprASIG_DIV, FOR, WHILE, IF, FUNCTION, PROCEDURE, TO, DO, THEN, ELSE;

non terminal TIPO, TEMPORAL, DECLARAR_CONSTANTES, DECLARAR_VARIABLES, VARIABLES, VARIABLE, IDENTIFICADORES, CONSTANTES, CONSTANTE, TERMINO, 
         NUMERO, UNARIO, MULTIPLICATIVOS, ADITIVOS, COND_REL, SENTENCIA, COND_AND, COND_NOT, EXP, CONDICION, FUNCION, ARGUMENTOS, FUNCIONES, 
         PROCEDIMIENTO, PROCEDIMIENTOS, ARGUMENTOS_P, SENTENCIA_PUNTOYCOMA, SENTENCIA_END,
         LLAMADA_FUNCION, ASIGNACION, SENTENCIAS, BLOQUE_DECLARACIONES, ESTR_FOR, ESTR_WHILE, ESTR_IF, ESTR_ELSE;

start with TEMPORAL;


TEMPORAL ::=  ESTRUCTURA_PROGRAMA | DECLARAR_VARIABLES | DECLARAR_CONSTANTES | ESTR_FOR END | ESTR_WHILE END | ESTR_IF;


PROCEDIMIENTOS   ::=  PROCEDIMIENTO END PROCEDIMIENTOS {: System.out.println(" procedimientos 1 "); :}
               | {: System.out.println(" procedimiento 2 "); :};

PROCEDIMIENTO     ::=  PROCEDURE IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA  
                 BLOQUE_DECLARACIONES BEGIN SENTENCIA END {: System.out.println(" procedimiento "); :};

FUNCIONES   ::=  FUNCION END FUNCIONES {: System.out.println(" funciones 1 "); :}
               | {: System.out.println(" funciones 2 "); :};

FUNCION     ::=  FUNCTION IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO 
                 BLOQUE_DECLARACIONES BEGIN SENTENCIAS  {: System.out.println(" funcion "); :};

BLOQUE_DECLARACIONES::= DECLARAR_VARIABLES DECLARAR_CONSTANTES
                      | DECLARAR_CONSTANTES DECLARAR_VARIABLES
                      | DECLARAR_VARIABLES
                      | DECLARAR_CONSTANTES; 

ARGUMENTOS ::=  TIPO IDENTIFICADOR ARGUMENTOS_P  {: System.out.println(" argumentos 1 "); :};

ARGUMENTOS_P ::= COMA ARGUMENTOS | ;


ESTR_IF     ::=  IF CONDICION THEN BEGIN SENTENCIAS END {: System.out.println(" ELSE BEGIN SENTENCIAS END"); :} | IF CONDICION THEN BEGIN SENTENCIAS END ESTR_ELSE END{: System.out.println(" if CON ELSE"); :};


ESTR_ELSE ::= ELSE BEGIN SENTENCIAS END {: System.out.println(" ELSE BEGIN SENTENCIAS END"); :} ;



ESTR_FOR    ::=  FOR ASIGNACION TO EXP DO BEGIN SENTENCIAS{: System.out.println(" BE  1 "); :}; 

ESTR_WHILE  ::=  WHILE CONDICION DO BEGIN SENTENCIAS;

DECLARAR_CONSTANTES ::= CONST CONSTANTES {: System.out.println(" declarar_constantes "); :};
CONSTANTES          ::= CONSTANTE PUNTOYCOMA CONSTANTES {: System.out.println(" constantes 1 "); :}
                      | CONSTANTE PUNTOYCOMA{: System.out.println(" constantes 2 "); :};

CONSTANTE           ::= IDENTIFICADOR OpIGUAL NUMERO {: System.out.println("constante"); :}
                      | IDENTIFICADOR OpIGUAL STRING {: System.out.println("constante"); :};

DECLARAR_VARIABLES ::= VAR VARIABLES {: System.out.println(" declarar_variables1 "); :};
VARIABLES          ::= VARIABLE PUNTOYCOMA VARIABLES  {: System.out.println(" variables 2"); :}
                    |  VARIABLE PUNTOYCOMA;

VARIABLE           ::= IDENTIFICADORES DOS_PUNTOS TIPO {: System.out.println(" variable "); :};
IDENTIFICADORES    ::= IDENTIFICADORES COMA IDENTIFICADOR       {: System.out.println(" identificadores 1 "); :}
                    |  IDENTIFICADOR {: System.out.println(" identificadores 2 "); :};

EXP ::= ADITIVOS {: System.out.println(" exp 1 "); :}
      | STRING {: System.out.println(" exp 2 "); :};

CONDICION ::=	CONDICION Op_OR COND_AND {: System.out.println(" condicion 1 "); :}
	      | COND_AND {: System.out.println(" condicion 2 "); :};

COND_AND ::=	COND_AND Op_AND COND_NOT {: System.out.println(" cond_and 1 "); :}
	      | COND_NOT {: System.out.println(" cond_and 2 "); :};

COND_NOT ::=  Op_NOT COND_REL {: System.out.println(" cond_not 1 "); :}
            | COND_REL {: System.out.println(" cond_not 2 "); :};

COND_REL ::= 	ADITIVOS OpIGUAL 	ADITIVOS {: System.out.println(" cond_rel 1 "); :}
	      | ADITIVOS OpMAYOR	ADITIVOS {: System.out.println(" cond_rel 2 "); :}
	      | ADITIVOS OpMAYOR_IGUAL  ADITIVOS {: System.out.println(" cond_rel 3 "); :}
	      | ADITIVOS OpMENOR 	ADITIVOS {: System.out.println(" cond_rel 4 "); :}
	      | ADITIVOS OpMENOR_IGUAL  ADITIVOS {: System.out.println(" cond_rel 5 "); :}
	      | ADITIVOS OpDIFERENTE	ADITIVOS {: System.out.println(" cond_rel 6 "); :};

ADITIVOS ::=	ADITIVOS OpSUMA	MULTIPLICATIVOS {: System.out.println(" aditivos 1 "); :}
	      | ADITIVOS OpRESTA MULTIPLICATIVOS {: System.out.println(" aditivos 2 "); :}
	      | MULTIPLICATIVOS {: System.out.println(" aditivos 3 "); :};

MULTIPLICATIVOS ::=	MULTIPLICATIVOS OpMUL UNARIO {: System.out.println(" multiplicativos 1 "); :}
		      | MULTIPLICATIVOS OpDIV UNARIO {: System.out.println(" multiplicativos 2 "); :}
		      | MULTIPLICATIVOS Op_DIV UNARIO {: System.out.println(" multiplicativos 3 "); :}
		      | MULTIPLICATIVOS Op_MOD UNARIO {: System.out.println(" multiplicativos 4 "); :}
		      | UNARIO {: System.out.println(" multiplicativos 5 "); :};

UNARIO	 ::=	OpINC TERMINO {: System.out.println(" unario 1 "); :}
	      | OpDEC TERMINO {: System.out.println(" unario 2 "); :}
	      | TERMINO {: System.out.println(" unario 3 "); :};

TERMINO  ::=	PARENTESIS_ABRE EXP PARENTESIS_CIERRA {: System.out.println(" termino 1 "); :}
	      | NUMERO {: System.out.println(" termino 2 "); :}
	      | IDENTIFICADOR {: System.out.println(" termino 3 "); :}
              | LLAMADA_FUNCION {: System.out.println(" termino 4 "); :};

NUMERO	 ::=  FLOAT {: System.out.println(" numero 1 "); :}
            | INTEGER {: System.out.println(" numero 2 "); :};

LLAMADA_FUNCION  ::=  IDENTIFICADOR PARENTESIS_ABRE IDENTIFICADORES PARENTESIS_CIERRA {: System.out.println(" funcion "); :};

TIPO        ::=   TYPE_INT {: System.out.println(" tipo 1 "); :}
                | TYPE_LONGINT {: System.out.println(" tipo 2 "); :}
                | TYPE_SHORTINT {: System.out.println(" tipo 3 "); :}
                | TYPE_CHAR {: System.out.println(" tipo 4 "); :}
                | TYPE_STRING {: System.out.println(" tipo 5 "); :}
                | TYPE_BOOLEAN {: System.out.println(" tipo 6 "); :}
                | TYPE_REAL {: System.out.println(" tipo 7 "); :};

ASIGNACION  ::= IDENTIFICADOR OprASIGNACION EXP {: System.out.println(" asignacion 1 "); :}
              | IDENTIFICADOR OprASIG_MAS EXP {: System.out.println(" asignacion 2 "); :}
              | IDENTIFICADOR OprASIG_RESTA EXP {: System.out.println(" asignacion 3 "); :}
              | IDENTIFICADOR OprASIG_MUL EXP {: System.out.println(" asignacion 4 "); :}
              | IDENTIFICADOR OprASIG_DIV EXP {: System.out.println(" asignacion 5 "); :};


SENTENCIAS  ::= SENTENCIA_PUNTOYCOMA PUNTOYCOMA  SENTENCIAS {: System.out.println(" sentencias 1 "); :}
              | SENTENCIA_END END SENTENCIAS {: System.out.println(" sentencias 2 "); :}
              | ;

SENTENCIA_PUNTOYCOMA  ::= ASIGNACION{: System.out.println(" sentencia 4 "); :}
                         | PUNTOYCOMA {: System.out.println(" sentencia 5 "); :}
                         | LLAMADA_FUNCION;
                         
               

SENTENCIA_END ::= ESTR_FOR {: System.out.println(" sentencia end 1 "); :}
              | ESTR_WHILE {: System.out.println(" sentencia end 2 "); :}
              | ESTR_IF {: System.out.println(" sentencia end 3 "); :};
             /* | PROCEDIMIENTOS; */