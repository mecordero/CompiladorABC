package Parser;
import java_cup.runtime.*;

parser code {:

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:}

terminal CONST, PUNTOYCOMA, IDENTIFICADOR, FLOAT, INTEGER, PARENTESIS_ABRE, PARENTESIS_CIERRA, OpMUL, OpDIV, Op_DIV,Op_MOD, 
         OpSUMA, OpRESTA, OpIGUAL, OpMAYOR, OpMAYOR_IGUAL, OpMENOR, OpMENOR_IGUAL, OpDIFERENTE, OpNOT, OpAND, OpOR, 
         STRING, COMA, VAR, DOS_PUNTOS, TYPE_INT, TYPE_LONGINT, TYPE_SHORTINT, TYPE_CHAR, TYPE_STRING, TYPE_BOOLEAN, TYPE_REAL, BEGIN, END,
         OprASIGNACION, OprASIG_MAS, OprASIG_RESTA, OprASIG_MUL, OprASIG_DIV, FOR, WHILE, IF, FUNCTION, PROCEDURE, TO, DO, THEN, ELSE,
         PROGRAM, Op_INC, Op_DEC, READ, WRITE;

non terminal TIPO, DECLARAR_CONSTANTES, DECLARAR_VARIABLES, VARIABLES, VARIABLE, IDENTIFICADORES, CONSTANTES, CONSTANTE, TERMINO, 
         NUMERO, UNARIO, MULTIPLICATIVOS, ADITIVOS, COND_REL, COND_AND, COND_NOT, EXP, CONDICION, FUNCION, ARGUMENTOS, FUNCIONES, 
         PROCEDIMIENTO, PROCEDIMIENTOS, ARGUMENTOS_P, SENTENCIA_PUNTOYCOMA, SENTENCIA_END,BLOQUE_FUNCIONES_PROCEDIMIENTOS,
         LLAMADA_FUNCION, ASIGNACION, SENTENCIAS, BLOQUE_DECLARACIONES, ESTR_FOR, ESTR_WHILE, ESTR_IF, ESTR_ELSE, ESTRUCTURA_PROGRAMA,
         INC_DEC, ARGUMENTOS_NO_VACIO, ARGUMENTO, PARAMETRO_READ, PARAMETROS_NO_VACIOS, PARAMETROS;

start with ESTRUCTURA_PROGRAMA;

ESTRUCTURA_PROGRAMA ::= PROGRAM IDENTIFICADOR BLOQUE_DECLARACIONES BLOQUE_FUNCIONES_PROCEDIMIENTOS BEGIN SENTENCIAS END;

BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= PROCEDIMIENTO END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
                                  | FUNCION END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
                                  | ;

PROCEDIMIENTOS   ::=  PROCEDIMIENTO END PROCEDIMIENTOS 
               | ;

PROCEDIMIENTO     ::=  PROCEDURE IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA  
                 BLOQUE_DECLARACIONES BEGIN SENTENCIAS;

FUNCIONES   ::=  FUNCION END FUNCIONES
               | ;

FUNCION     ::=  FUNCTION IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO 
                 BLOQUE_DECLARACIONES BEGIN SENTENCIAS;

BLOQUE_DECLARACIONES::= DECLARAR_VARIABLES DECLARAR_CONSTANTES                      
                      | DECLARAR_VARIABLES
                      | DECLARAR_CONSTANTES
                      | ; 

ARGUMENTOS ::=  ARGUMENTOS_NO_VACIO | ;

ARGUMENTOS_NO_VACIO ::=  ARGUMENTO ARGUMENTOS_P;

ARGUMENTOS_P ::= COMA ARGUMENTOS | ;

ARGUMENTO ::= TIPO IDENTIFICADOR;

ESTR_IF     ::=  IF CONDICION THEN SENTENCIAS
               | IF CONDICION THEN SENTENCIAS ESTR_ELSE;


ESTR_ELSE ::= ELSE SENTENCIAS ;



ESTR_FOR    ::=  FOR ASIGNACION TO EXP DO BEGIN SENTENCIAS; 

ESTR_WHILE  ::=  WHILE CONDICION DO BEGIN SENTENCIAS;

DECLARAR_CONSTANTES ::= CONST CONSTANTES ;
CONSTANTES          ::= CONSTANTE PUNTOYCOMA CONSTANTES
                      | CONSTANTE PUNTOYCOMA;

CONSTANTE           ::= IDENTIFICADOR OpIGUAL NUMERO 
                      | IDENTIFICADOR OpIGUAL STRING 
                      | error NUMERO {: System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); :}
                      | error STRING {: System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); :};

DECLARAR_VARIABLES ::= VAR VARIABLES;

VARIABLES          ::= VARIABLE PUNTOYCOMA VARIABLES
                    |  VARIABLE PUNTOYCOMA;

VARIABLE           ::= IDENTIFICADORES DOS_PUNTOS TIPO
                       | error TIPO {: System.out.println("Error sintáctico: ERROR EN DECLARACION DE VARIABLE"); :};
                      
IDENTIFICADORES    ::= IDENTIFICADORES COMA IDENTIFICADOR 
                              |  IDENTIFICADOR;

EXP ::= ADITIVOS
      | STRING;

CONDICION ::=	CONDICION OpOR COND_AND 
	      | COND_AND ;

COND_AND ::=	COND_AND OpAND COND_NOT 
	      | COND_NOT;

COND_NOT ::=  OpNOT COND_REL
            | COND_REL;

COND_REL ::= 	ADITIVOS OpIGUAL 	ADITIVOS 
	      | ADITIVOS OpMAYOR	ADITIVOS 
	      | ADITIVOS OpMAYOR_IGUAL  ADITIVOS 
	      | ADITIVOS OpMENOR 	ADITIVOS 
	      | ADITIVOS OpMENOR_IGUAL  ADITIVOS 
	      | ADITIVOS OpDIFERENTE	ADITIVOS 
              | ADITIVOS;

ADITIVOS ::=	ADITIVOS OpSUMA	MULTIPLICATIVOS 
	      | ADITIVOS OpRESTA MULTIPLICATIVOS 
	      | MULTIPLICATIVOS;

MULTIPLICATIVOS ::=	MULTIPLICATIVOS OpMUL UNARIO 
		      | MULTIPLICATIVOS OpDIV UNARIO 
		      | MULTIPLICATIVOS Op_DIV UNARIO 
		      | MULTIPLICATIVOS Op_MOD UNARIO 
		      | UNARIO ;

UNARIO	 ::=	INC_DEC 
	      | TERMINO;

INC_DEC  ::=   Op_INC TERMINO 
             | Op_DEC TERMINO 
             | TERMINO Op_INC 
             | TERMINO Op_DEC ;

TERMINO  ::=	PARENTESIS_ABRE EXP PARENTESIS_CIERRA 
	      | NUMERO 
	      | IDENTIFICADOR 
              | LLAMADA_FUNCION ;

NUMERO	 ::=  FLOAT 
            | INTEGER ;

LLAMADA_FUNCION  ::=  READ PARENTESIS_ABRE PARAMETRO_READ
                    | WRITE PARENTESIS_ABRE PARAMETROS_NO_VACIOS PARENTESIS_CIERRA
                    | IDENTIFICADOR PARENTESIS_ABRE PARAMETROS PARENTESIS_CIERRA ;

PARAMETRO_READ ::= PARENTESIS_CIERRA | TERMINO PARENTESIS_CIERRA 
                   | error PARENTESIS_CIERRA {: System.out.println("Error sintáctico: La funcion solo acepta 1 parámetro"); :};

PARAMETROS ::= PARAMETROS_NO_VACIOS | ;

PARAMETROS_NO_VACIOS ::= TERMINO COMA PARAMETROS_NO_VACIOS | TERMINO;

TIPO        ::=   TYPE_INT 
                | TYPE_LONGINT 
                | TYPE_SHORTINT
                | TYPE_CHAR
                | TYPE_STRING
                | TYPE_BOOLEAN
                | TYPE_REAL ;

ASIGNACION  ::= IDENTIFICADOR OprASIGNACION EXP 
              | IDENTIFICADOR OprASIG_MAS EXP 
              | IDENTIFICADOR OprASIG_RESTA EXP 
              | IDENTIFICADOR OprASIG_MUL EXP 
              | IDENTIFICADOR OprASIG_DIV EXP;
              

SENTENCIAS  ::= SENTENCIA_PUNTOYCOMA SENTENCIAS
              | SENTENCIA_END  SENTENCIAS 
              | ;

SENTENCIA_PUNTOYCOMA  ::= ASIGNACION PUNTOYCOMA
                         | INC_DEC  PUNTOYCOMA
                         | LLAMADA_FUNCION PUNTOYCOMA 
                         | error PUNTOYCOMA {: System.out.println("Error sintáctico: ERROR EN SENTENCIA ASIGNACION, LLAMADA A FUNCION O EXPRESION"); :};                         
                

SENTENCIA_END ::= ESTR_FOR END
              | ESTR_WHILE END
              | ESTR_IF END
              | error END {: System.out.println("Error sintáctico: ERROR EN SENTENCIA IF, WHILE O FOR"); :};
