package Parser;
import java_cup.runtime.*;

parser code {:



:}

//Palabras reservadas
terminal BEGIN, TYPE_BOOLEAN, TYPE_CHAR, TYPE_INT, TYPE_LONGINT, TYPE_REAL, TYPE_SHORTINT, TYPE_STRING,
         CONST, DO, ELSE, END, BOOL, FOR, FUNCTION, IF, PROCEDURE, PROGRAM, READ, THEN, TO, VAR, WHILE, WRITE;
//Operadores
terminal COMA, PUNTOYCOMA, OpINC, OprASIG_MAS,OpDEC, OpMAYOR_IGUAL, OpMAYOR, OpMENOR_IGUAL, OpMENOR, OpDIFERENTE, 
         OpIGUAL, OpSUMA, OpRESTA, OpMUL, OpDIV, PARENTESIS_ABRE, PARENTESIS_CIERRA, DOS_PUNTOS, ASIGNACION, OprASIG_RESTA, OprASIG_MUL, 
         OprASIG_DIV, Op_AND, Op_OR, Op_NOT, Op_DIV, Op_MOD;
//Literales
terminal CARACTER, STRING, FLOAT, INTEGER;
//Identificadores
terminal IDENTIFICADOR;

/*
non terminal noter1, noter2, noter3;

noter1 ::= BEGIN noter2;
noter2 ::= CONST noter3;
noter3 ::= IF;*/





non terminal EXP, CONDICION, CONDICION_P, COND_AND, COND_AND_P, COND_REL, COND_REL_P, ADITIVOS, ADITIVOS_P, MULTIPLICATIVOS, MULTIPLICATIVOS_P, UNARIO, TERMINO, NUMERO, FUNCION, ARGUMENTOS;

EXP	 ::=	ADITIVOS | CONDICION | STRING;

CONDICION::=	COND_AND CONDICION_P;

CONDICION_P ::= Op_OR COND_AND CONDICION_P | /*epsilon*/;

COND_AND ::=	COND_REL COND_AND_P;

COND_AND_P ::= Op_AND COND_REL COND_AND_P | /*epsilon*/;

COND_REL ::=  TERMINO COND_REL_P;

COND_REL_P ::= OpIGUAL        TERMINO COND_REL_P
             | OpMAYOR        TERMINO COND_REL_P
             | OpMAYOR_IGUAL  TERMINO COND_REL_P
             | OpMENOR        TERMINO COND_REL_P
             | OpMENOR_IGUAL  TERMINO COND_REL_P
             | OpDIFERENTE    TERMINO COND_REL_P
             | /*epsilon*/;

ADITIVOS ::=	ADITIVOS OpSUMA	MULTIPLICATIVOS
	      | ADITIVOS OpRESTA MULTIPLICATIVOS
	      | MULTIPLICATIVOS;

ADITIVOS_P ::=   OpSUMA	  MULTIPLICATIVOS ADITIVOS_P 
               | OpRESTA  MULTIPLICATIVOS ADITIVOS_P 
               | /*epsilon*/;

MULTIPLICATIVOS ::=   UNARIO MULTIPLICATIVOS_P;

MULTIPLICATIVOS_P ::=   OpMUL  UNARIO MULTIPLICATIVOS_P
                      | OpDIV  UNARIO MULTIPLICATIVOS_P
                      | Op_DIV UNARIO MULTIPLICATIVOS_P
                      | Op_MOD UNARIO MULTIPLICATIVOS_P
                      | /*epsilon*/;


UNARIO	 ::=	OpINC TERMINO
	      | OpDEC TERMINO
	      | Op_NOT TERMINO
	      | TERMINO;

TERMINO  ::=	PARENTESIS_ABRE EXP PARENTESIS_CIERRA
	      | NUMERO
	      | IDENTIFICADOR
              | FUNCION;

NUMERO	 ::=  FLOAT | INTEGER;

FUNCION  ::=  IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA;

ARGUMENTOS ::=	ADITIVOS COMA ARGUMENTOS
              | CONDICION COMA ARGUMENTOS
              | STRING COMA ARGUMENTOS
	      | ADITIVOS | CONDICION | STRING;