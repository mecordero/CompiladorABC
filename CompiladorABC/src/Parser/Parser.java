
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 25 18:02:27 CST 2018
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import Clases.Coder;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 25 18:02:27 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\055\002\000\002\056" +
    "\002\000\002\044\013\000\002\044\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\002\000\002\026\005\000" +
    "\002\054\010\000\002\054\004\000\002\024\005\000\002" +
    "\057\002\000\002\053\013\000\002\053\004\000\002\037" +
    "\004\000\002\037\003\000\002\037\003\000\002\037\002" +
    "\000\002\025\003\000\002\025\002\000\002\046\004\000" +
    "\002\027\004\000\002\027\002\000\002\060\002\000\002" +
    "\047\005\000\002\061\002\000\002\062\002\000\002\063" +
    "\002\000\002\042\012\000\002\043\004\000\002\043\002" +
    "\000\002\040\011\000\002\064\002\000\002\065\002\000" +
    "\002\041\011\000\002\003\004\000\002\010\005\000\002" +
    "\010\004\000\002\011\005\000\002\011\005\000\002\011" +
    "\004\000\002\011\004\000\002\004\004\000\002\005\005" +
    "\000\002\005\004\000\002\006\005\000\002\006\004\000" +
    "\002\007\005\000\002\007\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\005\000\002\023\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\004\000\002\021\003" +
    "\000\002\066\002\000\002\017\006\000\002\067\002\000" +
    "\002\017\006\000\002\070\002\000\002\017\006\000\002" +
    "\071\002\000\002\017\006\000\002\072\002\000\002\017" +
    "\006\000\002\073\002\000\002\017\006\000\002\017\005" +
    "\000\002\074\002\000\002\016\006\000\002\075\002\000" +
    "\002\016\006\000\002\016\003\000\002\076\002\000\002" +
    "\015\006\000\002\077\002\000\002\015\006\000\002\100" +
    "\002\000\002\015\006\000\002\101\002\000\002\015\006" +
    "\000\002\015\003\000\002\014\003\000\002\014\003\000" +
    "\002\102\002\000\002\045\005\000\002\103\002\000\002" +
    "\045\005\000\002\045\004\000\002\045\004\000\002\012" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\003\000\002\013\003\000\002\034\005\000" +
    "\002\034\006\000\002\034\006\000\002\050\003\000\002" +
    "\050\004\000\002\050\004\000\002\052\003\000\002\052" +
    "\002\000\002\051\005\000\002\051\003\000\002\033\003" +
    "\000\002\033\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\104\002\000\002\105" +
    "\002\000\002\035\007\000\002\106\002\000\002\107\002" +
    "\000\002\035\007\000\002\110\002\000\002\111\002\000" +
    "\002\035\007\000\002\112\002\000\002\113\002\000\002" +
    "\035\007\000\002\114\002\000\002\115\002\000\002\035" +
    "\007\000\002\036\004\000\002\036\004\000\002\036\002" +
    "\000\002\030\004\000\002\030\004\000\002\030\004\000" +
    "\002\030\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\006\003\004\065\006\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\370\001\002\000\004\006\007" +
    "\001\002\000\014\004\000\034\000\045\000\057\000\060" +
    "\000\001\002\000\014\004\011\034\012\045\uffef\057\uffef" +
    "\060\uffef\001\002\000\006\003\355\006\356\001\002\000" +
    "\006\003\341\006\342\001\002\000\010\045\ufffa\057\022" +
    "\060\017\001\002\000\012\004\011\045\ufff1\057\ufff1\060" +
    "\ufff1\001\002\000\010\045\ufff0\057\ufff0\060\ufff0\001\002" +
    "\000\010\045\ufff2\057\ufff2\060\ufff2\001\002\000\004\006" +
    "\327\001\002\000\004\046\325\001\002\000\004\046\323" +
    "\001\002\000\004\006\267\001\002\000\004\045\024\001" +
    "\002\000\034\003\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\046\uffff\054\uffff\055\uffff\056\uffff\066\uffff\067\uffff\070" +
    "\uffff\071\uffff\001\002\000\034\003\050\006\051\007\044" +
    "\010\052\011\032\046\uff7a\054\053\055\031\056\035\066" +
    "\033\067\041\070\027\071\037\001\002\000\004\046\266" +
    "\001\002\000\004\011\257\001\002\000\006\066\133\067" +
    "\134\001\002\000\024\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\027\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\001\002\000" +
    "\024\006\077\007\044\010\052\011\032\032\070\066\033" +
    "\067\041\070\027\071\037\001\002\000\016\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\070\uffaa\071\uffaa\001\002\000\004" +
    "\046\246\001\002\000\024\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\027\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\001\002" +
    "\000\010\005\172\066\uffa1\067\uffa1\001\002\000\004\011" +
    "\167\001\002\000\004\046\166\001\002\000\016\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\070\uffa8\071\uffa8\001\002\000" +
    "\004\005\163\001\002\000\036\003\050\006\051\007\044" +
    "\010\052\011\032\046\uff7a\054\053\055\031\056\035\064" +
    "\uff7a\066\033\067\041\070\027\071\037\001\002\000\056" +
    "\005\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\033\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\066\uffa0\067\uffa0\001\002\000\004\046\161\001\002" +
    "\000\036\003\050\006\051\007\044\010\052\011\032\046" +
    "\uff7a\054\053\055\031\056\035\064\uff7a\066\033\067\041" +
    "\070\027\071\037\001\002\000\056\005\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\030\uffa3\031" +
    "\uffa3\033\uffa3\061\uffa3\062\uffa3\063\uffa3\066\uffa3\067\uffa3" +
    "\001\002\000\006\005\156\046\157\001\002\000\022\011" +
    "\100\047\uff8b\050\uff88\051\uff85\052\uff82\053\uff7f\066\uffa2" +
    "\067\uffa2\001\002\000\056\005\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\030\uff9f\031\uff9f\033" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\066\uff9f\067\uff9f\001\002" +
    "\000\004\006\057\001\002\000\004\005\055\001\002\000" +
    "\036\003\uff78\006\uff78\007\uff78\010\uff78\011\uff78\046\uff78" +
    "\054\uff78\055\uff78\056\uff78\064\uff78\066\uff78\067\uff78\070" +
    "\uff78\071\uff78\001\002\000\004\061\151\001\002\000\014" +
    "\047\uff8b\050\uff88\051\uff85\052\uff82\053\uff7f\001\002\000" +
    "\004\053\146\001\002\000\004\052\143\001\002\000\004" +
    "\051\140\001\002\000\004\050\135\001\002\000\004\047" +
    "\065\001\002\000\024\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\032\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\001\002\000" +
    "\024\006\077\007\044\010\052\011\032\032\070\066\033" +
    "\067\041\070\027\071\037\001\002\000\050\005\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\030" +
    "\uffad\031\uffad\061\uffad\062\uffad\063\uffad\001\002\000\012" +
    "\005\uffce\012\uffce\061\uffce\062\uffce\001\002\000\056\005" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\030\uffa1\031\uffa1\033\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\066\uffa1\067\uffa1\001\002\000\054\005\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\030\uffab\031" +
    "\uffab\061\uffab\062\uffab\063\uffab\066\133\067\134\001\002" +
    "\000\016\005\uffcf\012\uffcf\017\126\020\125\061\uffcf\062" +
    "\uffcf\001\002\000\050\005\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\030\uffac\031\uffac\061\uffac" +
    "\062\uffac\063\uffac\001\002\000\006\005\uff89\061\uff89\001" +
    "\002\000\050\005\uffb6\012\uffb6\013\111\014\112\015\114" +
    "\016\113\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\001\002\000\060\005\uffa2\011\100\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffa2\031" +
    "\uffa2\033\uffa2\061\uffa2\062\uffa2\063\uffa2\066\uffa2\067\uffa2" +
    "\001\002\000\022\006\077\007\044\010\052\011\032\012" +
    "\uff97\032\101\070\027\071\037\001\002\000\006\012\uff93" +
    "\033\uff93\001\002\000\006\012\uff94\033\uff94\001\002\000" +
    "\004\012\uff98\001\002\000\004\012\110\001\002\000\006" +
    "\012\uff95\033\106\001\002\000\020\006\077\007\044\010" +
    "\052\011\032\032\101\070\027\071\037\001\002\000\004" +
    "\012\uff96\001\002\000\056\005\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030\uff9c\031\uff9c\033" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c\067\uff9c\001\002" +
    "\000\022\006\uffb5\007\uffb5\010\uffb5\011\uffb5\066\uffb5\067" +
    "\uffb5\070\uffb5\071\uffb5\001\002\000\022\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\001" +
    "\002\000\022\006\uffaf\007\uffaf\010\uffaf\011\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\001\002\000\022\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\001\002\000\022\006\077\007\044\010\052\011\032\066" +
    "\033\067\041\070\027\071\037\001\002\000\050\005\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\030\uffb0\031\uffb0\061\uffb0\062\uffb0\063\uffb0\001\002\000" +
    "\022\006\077\007\044\010\052\011\032\066\033\067\041" +
    "\070\027\071\037\001\002\000\050\005\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae\031" +
    "\uffae\061\uffae\062\uffae\063\uffae\001\002\000\022\006\077" +
    "\007\044\010\052\011\032\066\033\067\041\070\027\071" +
    "\037\001\002\000\050\005\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\001\002\000\022\006\077\007\044\010" +
    "\052\011\032\066\033\067\041\070\027\071\037\001\002" +
    "\000\050\005\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\030\uffb4\031\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\001\002\000\022\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002\000\022\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\001\002\000\022\006\077\007\044\010\052\011" +
    "\032\066\033\067\041\070\027\071\037\001\002\000\050" +
    "\005\uffb9\012\uffb9\013\111\014\112\015\114\016\113\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\030\uffb9\031\uffb9\061\uffb9\062\uffb9\063\uffb9\001" +
    "\002\000\022\006\077\007\044\010\052\011\032\066\033" +
    "\067\041\070\027\071\037\001\002\000\050\005\uffb7\012" +
    "\uffb7\013\111\014\112\015\114\016\113\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030" +
    "\uffb7\031\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002\000\050" +
    "\005\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\030\uffa6\031\uffa6\061\uffa6\062\uffa6\063\uffa6\001" +
    "\002\000\050\005\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\030\uffa5\031\uffa5\061\uffa5\062\uffa5" +
    "\063\uffa5\001\002\000\024\006\uff87\007\uff87\010\uff87\011" +
    "\uff87\032\uff87\066\uff87\067\uff87\070\uff87\071\uff87\001\002" +
    "\000\024\006\077\007\044\010\052\011\032\032\070\066" +
    "\033\067\041\070\027\071\037\001\002\000\006\005\uff86" +
    "\061\uff86\001\002\000\024\006\uff84\007\uff84\010\uff84\011" +
    "\uff84\032\uff84\066\uff84\067\uff84\070\uff84\071\uff84\001\002" +
    "\000\024\006\077\007\044\010\052\011\032\032\070\066" +
    "\033\067\041\070\027\071\037\001\002\000\006\005\uff83" +
    "\061\uff83\001\002\000\024\006\uff81\007\uff81\010\uff81\011" +
    "\uff81\032\uff81\066\uff81\067\uff81\070\uff81\071\uff81\001\002" +
    "\000\024\006\077\007\044\010\052\011\032\032\070\066" +
    "\033\067\041\070\027\071\037\001\002\000\006\005\uff80" +
    "\061\uff80\001\002\000\024\006\uff7e\007\uff7e\010\uff7e\011" +
    "\uff7e\032\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\001\002" +
    "\000\024\006\077\007\044\010\052\011\032\032\070\066" +
    "\033\067\041\070\027\071\037\001\002\000\006\005\uff7d" +
    "\061\uff7d\001\002\000\024\006\077\007\044\010\052\011" +
    "\032\032\070\066\033\067\041\070\027\071\037\001\002" +
    "\000\004\062\153\001\002\000\004\045\154\001\002\000" +
    "\034\003\050\006\051\007\044\010\052\011\032\046\uff7a" +
    "\054\053\055\031\056\035\066\033\067\041\070\027\071" +
    "\037\001\002\000\004\046\uffe1\001\002\000\036\003\uff76" +
    "\006\uff76\007\uff76\010\uff76\011\uff76\046\uff76\054\uff76\055" +
    "\uff76\056\uff76\064\uff76\066\uff76\067\uff76\070\uff76\071\uff76" +
    "\001\002\000\036\003\uff72\006\uff72\007\uff72\010\uff72\011" +
    "\uff72\046\uff72\054\uff72\055\uff72\056\uff72\064\uff72\066\uff72" +
    "\067\uff72\070\uff72\071\uff72\001\002\000\006\046\uff7c\064" +
    "\uff7c\001\002\000\036\003\uff73\006\uff73\007\uff73\010\uff73" +
    "\011\uff73\046\uff73\054\uff73\055\uff73\056\uff73\064\uff73\066" +
    "\uff73\067\uff73\070\uff73\071\uff73\001\002\000\006\046\uff7b" +
    "\064\uff7b\001\002\000\036\003\uff79\006\uff79\007\uff79\010" +
    "\uff79\011\uff79\046\uff79\054\uff79\055\uff79\056\uff79\064\uff79" +
    "\066\uff79\067\uff79\070\uff79\071\uff79\001\002\000\016\006" +
    "\077\007\044\010\052\011\032\070\027\071\037\001\002" +
    "\000\050\005\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\030\uffa7\031\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\001\002\000\036\003\uff75\006\uff75\007\uff75\010\uff75" +
    "\011\uff75\046\uff75\054\uff75\055\uff75\056\uff75\064\uff75\066" +
    "\uff75\067\uff75\070\uff75\071\uff75\001\002\000\020\006\077" +
    "\007\044\010\052\011\032\032\101\070\027\071\037\001" +
    "\002\000\004\012\171\001\002\000\056\005\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\030\uff9d" +
    "\031\uff9d\033\uff9d\061\uff9d\062\uff9d\063\uff9d\066\uff9d\067" +
    "\uff9d\001\002\000\036\003\uff77\006\uff77\007\uff77\010\uff77" +
    "\011\uff77\046\uff77\054\uff77\055\uff77\056\uff77\064\uff77\066" +
    "\uff77\067\uff77\070\uff77\071\uff77\001\002\000\024\006\077" +
    "\007\044\010\052\011\176\027\177\066\033\067\041\070" +
    "\027\071\037\001\002\000\014\012\uffc8\030\uffc8\031\uffc8" +
    "\062\uffc8\063\uffc8\001\002\000\014\012\uffca\030\uffca\031" +
    "\uffca\062\uffca\063\uffca\001\002\000\026\006\077\007\044" +
    "\010\052\011\176\027\177\032\070\066\033\067\041\070" +
    "\027\071\037\001\002\000\022\006\077\007\044\010\052" +
    "\011\176\066\033\067\041\070\027\071\037\001\002\000" +
    "\022\017\126\020\125\021\223\022\221\023\216\024\220" +
    "\025\217\026\222\001\002\000\014\012\uffcc\030\206\031" +
    "\uffcc\062\uffcc\063\uffcc\001\002\000\006\031\204\063\203" +
    "\001\002\000\036\003\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\046\uffe6\054\uffe6\055\uffe6\056\uffe6\064\uffe6\066\uffe6" +
    "\067\uffe6\070\uffe6\071\uffe6\001\002\000\024\006\077\007" +
    "\044\010\052\011\176\027\177\066\033\067\041\070\027" +
    "\071\037\001\002\000\014\012\uffcd\030\206\031\uffcd\062" +
    "\uffcd\063\uffcd\001\002\000\024\006\077\007\044\010\052" +
    "\011\176\027\177\066\033\067\041\070\027\071\037\001" +
    "\002\000\014\012\uffcb\030\uffcb\031\uffcb\062\uffcb\063\uffcb" +
    "\001\002\000\036\003\050\006\051\007\044\010\052\011" +
    "\032\046\uff7a\054\053\055\031\056\035\064\uff7a\066\033" +
    "\067\041\070\027\071\037\001\002\000\006\046\uffe5\064" +
    "\uffe5\001\002\000\006\046\uffe2\064\214\001\002\000\004" +
    "\046\uffe4\001\002\000\034\003\050\006\051\007\044\010" +
    "\052\011\032\046\uff7a\054\053\055\031\056\035\066\033" +
    "\067\041\070\027\071\037\001\002\000\004\046\uffe3\001" +
    "\002\000\022\006\uffc3\007\uffc3\010\uffc3\011\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\001\002\000\022\006\uffbf\007" +
    "\uffbf\010\uffbf\011\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\001\002\000\022\006\uffc1\007\uffc1\010\uffc1\011\uffc1\066" +
    "\uffc1\067\uffc1\070\uffc1\071\uffc1\001\002\000\022\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\001\002\000\022\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\001\002\000\022\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\066\uffc7\067\uffc7\070\uffc7" +
    "\071\uffc7\001\002\000\022\006\077\007\044\010\052\011" +
    "\032\066\033\067\041\070\027\071\037\001\002\000\020" +
    "\012\uffc6\017\126\020\125\030\uffc6\031\uffc6\062\uffc6\063" +
    "\uffc6\001\002\000\022\006\077\007\044\010\052\011\032" +
    "\066\033\067\041\070\027\071\037\001\002\000\020\012" +
    "\uffbc\017\126\020\125\030\uffbc\031\uffbc\062\uffbc\063\uffbc" +
    "\001\002\000\022\006\077\007\044\010\052\011\032\066" +
    "\033\067\041\070\027\071\037\001\002\000\020\012\uffc4" +
    "\017\126\020\125\030\uffc4\031\uffc4\062\uffc4\063\uffc4\001" +
    "\002\000\022\006\077\007\044\010\052\011\032\066\033" +
    "\067\041\070\027\071\037\001\002\000\020\012\uffc0\017" +
    "\126\020\125\030\uffc0\031\uffc0\062\uffc0\063\uffc0\001\002" +
    "\000\022\006\077\007\044\010\052\011\032\066\033\067" +
    "\041\070\027\071\037\001\002\000\020\012\uffbe\017\126" +
    "\020\125\030\uffbe\031\uffbe\062\uffbe\063\uffbe\001\002\000" +
    "\022\006\077\007\044\010\052\011\032\066\033\067\041" +
    "\070\027\071\037\001\002\000\020\012\uffc2\017\126\020" +
    "\125\030\uffc2\031\uffc2\062\uffc2\063\uffc2\001\002\000\014" +
    "\012\uffc9\030\uffc9\031\uffc9\062\uffc9\063\uffc9\001\002\000" +
    "\004\012\245\001\002\000\024\012\uffcf\017\126\020\125" +
    "\021\223\022\221\023\216\024\220\025\217\026\222\001" +
    "\002\000\006\012\244\031\204\001\002\000\014\012\uffbb" +
    "\030\uffbb\031\uffbb\062\uffbb\063\uffbb\001\002\000\056\005" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\030\uffa4\031\uffa4\033\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\066\uffa4\067\uffa4\001\002\000\004\002\ufffe\001\002\000" +
    "\016\006\077\007\044\010\052\011\032\070\027\071\037" +
    "\001\002\000\050\005\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\030\uffa9\031\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\001\002\000\024\006\077\007\044\010\052" +
    "\011\176\027\177\066\033\067\041\070\027\071\037\001" +
    "\002\000\006\031\204\062\253\001\002\000\004\045\uffdf" +
    "\001\002\000\004\045\255\001\002\000\034\003\050\006" +
    "\051\007\044\010\052\011\032\046\uff7a\054\053\055\031" +
    "\056\035\066\033\067\041\070\027\071\037\001\002\000" +
    "\004\046\uffde\001\002\000\022\003\260\006\077\007\044" +
    "\010\052\011\032\012\263\070\027\071\037\001\002\000" +
    "\004\012\265\001\002\000\004\012\264\001\002\000\056" +
    "\005\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\030\uff9e\031\uff9e\033\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\066\uff9e\067\uff9e\001\002\000\056\005\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\030\uff9b" +
    "\031\uff9b\033\uff9b\061\uff9b\062\uff9b\063\uff9b\066\uff9b\067" +
    "\uff9b\001\002\000\056\005\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a\033\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\066\uff9a\067\uff9a\001\002\000" +
    "\056\005\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\030\uff99\031\uff99\033\uff99\061\uff99\062\uff99" +
    "\063\uff99\066\uff99\067\uff99\001\002\000\036\003\uff74\006" +
    "\uff74\007\uff74\010\uff74\011\uff74\046\uff74\054\uff74\055\uff74" +
    "\056\uff74\064\uff74\066\uff74\067\uff74\070\uff74\071\uff74\001" +
    "\002\000\006\003\270\011\272\001\002\000\004\005\322" +
    "\001\002\000\004\046\ufff6\001\002\000\022\012\uffed\036" +
    "\273\037\304\040\301\041\276\042\277\043\305\044\274" +
    "\001\002\000\014\004\uff92\005\uff92\006\uff92\034\uff92\045" +
    "\uff92\001\002\000\014\004\uff8c\005\uff8c\006\uff8c\034\uff8c" +
    "\045\uff8c\001\002\000\006\012\uffea\033\317\001\002\000" +
    "\014\004\uff8f\005\uff8f\006\uff8f\034\uff8f\045\uff8f\001\002" +
    "\000\014\004\uff8e\005\uff8e\006\uff8e\034\uff8e\045\uff8e\001" +
    "\002\000\004\006\uffe9\001\002\000\014\004\uff90\005\uff90" +
    "\006\uff90\034\uff90\045\uff90\001\002\000\004\012\uffee\001" +
    "\002\000\004\012\306\001\002\000\014\004\uff91\005\uff91" +
    "\006\uff91\034\uff91\045\uff91\001\002\000\014\004\uff8d\005" +
    "\uff8d\006\uff8d\034\uff8d\045\uff8d\001\002\000\004\035\307" +
    "\001\002\000\020\036\273\037\304\040\301\041\276\042" +
    "\277\043\305\044\274\001\002\000\010\004\ufff5\034\ufff5" +
    "\045\ufff5\001\002\000\010\004\011\034\012\045\uffef\001" +
    "\002\000\004\045\313\001\002\000\034\003\050\006\051" +
    "\007\044\010\052\011\032\046\uff7a\054\053\055\031\056" +
    "\035\066\033\067\041\070\027\071\037\001\002\000\004" +
    "\046\ufff4\001\002\000\004\006\316\001\002\000\006\012" +
    "\uffe8\033\uffe8\001\002\000\022\012\uffed\036\273\037\304" +
    "\040\301\041\276\042\277\043\305\044\274\001\002\000" +
    "\004\012\uffec\001\002\000\004\012\uffeb\001\002\000\004" +
    "\046\ufff3\001\002\000\010\045\ufffa\057\022\060\017\001" +
    "\002\000\004\045\ufffc\001\002\000\010\045\ufffa\057\022" +
    "\060\017\001\002\000\004\045\ufffb\001\002\000\006\003" +
    "\330\011\332\001\002\000\004\005\340\001\002\000\004" +
    "\046\ufff9\001\002\000\022\012\uffed\036\273\037\304\040" +
    "\301\041\276\042\277\043\305\044\274\001\002\000\004" +
    "\012\334\001\002\000\010\004\011\034\012\045\uffef\001" +
    "\002\000\004\045\336\001\002\000\034\003\050\006\051" +
    "\007\044\010\052\011\032\046\uff7a\054\053\055\031\056" +
    "\035\066\033\067\041\070\027\071\037\001\002\000\004" +
    "\046\ufff8\001\002\000\004\046\ufff7\001\002\000\020\036" +
    "\273\037\304\040\301\041\276\042\277\043\305\044\274" +
    "\001\002\000\006\033\uffd0\035\uffd0\001\002\000\006\033" +
    "\350\035\351\001\002\000\012\004\uffd6\045\uffd6\057\uffd6" +
    "\060\uffd6\001\002\000\004\005\346\001\002\000\016\003" +
    "\341\004\uffd4\006\342\045\uffd4\057\uffd4\060\uffd4\001\002" +
    "\000\012\004\uffd5\045\uffd5\057\uffd5\060\uffd5\001\002\000" +
    "\004\006\353\001\002\000\020\036\273\037\304\040\301" +
    "\041\276\042\277\043\305\044\274\001\002\000\004\005" +
    "\uffd3\001\002\000\006\033\uffd1\035\uffd1\001\002\000\004" +
    "\005\uffd2\001\002\000\010\007\044\010\052\032\367\001" +
    "\002\000\004\021\363\001\002\000\004\005\361\001\002" +
    "\000\010\045\uffdd\057\uffdd\060\uffdd\001\002\000\014\003" +
    "\355\006\356\045\uffdb\057\uffdb\060\uffdb\001\002\000\010" +
    "\045\uffdc\057\uffdc\060\uffdc\001\002\000\010\007\044\010" +
    "\052\032\365\001\002\000\004\005\uffda\001\002\000\004" +
    "\005\uffd9\001\002\000\004\005\uffd8\001\002\000\004\005" +
    "\uffd7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\044\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\007\001\001" +
    "\000\010\003\014\004\013\037\012\001\001\000\006\010" +
    "\357\011\356\001\001\000\010\005\343\006\344\007\342" +
    "\001\001\000\010\024\017\026\020\032\022\001\001\000" +
    "\004\003\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\024\001\001" +
    "\000\030\012\027\013\046\030\045\031\042\034\035\035" +
    "\041\036\033\040\037\041\025\042\044\045\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\250\001\001\000\022\012\071\013\046\014\066" +
    "\015\075\016\072\022\240\034\070\045\073\001\001\000" +
    "\004\102\246\001\001\000\002\001\001\000\004\061\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\103\163\001\001\000\002\001\001\000\030" +
    "\012\027\013\046\030\045\031\042\034\035\035\041\036" +
    "\161\040\037\041\025\042\044\045\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\027\013\046\030" +
    "\045\031\042\034\035\035\041\036\157\040\037\041\025" +
    "\042\044\045\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\104\063\106\062\110\061\112\060\114\057" +
    "\001\001\000\002\001\001\000\004\035\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\104\063\106\062\110\061\112\060\114\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\065\001\001\000" +
    "\022\012\071\013\046\014\066\015\075\016\072\022\074" +
    "\034\070\045\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\101\013\046\033\104\034\070" +
    "\051\102\052\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\101\013\046\033\104\034\070\051\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\122" +
    "\001\001\000\004\077\120\001\001\000\004\101\116\001" +
    "\001\000\004\100\114\001\001\000\014\012\071\013\046" +
    "\014\115\034\070\045\073\001\001\000\002\001\001\000" +
    "\014\012\071\013\046\014\117\034\070\045\073\001\001" +
    "\000\002\001\001\000\014\012\071\013\046\014\121\034" +
    "\070\045\073\001\001\000\002\001\001\000\014\012\071" +
    "\013\046\014\123\034\070\045\073\001\001\000\002\001" +
    "\001\000\004\075\130\001\001\000\004\074\126\001\001" +
    "\000\016\012\071\013\046\014\066\015\127\034\070\045" +
    "\073\001\001\000\002\001\001\000\016\012\071\013\046" +
    "\014\066\015\131\034\070\045\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\135" +
    "\001\001\000\022\012\071\013\046\014\066\015\075\016" +
    "\072\022\136\034\070\045\073\001\001\000\002\001\001" +
    "\000\004\111\140\001\001\000\022\012\071\013\046\014" +
    "\066\015\075\016\072\022\141\034\070\045\073\001\001" +
    "\000\002\001\001\000\004\113\143\001\001\000\022\012" +
    "\071\013\046\014\066\015\075\016\072\022\144\034\070" +
    "\045\073\001\001\000\002\001\001\000\004\115\146\001" +
    "\001\000\022\012\071\013\046\014\066\015\075\016\072" +
    "\022\147\034\070\045\073\001\001\000\002\001\001\000" +
    "\022\012\071\013\046\014\066\015\075\016\072\022\151" +
    "\034\070\045\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\027\013\046\030\045\031\042\034\035" +
    "\035\041\036\154\040\037\041\025\042\044\045\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\164\013\046\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\101\013" +
    "\046\033\104\034\070\051\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\071\013" +
    "\046\014\066\015\075\016\177\017\173\020\200\021\174" +
    "\023\201\034\070\045\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\071\013\046\014\066\015\075" +
    "\016\241\017\173\020\200\021\174\022\240\023\242\034" +
    "\070\045\073\001\001\000\022\012\071\013\046\014\066" +
    "\015\075\016\177\017\237\034\070\045\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\207\001\001\000\026\012\071\013\046\014\066\015" +
    "\075\016\177\017\173\020\204\021\174\034\070\045\073" +
    "\001\001\000\002\001\001\000\024\012\071\013\046\014" +
    "\066\015\075\016\177\017\173\021\206\034\070\045\073" +
    "\001\001\000\002\001\001\000\030\012\027\013\046\030" +
    "\045\031\042\034\035\035\041\036\210\040\037\041\025" +
    "\042\044\045\053\001\001\000\004\063\211\001\001\000" +
    "\004\043\212\001\001\000\002\001\001\000\030\012\027" +
    "\013\046\030\045\031\042\034\035\035\041\036\214\040" +
    "\037\041\025\042\044\045\053\001\001\000\002\001\001" +
    "\000\004\070\235\001\001\000\004\072\233\001\001\000" +
    "\004\071\231\001\001\000\004\067\227\001\001\000\004" +
    "\073\225\001\001\000\004\066\223\001\001\000\020\012" +
    "\071\013\046\014\066\015\075\016\224\034\070\045\073" +
    "\001\001\000\002\001\001\000\020\012\071\013\046\014" +
    "\066\015\075\016\226\034\070\045\073\001\001\000\002" +
    "\001\001\000\020\012\071\013\046\014\066\015\075\016" +
    "\230\034\070\045\073\001\001\000\002\001\001\000\020" +
    "\012\071\013\046\014\066\015\075\016\232\034\070\045" +
    "\073\001\001\000\002\001\001\000\020\012\071\013\046" +
    "\014\066\015\075\016\234\034\070\045\073\001\001\000" +
    "\002\001\001\000\020\012\071\013\046\014\066\015\075" +
    "\016\236\034\070\045\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\247\013\046\034\070\001\001\000\002" +
    "\001\001\000\030\012\071\013\046\014\066\015\075\016" +
    "\177\017\173\020\200\021\174\023\251\034\070\045\073" +
    "\001\001\000\002\001\001\000\004\065\253\001\001\000" +
    "\002\001\001\000\030\012\027\013\046\030\045\031\042" +
    "\034\035\035\041\036\255\040\037\041\025\042\044\045" +
    "\053\001\001\000\002\001\001\000\012\012\260\013\046" +
    "\034\070\050\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\277" +
    "\025\302\046\301\047\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\307\001" +
    "\001\000\004\057\310\001\001\000\010\003\014\004\013" +
    "\037\311\001\001\000\002\001\001\000\030\012\027\013" +
    "\046\030\045\031\042\034\035\035\041\036\313\040\037" +
    "\041\025\042\044\045\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\277\025\320" +
    "\046\301\047\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\017\026\020\032\323" +
    "\001\001\000\002\001\001\000\010\024\017\026\020\032" +
    "\325\001\001\000\002\001\001\000\004\054\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\277\025" +
    "\332\046\301\047\274\001\001\000\002\001\001\000\010" +
    "\003\014\004\013\037\334\001\001\000\002\001\001\000" +
    "\030\012\027\013\046\030\045\031\042\034\035\035\041" +
    "\036\336\040\037\041\025\042\044\045\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\346\006\344\007\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\361\011\356\001\001" +
    "\000\002\001\001\000\004\013\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Coder coder = new Coder();

    public Coder getCoder() {
        return coder;
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_END ::= error END 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN SENTENCIA IF, WHILE O FOR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_END ::= ESTR_IF END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_END ::= ESTR_WHILE END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_END ::= ESTR_FOR END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_PUNTOYCOMA ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Error sintáctico: ERROR EN SENTENCIA ASIGNACION, LLAMADA A FUNCION O EXPRESION" + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_PUNTOYCOMA ::= LLAMADA_FUNCION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_PUNTOYCOMA ::= INC_DEC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_PUNTOYCOMA ::= ASIGNACION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIAS ::= SENTENCIA_END SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIAS ::= SENTENCIA_PUNTOYCOMA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNACION ::= IDENTIFICADOR NT$31 OprASIG_DIV NT$32 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$31 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ASIGNACION ::= IDENTIFICADOR NT$29 OprASIG_MUL NT$30 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$29 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ASIGNACION ::= IDENTIFICADOR NT$27 OprASIG_RESTA NT$28 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$27 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ASIGNACION ::= IDENTIFICADOR NT$25 OprASIG_MAS NT$26 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$25 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNACION ::= IDENTIFICADOR NT$23 OprASIGNACION NT$24 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getCoder().evalBinaria(); parser.getCoder().generarCodigoAsignacion(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$23 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPO ::= TYPE_REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPO ::= TYPE_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPO ::= TYPE_STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TIPO ::= TYPE_CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIPO ::= TYPE_SHORTINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO ::= TYPE_LONGINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO ::= TYPE_INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMETRO ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETRO ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMETROS_NO_VACIOS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMETROS_NO_VACIOS ::= PARAMETRO COMA PARAMETROS_NO_VACIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMETROS ::= PARAMETROS_NO_VACIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMETRO_READ ::= error PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: La funcion solo acepta 1 parámetro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMETRO_READ ::= TERMINO PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETRO_READ ::= PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADA_FUNCION ::= IDENTIFICADOR PARENTESIS_ABRE PARAMETROS PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LLAMADA_FUNCION ::= WRITE PARENTESIS_ABRE PARAMETROS_NO_VACIOS PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LLAMADA_FUNCION ::= READ PARENTESIS_ABRE PARAMETRO_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NUMERO ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.getCoder().recordarDO("Int", (String) i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NUMERO ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; parser.getCoder().recordarDO("Float", (String)f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TERMINO ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TERMINO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TERMINO ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TERMINO ::= PARENTESIS_ABRE EXP PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INC_DEC ::= TERMINO Op_DEC 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarOperacion((String)o); parser.getCoder().postIncDec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INC_DEC ::= TERMINO Op_INC 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarOperacion((String)o); parser.getCoder().postIncDec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INC_DEC ::= Op_DEC NT$22 TERMINO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getCoder().preIncDec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$22 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INC_DEC ::= Op_INC NT$21 TERMINO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getCoder().preIncDec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$21 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // UNARIO ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // UNARIO ::= INC_DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MULTIPLICATIVOS ::= UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_MOD NT$20 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$20 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_DIV NT$19 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$19 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpDIV NT$18 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpMUL NT$17 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$17 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ADITIVOS ::= MULTIPLICATIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ADITIVOS ::= ADITIVOS OpRESTA NT$16 MULTIPLICATIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$16 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ADITIVOS ::= ADITIVOS OpSUMA NT$15 MULTIPLICATIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$15 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND_REL ::= PARENTESIS_ABRE CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND_REL ::= ADITIVOS OpDIFERENTE NT$14 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$14 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND_REL ::= ADITIVOS OpMENOR_IGUAL NT$13 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$13 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND_REL ::= ADITIVOS OpMENOR NT$12 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$12 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND_REL ::= ADITIVOS OpMAYOR_IGUAL NT$11 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$11 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND_REL ::= ADITIVOS OpMAYOR NT$10 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$10 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND_REL ::= ADITIVOS OpIGUAL NT$9 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$9 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND_NOT ::= COND_REL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND_NOT ::= OpNOT COND_REL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND_AND ::= COND_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND_AND ::= COND_AND OpAND COND_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= COND_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= CONDICION OpOR COND_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IDENTIFICADORES ::= IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLE ::= error TIPO 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE VARIABLE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARIABLE ::= IDENTIFICADORES DOS_PUNTOS TIPO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarVariablesEnTSimbolos((String)tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLES ::= VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLES ::= VARIABLE PUNTOYCOMA VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARAR_VARIABLES ::= VAR VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONSTANTE ::= error STRING 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONSTANTE ::= error NUMERO 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONSTANTE ::= IDENTIFICADOR OpIGUAL STRING 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarConstanteEnTSimbolos((String)i, "String", s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONSTANTE ::= IDENTIFICADOR OpIGUAL NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarConstanteEnTSimbolos((String)i, "Numero", n);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONSTANTES ::= CONSTANTE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONSTANTES ::= CONSTANTE PUNTOYCOMA CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARAR_CONSTANTES ::= CONST CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONSTANTES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTR_WHILE ::= WHILE NT$7 CONDICION DO NT$8 BEGIN SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getCoder().end_while(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 parser.getCoder().evalExp_While(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.getCoder().start_while(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESTR_FOR ::= FOR ASIGNACION TO EXP DO BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_FOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ESTR_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ESTR_ELSE ::= ELSE SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESTR_IF ::= IF NT$4 CONDICION THEN NT$5 SENTENCIAS NT$6 ESTR_ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getCoder().end_if(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_IF",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 parser.getCoder().else_if(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 parser.getCoder().evalExp_if(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.getCoder().start_if(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGUMENTO ::= TIPO NT$3 IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarTipo((String)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGUMENTOS_P ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGUMENTOS_P ::= COMA ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGUMENTOS_NO_VACIO ::= ARGUMENTO ARGUMENTOS_P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_NO_VACIO",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARGUMENTOS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARGUMENTOS ::= ARGUMENTOS_NO_VACIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUE_DECLARACIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_DECLARACIONES ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION_BLOQUE ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN FUNCION" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_BLOQUE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO NT$2 BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_BLOQUE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarTipo((String)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= FUNCTION IDENTIFICADOR FUNCION_BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getCoder().guardarFuncionEnTsimbolo((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDIMIENTO_BLOQUE ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN PROCEDIMIENTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_BLOQUE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDIMIENTO_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_BLOQUE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTO ::= PROCEDURE IDENTIFICADOR PROCEDIMIENTO_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= FUNCION END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= PROCEDIMIENTO END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA_PROGRAMA ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN PROGRAMA, FALTA UN BEGIN O END"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROGRAMA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESTRUCTURA_PROGRAMA ::= PROGRAM IDENTIFICADOR NT$0 BLOQUE_DECLARACIONES BLOQUE_FUNCIONES_PROCEDIMIENTOS BEGIN NT$1 SENTENCIAS END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROGRAMA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 parser.getCoder().iniciarCode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.getCoder().iniciarVar(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ESTRUCTURA_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

