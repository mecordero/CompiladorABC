
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 24 12:07:54 CST 2018
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import Clases.Coder;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 24 12:07:54 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\044\011\000\002\044" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\002" +
    "\000\002\026\005\000\002\054\010\000\002\054\004\000" +
    "\002\024\005\000\002\055\002\000\002\053\013\000\002" +
    "\053\004\000\002\037\004\000\002\037\003\000\002\037" +
    "\003\000\002\037\002\000\002\025\003\000\002\025\002" +
    "\000\002\046\004\000\002\027\004\000\002\027\002\000" +
    "\002\056\002\000\002\047\005\000\002\042\006\000\002" +
    "\042\007\000\002\043\004\000\002\040\011\000\002\041" +
    "\007\000\002\003\004\000\002\010\005\000\002\010\004" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\011\004\000\002\004\004\000\002\005\005\000\002" +
    "\005\004\000\002\006\005\000\002\006\004\000\002\007" +
    "\005\000\002\007\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\004\000\002\021\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\057\002\000\002\016\006\000\002\060\002\000" +
    "\002\016\006\000\002\016\003\000\002\061\002\000\002" +
    "\015\006\000\002\062\002\000\002\015\006\000\002\063" +
    "\002\000\002\015\006\000\002\064\002\000\002\015\006" +
    "\000\002\015\003\000\002\014\003\000\002\014\003\000" +
    "\002\045\004\000\002\045\004\000\002\045\004\000\002" +
    "\045\004\000\002\012\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\034\005\000\002\034\006\000\002\034\006\000" +
    "\002\050\003\000\002\050\004\000\002\050\004\000\002" +
    "\052\003\000\002\052\002\000\002\051\005\000\002\051" +
    "\003\000\002\033\003\000\002\033\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\065\002\000\002\066\002\000\002\035\007\000\002\067" +
    "\002\000\002\070\002\000\002\035\007\000\002\071\002" +
    "\000\002\072\002\000\002\035\007\000\002\073\002\000" +
    "\002\074\002\000\002\035\007\000\002\075\002\000\002" +
    "\076\002\000\002\035\007\000\002\036\004\000\002\036" +
    "\004\000\002\036\002\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\006\003\004\065\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\351\001\002\000\004\006\007" +
    "\001\002\000\014\004\011\034\010\045\ufff1\057\ufff1\060" +
    "\ufff1\001\002\000\006\003\335\006\336\001\002\000\006" +
    "\003\322\006\323\001\002\000\010\045\ufffc\057\021\060" +
    "\016\001\002\000\012\004\011\045\ufff3\057\ufff3\060\ufff3" +
    "\001\002\000\010\045\ufff2\057\ufff2\060\ufff2\001\002\000" +
    "\010\045\ufff4\057\ufff4\060\ufff4\001\002\000\004\006\310" +
    "\001\002\000\004\046\306\001\002\000\004\046\304\001" +
    "\002\000\004\006\250\001\002\000\004\045\023\001\002" +
    "\000\034\003\046\006\047\007\042\010\050\011\030\046" +
    "\uff89\054\051\055\027\056\033\066\031\067\037\070\024" +
    "\071\035\001\002\000\004\011\241\001\002\000\004\046" +
    "\240\001\002\000\006\066\131\067\132\001\002\000\024" +
    "\006\075\007\042\010\050\011\172\027\173\066\031\067" +
    "\037\070\024\071\035\001\002\000\024\006\075\007\042" +
    "\010\050\011\030\032\066\066\031\067\037\070\024\071" +
    "\035\001\002\000\016\006\075\007\042\010\050\011\030" +
    "\070\024\071\035\001\002\000\004\046\232\001\002\000" +
    "\024\006\075\007\042\010\050\011\172\027\173\066\031" +
    "\067\037\070\024\071\035\001\002\000\010\005\167\066" +
    "\uffb0\067\uffb0\001\002\000\004\011\164\001\002\000\004" +
    "\046\163\001\002\000\016\006\075\007\042\010\050\011" +
    "\030\070\024\071\035\001\002\000\004\005\161\001\002" +
    "\000\036\003\046\006\047\007\042\010\050\011\030\046" +
    "\uff89\054\051\055\027\056\033\064\uff89\066\031\067\037" +
    "\070\024\071\035\001\002\000\056\005\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031" +
    "\uffaf\033\uffaf\061\uffaf\062\uffaf\063\uffaf\066\uffaf\067\uffaf" +
    "\001\002\000\004\046\157\001\002\000\036\003\046\006" +
    "\047\007\042\010\050\011\030\046\uff89\054\051\055\027" +
    "\056\033\064\uff89\066\031\067\037\070\024\071\035\001" +
    "\002\000\056\005\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2\033\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\066\uffb2\067\uffb2\001\002\000\006\005" +
    "\154\046\155\001\002\000\022\011\076\047\uff9a\050\uff97" +
    "\051\uff94\052\uff91\053\uff8e\066\uffb1\067\uffb1\001\002\000" +
    "\056\005\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\030\uffae\031\uffae\033\uffae\061\uffae\062\uffae" +
    "\063\uffae\066\uffae\067\uffae\001\002\000\004\006\055\001" +
    "\002\000\004\005\053\001\002\000\036\003\uff87\006\uff87" +
    "\007\uff87\010\uff87\011\uff87\046\uff87\054\uff87\055\uff87\056" +
    "\uff87\064\uff87\066\uff87\067\uff87\070\uff87\071\uff87\001\002" +
    "\000\004\061\147\001\002\000\014\047\uff9a\050\uff97\051" +
    "\uff94\052\uff91\053\uff8e\001\002\000\004\050\144\001\002" +
    "\000\004\053\141\001\002\000\004\047\136\001\002\000" +
    "\004\052\133\001\002\000\004\051\063\001\002\000\024" +
    "\006\uff93\007\uff93\010\uff93\011\uff93\032\uff93\066\uff93\067" +
    "\uff93\070\uff93\071\uff93\001\002\000\024\006\075\007\042" +
    "\010\050\011\030\032\066\066\031\067\037\070\024\071" +
    "\035\001\002\000\050\005\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba\061\uffba" +
    "\062\uffba\063\uffba\001\002\000\012\005\uffd5\012\uffd5\061" +
    "\uffd5\062\uffd5\001\002\000\056\005\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0" +
    "\033\uffb0\061\uffb0\062\uffb0\063\uffb0\066\uffb0\067\uffb0\001" +
    "\002\000\054\005\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\066\131\067\132\001\002\000\016\005\uffd6\012" +
    "\uffd6\017\124\020\123\061\uffd6\062\uffd6\001\002\000\050" +
    "\005\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\030\uffb9\031\uffb9\061\uffb9\062\uffb9\063\uffb9\001" +
    "\002\000\006\005\uff92\061\uff92\001\002\000\050\005\uffc3" +
    "\012\uffc3\013\107\014\110\015\112\016\111\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\030\uffc3\031\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002\000" +
    "\060\005\uffb1\011\076\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1\033\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\066\uffb1\067\uffb1\001\002\000\022\006" +
    "\075\007\042\010\050\011\030\012\uffa6\032\077\070\024" +
    "\071\035\001\002\000\006\012\uffa2\033\uffa2\001\002\000" +
    "\006\012\uffa3\033\uffa3\001\002\000\004\012\uffa7\001\002" +
    "\000\004\012\106\001\002\000\006\012\uffa4\033\104\001" +
    "\002\000\020\006\075\007\042\010\050\011\030\032\077" +
    "\070\024\071\035\001\002\000\004\012\uffa5\001\002\000" +
    "\056\005\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\030\uffab\031\uffab\033\uffab\061\uffab\062\uffab" +
    "\063\uffab\066\uffab\067\uffab\001\002\000\022\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2" +
    "\001\002\000\022\006\uffc0\007\uffc0\010\uffc0\011\uffc0\066" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\001\002\000\022\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\066\uffbc\067\uffbc\070\uffbc\071" +
    "\uffbc\001\002\000\022\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\066\uffbe\067\uffbe\070\uffbe\071\uffbe\001\002\000\022\006" +
    "\075\007\042\010\050\011\030\066\031\067\037\070\024" +
    "\071\035\001\002\000\050\005\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\001\002\000\022\006\075\007\042" +
    "\010\050\011\030\066\031\067\037\070\024\071\035\001" +
    "\002\000\050\005\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\001\002\000\022\006\075\007\042\010\050\011" +
    "\030\066\031\067\037\070\024\071\035\001\002\000\050" +
    "\005\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\030\uffbf\031\uffbf\061\uffbf\062\uffbf\063\uffbf\001" +
    "\002\000\022\006\075\007\042\010\050\011\030\066\031" +
    "\067\037\070\024\071\035\001\002\000\050\005\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030" +
    "\uffc1\031\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002\000\022" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\001\002\000\022\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\001\002\000" +
    "\022\006\075\007\042\010\050\011\030\066\031\067\037" +
    "\070\024\071\035\001\002\000\050\005\uffc6\012\uffc6\013" +
    "\107\014\110\015\112\016\111\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\031" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002\000\022\006\075" +
    "\007\042\010\050\011\030\066\031\067\037\070\024\071" +
    "\035\001\002\000\050\005\uffc4\012\uffc4\013\107\014\110" +
    "\015\112\016\111\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\001\002\000\050\005\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\030\uffb5\031" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\050\005\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\030\uffb4\031\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002\000" +
    "\024\006\uff90\007\uff90\010\uff90\011\uff90\032\uff90\066\uff90" +
    "\067\uff90\070\uff90\071\uff90\001\002\000\024\006\075\007" +
    "\042\010\050\011\030\032\066\066\031\067\037\070\024" +
    "\071\035\001\002\000\006\005\uff8f\061\uff8f\001\002\000" +
    "\024\006\uff99\007\uff99\010\uff99\011\uff99\032\uff99\066\uff99" +
    "\067\uff99\070\uff99\071\uff99\001\002\000\024\006\075\007" +
    "\042\010\050\011\030\032\066\066\031\067\037\070\024" +
    "\071\035\001\002\000\006\005\uff98\061\uff98\001\002\000" +
    "\024\006\uff8d\007\uff8d\010\uff8d\011\uff8d\032\uff8d\066\uff8d" +
    "\067\uff8d\070\uff8d\071\uff8d\001\002\000\024\006\075\007" +
    "\042\010\050\011\030\032\066\066\031\067\037\070\024" +
    "\071\035\001\002\000\006\005\uff8c\061\uff8c\001\002\000" +
    "\024\006\uff96\007\uff96\010\uff96\011\uff96\032\uff96\066\uff96" +
    "\067\uff96\070\uff96\071\uff96\001\002\000\024\006\075\007" +
    "\042\010\050\011\030\032\066\066\031\067\037\070\024" +
    "\071\035\001\002\000\006\005\uff95\061\uff95\001\002\000" +
    "\024\006\075\007\042\010\050\011\030\032\066\066\031" +
    "\067\037\070\024\071\035\001\002\000\004\062\151\001" +
    "\002\000\004\045\152\001\002\000\034\003\046\006\047" +
    "\007\042\010\050\011\030\046\uff89\054\051\055\027\056" +
    "\033\066\031\067\037\070\024\071\035\001\002\000\004" +
    "\046\uffe6\001\002\000\036\003\uff85\006\uff85\007\uff85\010" +
    "\uff85\011\uff85\046\uff85\054\uff85\055\uff85\056\uff85\064\uff85" +
    "\066\uff85\067\uff85\070\uff85\071\uff85\001\002\000\036\003" +
    "\uff81\006\uff81\007\uff81\010\uff81\011\uff81\046\uff81\054\uff81" +
    "\055\uff81\056\uff81\064\uff81\066\uff81\067\uff81\070\uff81\071" +
    "\uff81\001\002\000\006\046\uff8b\064\uff8b\001\002\000\036" +
    "\003\uff82\006\uff82\007\uff82\010\uff82\011\uff82\046\uff82\054" +
    "\uff82\055\uff82\056\uff82\064\uff82\066\uff82\067\uff82\070\uff82" +
    "\071\uff82\001\002\000\006\046\uff8a\064\uff8a\001\002\000" +
    "\036\003\uff88\006\uff88\007\uff88\010\uff88\011\uff88\046\uff88" +
    "\054\uff88\055\uff88\056\uff88\064\uff88\066\uff88\067\uff88\070" +
    "\uff88\071\uff88\001\002\000\050\005\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\001\002\000\036\003\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\046\uff84\054\uff84\055\uff84" +
    "\056\uff84\064\uff84\066\uff84\067\uff84\070\uff84\071\uff84\001" +
    "\002\000\020\006\075\007\042\010\050\011\030\032\077" +
    "\070\024\071\035\001\002\000\004\012\166\001\002\000" +
    "\056\005\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\030\uffac\031\uffac\033\uffac\061\uffac\062\uffac" +
    "\063\uffac\066\uffac\067\uffac\001\002\000\036\003\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\046\uff86\054\uff86\055\uff86" +
    "\056\uff86\064\uff86\066\uff86\067\uff86\070\uff86\071\uff86\001" +
    "\002\000\014\012\uffcf\030\uffcf\031\uffcf\062\uffcf\063\uffcf" +
    "\001\002\000\014\012\uffd1\030\uffd1\031\uffd1\062\uffd1\063" +
    "\uffd1\001\002\000\026\006\075\007\042\010\050\011\172" +
    "\027\173\032\066\066\031\067\037\070\024\071\035\001" +
    "\002\000\022\006\075\007\042\010\050\011\172\066\031" +
    "\067\037\070\024\071\035\001\002\000\022\017\124\020" +
    "\123\021\215\022\213\023\211\024\212\025\210\026\214" +
    "\001\002\000\014\012\uffd3\030\202\031\uffd3\062\uffd3\063" +
    "\uffd3\001\002\000\006\031\200\063\177\001\002\000\036" +
    "\003\046\006\047\007\042\010\050\011\030\046\uff89\054" +
    "\051\055\027\056\033\064\uff89\066\031\067\037\070\024" +
    "\071\035\001\002\000\024\006\075\007\042\010\050\011" +
    "\172\027\173\066\031\067\037\070\024\071\035\001\002" +
    "\000\014\012\uffd4\030\202\031\uffd4\062\uffd4\063\uffd4\001" +
    "\002\000\024\006\075\007\042\010\050\011\172\027\173" +
    "\066\031\067\037\070\024\071\035\001\002\000\014\012" +
    "\uffd2\030\uffd2\031\uffd2\062\uffd2\063\uffd2\001\002\000\006" +
    "\046\uffe9\064\206\001\002\000\004\046\uffe8\001\002\000" +
    "\034\003\046\006\047\007\042\010\050\011\030\046\uff89" +
    "\054\051\055\027\056\033\066\031\067\037\070\024\071" +
    "\035\001\002\000\004\046\uffe7\001\002\000\022\006\075" +
    "\007\042\010\050\011\030\066\031\067\037\070\024\071" +
    "\035\001\002\000\022\006\075\007\042\010\050\011\030" +
    "\066\031\067\037\070\024\071\035\001\002\000\022\006" +
    "\075\007\042\010\050\011\030\066\031\067\037\070\024" +
    "\071\035\001\002\000\022\006\075\007\042\010\050\011" +
    "\030\066\031\067\037\070\024\071\035\001\002\000\022" +
    "\006\075\007\042\010\050\011\030\066\031\067\037\070" +
    "\024\071\035\001\002\000\022\006\075\007\042\010\050" +
    "\011\030\066\031\067\037\070\024\071\035\001\002\000" +
    "\020\012\uffce\017\124\020\123\030\uffce\031\uffce\062\uffce" +
    "\063\uffce\001\002\000\020\012\uffc9\017\124\020\123\030" +
    "\uffc9\031\uffc9\062\uffc9\063\uffc9\001\002\000\020\012\uffcd" +
    "\017\124\020\123\030\uffcd\031\uffcd\062\uffcd\063\uffcd\001" +
    "\002\000\020\012\uffcb\017\124\020\123\030\uffcb\031\uffcb" +
    "\062\uffcb\063\uffcb\001\002\000\020\012\uffcc\017\124\020" +
    "\123\030\uffcc\031\uffcc\062\uffcc\063\uffcc\001\002\000\020" +
    "\012\uffca\017\124\020\123\030\uffca\031\uffca\062\uffca\063" +
    "\uffca\001\002\000\014\012\uffd0\030\uffd0\031\uffd0\062\uffd0" +
    "\063\uffd0\001\002\000\004\012\231\001\002\000\024\012" +
    "\uffd6\017\124\020\123\021\215\022\213\023\211\024\212" +
    "\025\210\026\214\001\002\000\006\012\230\031\200\001" +
    "\002\000\014\012\uffc8\030\uffc8\031\uffc8\062\uffc8\063\uffc8" +
    "\001\002\000\056\005\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\030\uffb3\031\uffb3\033\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\066\uffb3\067\uffb3\001\002\000\004" +
    "\002\000\001\002\000\050\005\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\001\002\000\006\031\200\062\235" +
    "\001\002\000\004\045\236\001\002\000\034\003\046\006" +
    "\047\007\042\010\050\011\030\046\uff89\054\051\055\027" +
    "\056\033\066\031\067\037\070\024\071\035\001\002\000" +
    "\004\046\uffe5\001\002\000\036\003\uff83\006\uff83\007\uff83" +
    "\010\uff83\011\uff83\046\uff83\054\uff83\055\uff83\056\uff83\064" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\001\002\000\022" +
    "\003\242\006\075\007\042\010\050\011\030\012\245\070" +
    "\024\071\035\001\002\000\004\012\247\001\002\000\004" +
    "\012\246\001\002\000\056\005\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\030\uffad\031\uffad\033" +
    "\uffad\061\uffad\062\uffad\063\uffad\066\uffad\067\uffad\001\002" +
    "\000\056\005\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\030\uffaa\031\uffaa\033\uffaa\061\uffaa\062" +
    "\uffaa\063\uffaa\066\uffaa\067\uffaa\001\002\000\056\005\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\030\uffa9\031\uffa9\033\uffa9\061\uffa9\062\uffa9\063\uffa9\066" +
    "\uffa9\067\uffa9\001\002\000\056\005\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\030\uffa8\031\uffa8" +
    "\033\uffa8\061\uffa8\062\uffa8\063\uffa8\066\uffa8\067\uffa8\001" +
    "\002\000\006\003\251\011\253\001\002\000\004\005\303" +
    "\001\002\000\004\046\ufff8\001\002\000\022\012\uffef\036" +
    "\254\037\265\040\262\041\256\042\261\043\266\044\255" +
    "\001\002\000\014\004\uffa1\005\uffa1\006\uffa1\034\uffa1\045" +
    "\uffa1\001\002\000\014\004\uff9b\005\uff9b\006\uff9b\034\uff9b" +
    "\045\uff9b\001\002\000\014\004\uff9e\005\uff9e\006\uff9e\034" +
    "\uff9e\045\uff9e\001\002\000\006\012\uffec\033\300\001\002" +
    "\000\004\006\uffeb\001\002\000\014\004\uff9d\005\uff9d\006" +
    "\uff9d\034\uff9d\045\uff9d\001\002\000\014\004\uff9f\005\uff9f" +
    "\006\uff9f\034\uff9f\045\uff9f\001\002\000\004\012\ufff0\001" +
    "\002\000\004\012\267\001\002\000\014\004\uffa0\005\uffa0" +
    "\006\uffa0\034\uffa0\045\uffa0\001\002\000\014\004\uff9c\005" +
    "\uff9c\006\uff9c\034\uff9c\045\uff9c\001\002\000\004\035\270" +
    "\001\002\000\020\036\254\037\265\040\262\041\256\042" +
    "\261\043\266\044\255\001\002\000\010\004\ufff7\034\ufff7" +
    "\045\ufff7\001\002\000\010\004\011\034\010\045\ufff1\001" +
    "\002\000\004\045\274\001\002\000\034\003\046\006\047" +
    "\007\042\010\050\011\030\046\uff89\054\051\055\027\056" +
    "\033\066\031\067\037\070\024\071\035\001\002\000\004" +
    "\046\ufff6\001\002\000\004\006\277\001\002\000\006\012" +
    "\uffea\033\uffea\001\002\000\022\012\uffef\036\254\037\265" +
    "\040\262\041\256\042\261\043\266\044\255\001\002\000" +
    "\004\012\uffee\001\002\000\004\012\uffed\001\002\000\004" +
    "\046\ufff5\001\002\000\010\045\ufffc\057\021\060\016\001" +
    "\002\000\004\045\ufffe\001\002\000\010\045\ufffc\057\021" +
    "\060\016\001\002\000\004\045\ufffd\001\002\000\006\003" +
    "\311\011\313\001\002\000\004\005\321\001\002\000\004" +
    "\046\ufffb\001\002\000\022\012\uffef\036\254\037\265\040" +
    "\262\041\256\042\261\043\266\044\255\001\002\000\004" +
    "\012\315\001\002\000\010\004\011\034\010\045\ufff1\001" +
    "\002\000\004\045\317\001\002\000\034\003\046\006\047" +
    "\007\042\010\050\011\030\046\uff89\054\051\055\027\056" +
    "\033\066\031\067\037\070\024\071\035\001\002\000\004" +
    "\046\ufffa\001\002\000\004\046\ufff9\001\002\000\010\007" +
    "\042\010\050\032\334\001\002\000\004\021\330\001\002" +
    "\000\004\005\326\001\002\000\010\045\uffe4\057\uffe4\060" +
    "\uffe4\001\002\000\014\003\322\006\323\045\uffe2\057\uffe2" +
    "\060\uffe2\001\002\000\010\045\uffe3\057\uffe3\060\uffe3\001" +
    "\002\000\010\007\042\010\050\032\332\001\002\000\004" +
    "\005\uffe1\001\002\000\004\005\uffe0\001\002\000\004\005" +
    "\uffdf\001\002\000\004\005\uffde\001\002\000\020\036\254" +
    "\037\265\040\262\041\256\042\261\043\266\044\255\001" +
    "\002\000\006\033\uffd7\035\uffd7\001\002\000\006\033\344" +
    "\035\345\001\002\000\012\004\uffdd\045\uffdd\057\uffdd\060" +
    "\uffdd\001\002\000\004\005\342\001\002\000\016\003\335" +
    "\004\uffdb\006\336\045\uffdb\057\uffdb\060\uffdb\001\002\000" +
    "\012\004\uffdc\045\uffdc\057\uffdc\060\uffdc\001\002\000\004" +
    "\006\347\001\002\000\020\036\254\037\265\040\262\041" +
    "\256\042\261\043\266\044\255\001\002\000\004\005\uffda" +
    "\001\002\000\006\033\uffd8\035\uffd8\001\002\000\004\005" +
    "\uffd9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\044\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\013\004\012" +
    "\037\011\001\001\000\010\005\337\006\340\007\336\001" +
    "\001\000\006\010\324\011\323\001\001\000\010\024\016" +
    "\026\017\032\021\001\001\000\004\003\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\025\013\044\030\043\031\040\034\033" +
    "\035\037\036\031\040\035\041\024\042\042\045\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\067\013\044\014\064\015\073\016\173\017" +
    "\167\020\174\021\170\023\233\034\066\045\071\001\001" +
    "\000\022\012\067\013\044\014\064\015\073\016\070\022" +
    "\224\034\066\045\071\001\001\000\010\012\232\013\044" +
    "\034\066\001\001\000\002\001\001\000\030\012\067\013" +
    "\044\014\064\015\073\016\173\017\167\020\174\021\170" +
    "\023\175\034\066\045\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\161\013\044" +
    "\034\066\001\001\000\002\001\001\000\030\012\025\013" +
    "\044\030\043\031\040\034\033\035\037\036\157\040\035" +
    "\041\024\042\042\045\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\025\013\044\030\043\031\040" +
    "\034\033\035\037\036\155\040\035\041\024\042\042\045" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\065\057\067\055\071\061\073\060\075\056\001\001\000" +
    "\002\001\001\000\004\035\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\065\057\067" +
    "\055\071\061\073\060\075\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\063\001\001\000\022\012\067" +
    "\013\044\014\064\015\073\016\070\022\072\034\066\045" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\077\013\044\033\102\034\066\051\100\052" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\077\013\044\033\102\034\066\051\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\120\001\001\000" +
    "\004\062\116\001\001\000\004\064\114\001\001\000\004" +
    "\063\112\001\001\000\014\012\067\013\044\014\113\034" +
    "\066\045\071\001\001\000\002\001\001\000\014\012\067" +
    "\013\044\014\115\034\066\045\071\001\001\000\002\001" +
    "\001\000\014\012\067\013\044\014\117\034\066\045\071" +
    "\001\001\000\002\001\001\000\014\012\067\013\044\014" +
    "\121\034\066\045\071\001\001\000\002\001\001\000\004" +
    "\060\126\001\001\000\004\057\124\001\001\000\016\012" +
    "\067\013\044\014\064\015\125\034\066\045\071\001\001" +
    "\000\002\001\001\000\016\012\067\013\044\014\064\015" +
    "\127\034\066\045\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\133\001\001\000" +
    "\022\012\067\013\044\014\064\015\073\016\070\022\134" +
    "\034\066\045\071\001\001\000\002\001\001\000\004\066" +
    "\136\001\001\000\022\012\067\013\044\014\064\015\073" +
    "\016\070\022\137\034\066\045\071\001\001\000\002\001" +
    "\001\000\004\076\141\001\001\000\022\012\067\013\044" +
    "\014\064\015\073\016\070\022\142\034\066\045\071\001" +
    "\001\000\002\001\001\000\004\070\144\001\001\000\022" +
    "\012\067\013\044\014\064\015\073\016\070\022\145\034" +
    "\066\045\071\001\001\000\002\001\001\000\022\012\067" +
    "\013\044\014\064\015\073\016\070\022\147\034\066\045" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\025\013\044\030\043\031\040\034\033\035\037\036" +
    "\152\040\035\041\024\042\042\045\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\077\013" +
    "\044\033\102\034\066\051\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\067\013\044\014\064\015\073" +
    "\016\225\017\167\020\174\021\170\022\224\023\226\034" +
    "\066\045\071\001\001\000\022\012\067\013\044\014\064" +
    "\015\073\016\173\017\223\034\066\045\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\025\013\044\030\043\031\040\034\033\035\037\036" +
    "\203\040\035\041\024\042\042\045\051\001\001\000\026" +
    "\012\067\013\044\014\064\015\073\016\173\017\167\020" +
    "\200\021\170\034\066\045\071\001\001\000\002\001\001" +
    "\000\024\012\067\013\044\014\064\015\073\016\173\017" +
    "\167\021\202\034\066\045\071\001\001\000\002\001\001" +
    "\000\004\043\204\001\001\000\002\001\001\000\030\012" +
    "\025\013\044\030\043\031\040\034\033\035\037\036\206" +
    "\040\035\041\024\042\042\045\051\001\001\000\002\001" +
    "\001\000\020\012\067\013\044\014\064\015\073\016\222" +
    "\034\066\045\071\001\001\000\020\012\067\013\044\014" +
    "\064\015\073\016\221\034\066\045\071\001\001\000\020" +
    "\012\067\013\044\014\064\015\073\016\220\034\066\045" +
    "\071\001\001\000\020\012\067\013\044\014\064\015\073" +
    "\016\217\034\066\045\071\001\001\000\020\012\067\013" +
    "\044\014\064\015\073\016\216\034\066\045\071\001\001" +
    "\000\020\012\067\013\044\014\064\015\073\016\215\034" +
    "\066\045\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\025\013\044\030\043\031" +
    "\040\034\033\035\037\036\236\040\035\041\024\042\042" +
    "\045\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\242\013\044\034\066\050\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\257\025\263\046\262\047\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\300\001" +
    "\001\000\004\056\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\270" +
    "\001\001\000\004\055\271\001\001\000\010\003\013\004" +
    "\012\037\272\001\001\000\002\001\001\000\030\012\025" +
    "\013\044\030\043\031\040\034\033\035\037\036\274\040" +
    "\035\041\024\042\042\045\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\257\025" +
    "\301\046\262\047\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\016\026\017\032" +
    "\304\001\001\000\002\001\001\000\010\024\016\026\017" +
    "\032\306\001\001\000\002\001\001\000\004\054\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\257" +
    "\025\313\046\262\047\256\001\001\000\002\001\001\000" +
    "\010\003\013\004\012\037\315\001\001\000\002\001\001" +
    "\000\030\012\025\013\044\030\043\031\040\034\033\035" +
    "\037\036\317\040\035\041\024\042\042\045\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\326\011\323\001\001\000\002\001\001\000" +
    "\004\013\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\347\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\342\006\340\007\336\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Coder coder = new Coder();

    public Coder getCoder() {
        return coder;
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_END ::= error END 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN SENTENCIA IF, WHILE O FOR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_END ::= ESTR_IF END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA_END ::= ESTR_WHILE END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_END ::= ESTR_FOR END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_PUNTOYCOMA ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Error sintáctico: ERROR EN SENTENCIA ASIGNACION, LLAMADA A FUNCION O EXPRESION" + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_PUNTOYCOMA ::= LLAMADA_FUNCION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_PUNTOYCOMA ::= INC_DEC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_PUNTOYCOMA ::= ASIGNACION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIAS ::= SENTENCIA_END SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIAS ::= SENTENCIA_PUNTOYCOMA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ASIGNACION ::= IDENTIFICADOR NT$16 OprASIG_DIV NT$17 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$16 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNACION ::= IDENTIFICADOR NT$14 OprASIG_MUL NT$15 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ASIGNACION ::= IDENTIFICADOR NT$12 OprASIG_RESTA NT$13 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$12 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ASIGNACION ::= IDENTIFICADOR NT$10 OprASIG_MAS NT$11 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ASIGNACION ::= IDENTIFICADOR NT$8 OprASIGNACION NT$9 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getCoder().evalBinaria(); parser.getCoder().generarCodigoAsignacion(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO ::= TYPE_REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO ::= TYPE_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO ::= TYPE_STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPO ::= TYPE_CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO ::= TYPE_SHORTINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO ::= TYPE_LONGINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO ::= TYPE_INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETRO ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETRO ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETROS_NO_VACIOS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROS_NO_VACIOS ::= PARAMETRO COMA PARAMETROS_NO_VACIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROS ::= PARAMETROS_NO_VACIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETRO_READ ::= error PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: La funcion solo acepta 1 parámetro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETRO_READ ::= TERMINO PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETRO_READ ::= PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LLAMADA_FUNCION ::= IDENTIFICADOR PARENTESIS_ABRE PARAMETROS PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LLAMADA_FUNCION ::= WRITE PARENTESIS_ABRE PARAMETROS_NO_VACIOS PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LLAMADA_FUNCION ::= READ PARENTESIS_ABRE PARAMETRO_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NUMERO ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.getCoder().recordarDO("Int", (String) i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NUMERO ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; parser.getCoder().recordarDO("Float", (String)f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TERMINO ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TERMINO ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TERMINO ::= PARENTESIS_ABRE EXP PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INC_DEC ::= TERMINO Op_DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INC_DEC ::= TERMINO Op_INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INC_DEC ::= Op_DEC TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INC_DEC ::= Op_INC TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // UNARIO ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UNARIO ::= INC_DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MULTIPLICATIVOS ::= UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_MOD NT$7 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$7 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_DIV NT$6 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$6 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpDIV NT$5 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$5 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpMUL NT$4 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$4 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ADITIVOS ::= MULTIPLICATIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ADITIVOS ::= ADITIVOS OpRESTA NT$3 MULTIPLICATIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$3 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ADITIVOS ::= ADITIVOS OpSUMA NT$2 MULTIPLICATIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$2 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND_REL ::= PARENTESIS_ABRE CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND_REL ::= ADITIVOS OpDIFERENTE ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND_REL ::= ADITIVOS OpMENOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND_REL ::= ADITIVOS OpMENOR ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND_REL ::= ADITIVOS OpMAYOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND_REL ::= ADITIVOS OpMAYOR ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND_REL ::= ADITIVOS OpIGUAL ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND_NOT ::= COND_REL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COND_NOT ::= OpNOT COND_REL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COND_AND ::= COND_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND_AND ::= COND_AND OpAND COND_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= COND_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICION ::= CONDICION OpOR COND_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IDENTIFICADORES ::= IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLE ::= error TIPO 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE VARIABLE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARIABLE ::= IDENTIFICADORES DOS_PUNTOS TIPO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarVariablesEnTSimbolos((String)tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARIABLES ::= VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARIABLES ::= VARIABLE PUNTOYCOMA VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARAR_VARIABLES ::= VAR VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONSTANTE ::= error STRING 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONSTANTE ::= error NUMERO 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONSTANTE ::= IDENTIFICADOR OpIGUAL STRING 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarConstanteEnTSimbolos((String)i, "String", s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONSTANTE ::= IDENTIFICADOR OpIGUAL NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarConstanteEnTSimbolos((String)i, "Numero", n);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONSTANTES ::= CONSTANTE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONSTANTES ::= CONSTANTE PUNTOYCOMA CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARAR_CONSTANTES ::= CONST CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONSTANTES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESTR_WHILE ::= WHILE CONDICION DO BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESTR_FOR ::= FOR ASIGNACION TO EXP DO BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_FOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ESTR_ELSE ::= ELSE SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESTR_IF ::= IF CONDICION THEN SENTENCIAS ESTR_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_IF",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ESTR_IF ::= IF CONDICION THEN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_IF",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGUMENTO ::= TIPO NT$1 IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarTipo((String)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGUMENTOS_P ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARGUMENTOS_P ::= COMA ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARGUMENTOS_NO_VACIO ::= ARGUMENTO ARGUMENTOS_P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_NO_VACIO",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGUMENTOS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGUMENTOS ::= ARGUMENTOS_NO_VACIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_DECLARACIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_DECLARACIONES ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION_BLOQUE ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN FUNCION" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_BLOQUE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO NT$0 BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_BLOQUE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarTipo((String)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= FUNCTION IDENTIFICADOR FUNCION_BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getCoder().guardarFuncionEnTsimbolo((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTO_BLOQUE ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN PROCEDIMIENTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_BLOQUE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDIMIENTO_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_BLOQUE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDIMIENTO ::= PROCEDURE IDENTIFICADOR PROCEDIMIENTO_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= FUNCION END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= PROCEDIMIENTO END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTRUCTURA_PROGRAMA ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN PROGRAMA, FALTA UN BEGIN O END"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROGRAMA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ESTRUCTURA_PROGRAMA ::= PROGRAM IDENTIFICADOR BLOQUE_DECLARACIONES BLOQUE_FUNCIONES_PROCEDIMIENTOS BEGIN SENTENCIAS END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROGRAMA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ESTRUCTURA_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

