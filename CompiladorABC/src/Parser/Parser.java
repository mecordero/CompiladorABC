
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 26 16:11:09 CST 2018
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import Clases.Coder;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 26 16:11:09 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\055\002\000\002\056" +
    "\002\000\002\044\013\000\002\044\003\000\002\032\005" +
    "\000\002\057\002\000\002\032\006\000\002\032\002\000" +
    "\002\026\005\000\002\054\010\000\002\054\004\000\002" +
    "\060\002\000\002\024\006\000\002\061\002\000\002\053" +
    "\013\000\002\053\004\000\002\037\004\000\002\037\003" +
    "\000\002\037\003\000\002\037\002\000\002\025\003\000" +
    "\002\025\002\000\002\046\004\000\002\027\004\000\002" +
    "\027\002\000\002\062\002\000\002\047\005\000\002\063" +
    "\002\000\002\064\002\000\002\065\002\000\002\042\012" +
    "\000\002\043\004\000\002\043\002\000\002\040\011\000" +
    "\002\066\002\000\002\067\002\000\002\041\011\000\002" +
    "\003\004\000\002\010\005\000\002\010\004\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\004" +
    "\000\002\004\004\000\002\005\005\000\002\005\004\000" +
    "\002\006\005\000\002\006\004\000\002\007\005\000\002" +
    "\007\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\005\000\002\023\003\000\002\020\005\000\002\020\003" +
    "\000\002\021\004\000\002\021\003\000\002\070\002\000" +
    "\002\017\006\000\002\071\002\000\002\017\006\000\002" +
    "\072\002\000\002\017\006\000\002\073\002\000\002\017" +
    "\006\000\002\074\002\000\002\017\006\000\002\075\002" +
    "\000\002\017\006\000\002\017\005\000\002\076\002\000" +
    "\002\016\006\000\002\077\002\000\002\016\006\000\002" +
    "\016\003\000\002\100\002\000\002\015\006\000\002\101" +
    "\002\000\002\015\006\000\002\102\002\000\002\015\006" +
    "\000\002\103\002\000\002\015\006\000\002\015\003\000" +
    "\002\014\003\000\002\014\003\000\002\104\002\000\002" +
    "\045\005\000\002\105\002\000\002\045\005\000\002\045" +
    "\004\000\002\045\004\000\002\012\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\034\005\000\002\034\006\000\002" +
    "\034\006\000\002\050\003\000\002\050\004\000\002\050" +
    "\004\000\002\052\003\000\002\052\002\000\002\051\005" +
    "\000\002\051\003\000\002\033\003\000\002\033\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\106\002\000\002\107\002\000\002\035\007" +
    "\000\002\110\002\000\002\111\002\000\002\035\007\000" +
    "\002\112\002\000\002\113\002\000\002\035\007\000\002" +
    "\114\002\000\002\115\002\000\002\035\007\000\002\116" +
    "\002\000\002\117\002\000\002\035\007\000\002\036\004" +
    "\000\002\036\004\000\002\036\002\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\006\003\004\065\006\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\372\001\002\000\004\006\007" +
    "\001\002\000\014\004\000\034\000\045\000\057\000\060" +
    "\000\001\002\000\014\004\012\034\011\045\uffed\057\uffed" +
    "\060\uffed\001\002\000\006\003\356\006\357\001\002\000" +
    "\006\003\343\006\344\001\002\000\010\045\ufff9\057\023" +
    "\060\017\001\002\000\012\004\012\045\uffef\057\uffef\060" +
    "\uffef\001\002\000\010\045\uffee\057\uffee\060\uffee\001\002" +
    "\000\010\045\ufff0\057\ufff0\060\ufff0\001\002\000\004\006" +
    "\331\001\002\000\004\046\ufffb\001\002\000\004\046\324" +
    "\001\002\000\004\045\320\001\002\000\004\006\ufff5\001" +
    "\002\000\004\006\025\001\002\000\006\003\027\011\030" +
    "\001\002\000\004\046\ufff4\001\002\000\004\005\317\001" +
    "\002\000\022\012\uffeb\036\031\037\042\040\037\041\034" +
    "\042\036\043\043\044\032\001\002\000\014\004\uff90\005" +
    "\uff90\006\uff90\034\uff90\045\uff90\001\002\000\014\004\uff8a" +
    "\005\uff8a\006\uff8a\034\uff8a\045\uff8a\001\002\000\006\012" +
    "\uffe8\033\314\001\002\000\014\004\uff8d\005\uff8d\006\uff8d" +
    "\034\uff8d\045\uff8d\001\002\000\004\006\uffe7\001\002\000" +
    "\014\004\uff8c\005\uff8c\006\uff8c\034\uff8c\045\uff8c\001\002" +
    "\000\014\004\uff8e\005\uff8e\006\uff8e\034\uff8e\045\uff8e\001" +
    "\002\000\004\012\uffec\001\002\000\004\012\044\001\002" +
    "\000\014\004\uff8f\005\uff8f\006\uff8f\034\uff8f\045\uff8f\001" +
    "\002\000\014\004\uff8b\005\uff8b\006\uff8b\034\uff8b\045\uff8b" +
    "\001\002\000\004\035\045\001\002\000\020\036\031\037" +
    "\042\040\037\041\034\042\036\043\043\044\032\001\002" +
    "\000\010\004\ufff3\034\ufff3\045\ufff3\001\002\000\010\004" +
    "\012\034\011\045\uffed\001\002\000\004\045\051\001\002" +
    "\000\034\003\074\006\075\007\070\010\076\011\056\046" +
    "\uff78\054\100\055\054\056\061\066\060\067\065\070\052" +
    "\071\063\001\002\000\004\011\303\001\002\000\004\046" +
    "\302\001\002\000\024\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\027\uffde\066\uffde\067\uffde\070\uffde\071\uffde\001\002\000" +
    "\006\066\156\067\157\001\002\000\024\006\122\007\070" +
    "\010\076\011\056\032\113\066\060\067\065\070\052\071" +
    "\063\001\002\000\004\046\ufff2\001\002\000\016\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\070\uffa8\071\uffa8\001\002\000" +
    "\024\006\uffe5\007\uffe5\010\uffe5\011\uffe5\027\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\001\002\000\010\005\216\066" +
    "\uff9f\067\uff9f\001\002\000\004\011\213\001\002\000\004" +
    "\046\212\001\002\000\016\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\070\uffa6\071\uffa6\001\002\000\036\003\074\006\075" +
    "\007\070\010\076\011\056\046\uff78\054\100\055\054\056" +
    "\061\064\uff78\066\060\067\065\070\052\071\063\001\002" +
    "\000\004\005\206\001\002\000\056\005\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\030\uff9e\031" +
    "\uff9e\033\uff9e\061\uff9e\062\uff9e\063\uff9e\066\uff9e\067\uff9e" +
    "\001\002\000\004\046\205\001\002\000\036\003\074\006" +
    "\075\007\070\010\076\011\056\046\uff78\054\100\055\054" +
    "\056\061\064\uff78\066\060\067\065\070\052\071\063\001" +
    "\002\000\056\005\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024" +
    "\uffa1\025\uffa1\026\uffa1\030\uffa1\031\uffa1\033\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\066\uffa1\067\uffa1\001\002\000\006\005" +
    "\202\046\203\001\002\000\022\011\123\047\uff89\050\uff86" +
    "\051\uff83\052\uff80\053\uff7d\066\uffa0\067\uffa0\001\002\000" +
    "\056\005\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\030\uff9d\031\uff9d\033\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\066\uff9d\067\uff9d\001\002\000\004\005\201\001" +
    "\002\000\004\006\102\001\002\000\004\061\174\001\002" +
    "\000\014\047\uff89\050\uff86\051\uff83\052\uff80\053\uff7d\001" +
    "\002\000\004\053\171\001\002\000\004\052\166\001\002" +
    "\000\004\051\163\001\002\000\004\050\160\001\002\000" +
    "\004\047\110\001\002\000\024\006\uff88\007\uff88\010\uff88" +
    "\011\uff88\032\uff88\066\uff88\067\uff88\070\uff88\071\uff88\001" +
    "\002\000\024\006\122\007\070\010\076\011\056\032\113" +
    "\066\060\067\065\070\052\071\063\001\002\000\050\005" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\030\uffab\031\uffab\061\uffab\062\uffab\063\uffab\001\002" +
    "\000\012\005\uffcc\012\uffcc\061\uffcc\062\uffcc\001\002\000" +
    "\056\005\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025" +
    "\uff9f\026\uff9f\030\uff9f\031\uff9f\033\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\066\uff9f\067\uff9f\001\002\000\054\005\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\030" +
    "\uffa9\031\uffa9\061\uffa9\062\uffa9\063\uffa9\066\156\067\157" +
    "\001\002\000\016\005\uffcd\012\uffcd\017\151\020\150\061" +
    "\uffcd\062\uffcd\001\002\000\050\005\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\030\uffaa\031\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\001\002\000\050\005\uffb4\012" +
    "\uffb4\013\134\014\135\015\137\016\136\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030" +
    "\uffb4\031\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002\000\006" +
    "\005\uff87\061\uff87\001\002\000\060\005\uffa0\011\123\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\030" +
    "\uffa0\031\uffa0\033\uffa0\061\uffa0\062\uffa0\063\uffa0\066\uffa0" +
    "\067\uffa0\001\002\000\022\006\122\007\070\010\076\011" +
    "\056\012\uff95\032\124\070\052\071\063\001\002\000\006" +
    "\012\uff91\033\uff91\001\002\000\006\012\uff92\033\uff92\001" +
    "\002\000\004\012\uff96\001\002\000\004\012\133\001\002" +
    "\000\006\012\uff93\033\131\001\002\000\020\006\122\007" +
    "\070\010\076\011\056\032\124\070\052\071\063\001\002" +
    "\000\004\012\uff94\001\002\000\056\005\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\030\uff9a\031" +
    "\uff9a\033\uff9a\061\uff9a\062\uff9a\063\uff9a\066\uff9a\067\uff9a" +
    "\001\002\000\022\006\uffb3\007\uffb3\010\uffb3\011\uffb3\066" +
    "\uffb3\067\uffb3\070\uffb3\071\uffb3\001\002\000\022\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\066\uffb1\067\uffb1\070\uffb1\071" +
    "\uffb1\001\002\000\022\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\001\002\000\022\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\001\002\000\022\006\122\007\070\010\076\011" +
    "\056\066\060\067\065\070\052\071\063\001\002\000\050" +
    "\005\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\030\uffae\031\uffae\061\uffae\062\uffae\063\uffae\001" +
    "\002\000\022\006\122\007\070\010\076\011\056\066\060" +
    "\067\065\070\052\071\063\001\002\000\050\005\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\030" +
    "\uffac\031\uffac\061\uffac\062\uffac\063\uffac\001\002\000\022" +
    "\006\122\007\070\010\076\011\056\066\060\067\065\070" +
    "\052\071\063\001\002\000\050\005\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\001\002\000\022\006\122\007" +
    "\070\010\076\011\056\066\060\067\065\070\052\071\063" +
    "\001\002\000\050\005\uffb2\012\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\001\002\000\022\006\uffb6\007\uffb6\010\uffb6" +
    "\011\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\001\002\000" +
    "\022\006\uffb8\007\uffb8\010\uffb8\011\uffb8\066\uffb8\067\uffb8" +
    "\070\uffb8\071\uffb8\001\002\000\022\006\122\007\070\010" +
    "\076\011\056\066\060\067\065\070\052\071\063\001\002" +
    "\000\050\005\uffb7\012\uffb7\013\134\014\135\015\137\016" +
    "\136\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\030\uffb7\031\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\001\002\000\022\006\122\007\070\010\076\011\056" +
    "\066\060\067\065\070\052\071\063\001\002\000\050\005" +
    "\uffb5\012\uffb5\013\134\014\135\015\137\016\136\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\030\uffb5\031\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002" +
    "\000\050\005\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\030\uffa4\031\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\001\002\000\050\005\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3\061\uffa3" +
    "\062\uffa3\063\uffa3\001\002\000\024\006\uff85\007\uff85\010" +
    "\uff85\011\uff85\032\uff85\066\uff85\067\uff85\070\uff85\071\uff85" +
    "\001\002\000\024\006\122\007\070\010\076\011\056\032" +
    "\113\066\060\067\065\070\052\071\063\001\002\000\006" +
    "\005\uff84\061\uff84\001\002\000\024\006\uff82\007\uff82\010" +
    "\uff82\011\uff82\032\uff82\066\uff82\067\uff82\070\uff82\071\uff82" +
    "\001\002\000\024\006\122\007\070\010\076\011\056\032" +
    "\113\066\060\067\065\070\052\071\063\001\002\000\006" +
    "\005\uff81\061\uff81\001\002\000\024\006\uff7f\007\uff7f\010" +
    "\uff7f\011\uff7f\032\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f" +
    "\001\002\000\024\006\122\007\070\010\076\011\056\032" +
    "\113\066\060\067\065\070\052\071\063\001\002\000\006" +
    "\005\uff7e\061\uff7e\001\002\000\024\006\uff7c\007\uff7c\010" +
    "\uff7c\011\uff7c\032\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c" +
    "\001\002\000\024\006\122\007\070\010\076\011\056\032" +
    "\113\066\060\067\065\070\052\071\063\001\002\000\006" +
    "\005\uff7b\061\uff7b\001\002\000\024\006\122\007\070\010" +
    "\076\011\056\032\113\066\060\067\065\070\052\071\063" +
    "\001\002\000\004\062\176\001\002\000\004\045\177\001" +
    "\002\000\034\003\074\006\075\007\070\010\076\011\056" +
    "\046\uff78\054\100\055\054\056\061\066\060\067\065\070" +
    "\052\071\063\001\002\000\004\046\uffdf\001\002\000\036" +
    "\003\uff76\006\uff76\007\uff76\010\uff76\011\uff76\046\uff76\054" +
    "\uff76\055\uff76\056\uff76\064\uff76\066\uff76\067\uff76\070\uff76" +
    "\071\uff76\001\002\000\036\003\uff74\006\uff74\007\uff74\010" +
    "\uff74\011\uff74\046\uff74\054\uff74\055\uff74\056\uff74\064\uff74" +
    "\066\uff74\067\uff74\070\uff74\071\uff74\001\002\000\036\003" +
    "\uff70\006\uff70\007\uff70\010\uff70\011\uff70\046\uff70\054\uff70" +
    "\055\uff70\056\uff70\064\uff70\066\uff70\067\uff70\070\uff70\071" +
    "\uff70\001\002\000\006\046\uff7a\064\uff7a\001\002\000\036" +
    "\003\uff71\006\uff71\007\uff71\010\uff71\011\uff71\046\uff71\054" +
    "\uff71\055\uff71\056\uff71\064\uff71\066\uff71\067\uff71\070\uff71" +
    "\071\uff71\001\002\000\036\003\uff77\006\uff77\007\uff77\010" +
    "\uff77\011\uff77\046\uff77\054\uff77\055\uff77\056\uff77\064\uff77" +
    "\066\uff77\067\uff77\070\uff77\071\uff77\001\002\000\006\046" +
    "\uff79\064\uff79\001\002\000\016\006\122\007\070\010\076" +
    "\011\056\070\052\071\063\001\002\000\050\005\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\030" +
    "\uffa5\031\uffa5\061\uffa5\062\uffa5\063\uffa5\001\002\000\036" +
    "\003\uff73\006\uff73\007\uff73\010\uff73\011\uff73\046\uff73\054" +
    "\uff73\055\uff73\056\uff73\064\uff73\066\uff73\067\uff73\070\uff73" +
    "\071\uff73\001\002\000\020\006\122\007\070\010\076\011" +
    "\056\032\124\070\052\071\063\001\002\000\004\012\215" +
    "\001\002\000\056\005\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b\033\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\066\uff9b\067\uff9b\001\002\000\036" +
    "\003\uff75\006\uff75\007\uff75\010\uff75\011\uff75\046\uff75\054" +
    "\uff75\055\uff75\056\uff75\064\uff75\066\uff75\067\uff75\070\uff75" +
    "\071\uff75\001\002\000\024\006\122\007\070\010\076\011" +
    "\222\027\223\066\060\067\065\070\052\071\063\001\002" +
    "\000\014\012\uffc6\030\uffc6\031\uffc6\062\uffc6\063\uffc6\001" +
    "\002\000\014\012\uffc8\030\uffc8\031\uffc8\062\uffc8\063\uffc8" +
    "\001\002\000\026\006\122\007\070\010\076\011\222\027" +
    "\223\032\113\066\060\067\065\070\052\071\063\001\002" +
    "\000\022\006\122\007\070\010\076\011\222\066\060\067" +
    "\065\070\052\071\063\001\002\000\022\017\151\020\150" +
    "\021\246\022\245\023\244\024\243\025\242\026\247\001" +
    "\002\000\014\012\uffca\030\232\031\uffca\062\uffca\063\uffca" +
    "\001\002\000\006\031\230\063\227\001\002\000\036\003" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\046\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\001\002\000\024\006\122\007\070\010\076\011\222" +
    "\027\223\066\060\067\065\070\052\071\063\001\002\000" +
    "\014\012\uffcb\030\232\031\uffcb\062\uffcb\063\uffcb\001\002" +
    "\000\024\006\122\007\070\010\076\011\222\027\223\066" +
    "\060\067\065\070\052\071\063\001\002\000\014\012\uffc9" +
    "\030\uffc9\031\uffc9\062\uffc9\063\uffc9\001\002\000\036\003" +
    "\074\006\075\007\070\010\076\011\056\046\uff78\054\100" +
    "\055\054\056\061\064\uff78\066\060\067\065\070\052\071" +
    "\063\001\002\000\006\046\uffe3\064\uffe3\001\002\000\006" +
    "\046\uffe0\064\237\001\002\000\034\003\074\006\075\007" +
    "\070\010\076\011\056\046\uff78\054\100\055\054\056\061" +
    "\066\060\067\065\070\052\071\063\001\002\000\004\046" +
    "\uffe2\001\002\000\004\046\uffe1\001\002\000\022\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\066\uffbd\067\uffbd\070\uffbd\071" +
    "\uffbd\001\002\000\022\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\066\uffbf\067\uffbf\070\uffbf\071\uffbf\001\002\000\022\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\066\uffc1\067\uffc1\070\uffc1" +
    "\071\uffc1\001\002\000\022\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\001\002\000\022" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\001\002\000\022\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\001\002\000" +
    "\022\006\122\007\070\010\076\011\056\066\060\067\065" +
    "\070\052\071\063\001\002\000\020\012\uffba\017\151\020" +
    "\150\030\uffba\031\uffba\062\uffba\063\uffba\001\002\000\022" +
    "\006\122\007\070\010\076\011\056\066\060\067\065\070" +
    "\052\071\063\001\002\000\020\012\uffc4\017\151\020\150" +
    "\030\uffc4\031\uffc4\062\uffc4\063\uffc4\001\002\000\022\006" +
    "\122\007\070\010\076\011\056\066\060\067\065\070\052" +
    "\071\063\001\002\000\020\012\uffc2\017\151\020\150\030" +
    "\uffc2\031\uffc2\062\uffc2\063\uffc2\001\002\000\022\006\122" +
    "\007\070\010\076\011\056\066\060\067\065\070\052\071" +
    "\063\001\002\000\020\012\uffc0\017\151\020\150\030\uffc0" +
    "\031\uffc0\062\uffc0\063\uffc0\001\002\000\022\006\122\007" +
    "\070\010\076\011\056\066\060\067\065\070\052\071\063" +
    "\001\002\000\020\012\uffbe\017\151\020\150\030\uffbe\031" +
    "\uffbe\062\uffbe\063\uffbe\001\002\000\022\006\122\007\070" +
    "\010\076\011\056\066\060\067\065\070\052\071\063\001" +
    "\002\000\020\012\uffbc\017\151\020\150\030\uffbc\031\uffbc" +
    "\062\uffbc\063\uffbc\001\002\000\014\012\uffc7\030\uffc7\031" +
    "\uffc7\062\uffc7\063\uffc7\001\002\000\004\012\271\001\002" +
    "\000\024\012\uffcd\017\151\020\150\021\246\022\245\023" +
    "\244\024\243\025\242\026\247\001\002\000\006\012\270" +
    "\031\230\001\002\000\014\012\uffb9\030\uffb9\031\uffb9\062" +
    "\uffb9\063\uffb9\001\002\000\056\005\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffa2\031\uffa2" +
    "\033\uffa2\061\uffa2\062\uffa2\063\uffa2\066\uffa2\067\uffa2\001" +
    "\002\000\016\006\122\007\070\010\076\011\056\070\052" +
    "\071\063\001\002\000\050\005\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\030\uffa7\031\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\001\002\000\024\006\122\007\070" +
    "\010\076\011\222\027\223\066\060\067\065\070\052\071" +
    "\063\001\002\000\006\031\230\062\276\001\002\000\004" +
    "\045\uffdd\001\002\000\004\045\300\001\002\000\034\003" +
    "\074\006\075\007\070\010\076\011\056\046\uff78\054\100" +
    "\055\054\056\061\066\060\067\065\070\052\071\063\001" +
    "\002\000\004\046\uffdc\001\002\000\036\003\uff72\006\uff72" +
    "\007\uff72\010\uff72\011\uff72\046\uff72\054\uff72\055\uff72\056" +
    "\uff72\064\uff72\066\uff72\067\uff72\070\uff72\071\uff72\001\002" +
    "\000\022\003\304\006\122\007\070\010\076\011\056\012" +
    "\307\070\052\071\063\001\002\000\004\012\311\001\002" +
    "\000\004\012\310\001\002\000\056\005\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030\uff9c\031" +
    "\uff9c\033\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c\067\uff9c" +
    "\001\002\000\056\005\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\030\uff99\031\uff99\033\uff99\061" +
    "\uff99\062\uff99\063\uff99\066\uff99\067\uff99\001\002\000\056" +
    "\005\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\030\uff98\031\uff98\033\uff98\061\uff98\062\uff98\063" +
    "\uff98\066\uff98\067\uff98\001\002\000\056\005\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\030\uff97" +
    "\031\uff97\033\uff97\061\uff97\062\uff97\063\uff97\066\uff97\067" +
    "\uff97\001\002\000\004\006\313\001\002\000\006\012\uffe6" +
    "\033\uffe6\001\002\000\022\012\uffeb\036\031\037\042\040" +
    "\037\041\034\042\036\043\043\044\032\001\002\000\004" +
    "\012\uffea\001\002\000\004\012\uffe9\001\002\000\004\046" +
    "\ufff1\001\002\000\034\003\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\046\uffff\054\uffff\055\uffff\056\uffff\066\uffff\067" +
    "\uffff\070\uffff\071\uffff\001\002\000\034\003\074\006\075" +
    "\007\070\010\076\011\056\046\uff78\054\100\055\054\056" +
    "\061\066\060\067\065\070\052\071\063\001\002\000\004" +
    "\046\323\001\002\000\004\002\ufffe\001\002\000\010\045" +
    "\ufff9\057\023\060\017\001\002\000\004\045\ufffc\001\002" +
    "\000\004\046\327\001\002\000\010\045\ufff9\057\023\060" +
    "\017\001\002\000\004\045\ufffa\001\002\000\006\003\332" +
    "\011\334\001\002\000\004\005\342\001\002\000\004\046" +
    "\ufff8\001\002\000\022\012\uffeb\036\031\037\042\040\037" +
    "\041\034\042\036\043\043\044\032\001\002\000\004\012" +
    "\336\001\002\000\010\004\012\034\011\045\uffed\001\002" +
    "\000\004\045\340\001\002\000\034\003\074\006\075\007" +
    "\070\010\076\011\056\046\uff78\054\100\055\054\056\061" +
    "\066\060\067\065\070\052\071\063\001\002\000\004\046" +
    "\ufff7\001\002\000\004\046\ufff6\001\002\000\010\007\070" +
    "\010\076\032\355\001\002\000\004\021\351\001\002\000" +
    "\004\005\347\001\002\000\010\045\uffdb\057\uffdb\060\uffdb" +
    "\001\002\000\014\003\343\006\344\045\uffd9\057\uffd9\060" +
    "\uffd9\001\002\000\010\045\uffda\057\uffda\060\uffda\001\002" +
    "\000\010\007\070\010\076\032\353\001\002\000\004\005" +
    "\uffd8\001\002\000\004\005\uffd7\001\002\000\004\005\uffd6" +
    "\001\002\000\004\005\uffd5\001\002\000\020\036\031\037" +
    "\042\040\037\041\034\042\036\043\043\044\032\001\002" +
    "\000\006\033\uffce\035\uffce\001\002\000\006\033\365\035" +
    "\366\001\002\000\012\004\uffd4\045\uffd4\057\uffd4\060\uffd4" +
    "\001\002\000\004\005\363\001\002\000\016\003\356\004" +
    "\uffd2\006\357\045\uffd2\057\uffd2\060\uffd2\001\002\000\012" +
    "\004\uffd3\045\uffd3\057\uffd3\060\uffd3\001\002\000\004\006" +
    "\370\001\002\000\020\036\031\037\042\040\037\041\034" +
    "\042\036\043\043\044\032\001\002\000\004\005\uffd1\001" +
    "\002\000\006\033\uffcf\035\uffcf\001\002\000\004\005\uffd0" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\044\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\007\001\001" +
    "\000\010\003\014\004\013\037\012\001\001\000\010\005" +
    "\360\006\361\007\357\001\001\000\006\010\345\011\344" +
    "\001\001\000\010\024\017\026\020\032\021\001\001\000" +
    "\004\003\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\023\001\001\000\002" +
    "\001\001\000\004\053\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\034\025\040\046\037\047\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\314\001\001\000\002\001\001\000\004\062\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\045\001\001\000\004\061\046\001" +
    "\001\000\010\003\014\004\013\037\047\001\001\000\002" +
    "\001\001\000\030\012\054\013\072\030\071\031\065\034" +
    "\061\035\066\036\056\040\063\041\052\042\070\045\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\273\001\001\000\002\001\001\000\022\012\114\013\072" +
    "\014\111\015\117\016\115\022\264\034\113\045\116\001" +
    "\001\000\002\001\001\000\004\104\271\001\001\000\004" +
    "\063\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\207\001\001\000\030\012\054" +
    "\013\072\030\071\031\065\034\061\035\066\036\206\040" +
    "\063\041\052\042\070\045\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\054\013" +
    "\072\030\071\031\065\034\061\035\066\036\203\040\063" +
    "\041\052\042\070\045\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\106\106\110\105\112\104\114\103" +
    "\116\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\100\001\001\000\002\001\001\000\014\106\106" +
    "\110\105\112\104\114\103\116\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\107\110\001\001\000\022\012" +
    "\114\013\072\014\111\015\117\016\115\022\120\034\113" +
    "\045\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\124\013\072\033\127\034\113\051\125" +
    "\052\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\124\013\072\033\127\034\113\051\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\145\001\001" +
    "\000\004\101\143\001\001\000\004\103\141\001\001\000" +
    "\004\102\137\001\001\000\014\012\114\013\072\014\140" +
    "\034\113\045\116\001\001\000\002\001\001\000\014\012" +
    "\114\013\072\014\142\034\113\045\116\001\001\000\002" +
    "\001\001\000\014\012\114\013\072\014\144\034\113\045" +
    "\116\001\001\000\002\001\001\000\014\012\114\013\072" +
    "\014\146\034\113\045\116\001\001\000\002\001\001\000" +
    "\004\077\153\001\001\000\004\076\151\001\001\000\016" +
    "\012\114\013\072\014\111\015\152\034\113\045\116\001" +
    "\001\000\002\001\001\000\016\012\114\013\072\014\111" +
    "\015\154\034\113\045\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\111\160\001\001" +
    "\000\022\012\114\013\072\014\111\015\117\016\115\022" +
    "\161\034\113\045\116\001\001\000\002\001\001\000\004" +
    "\113\163\001\001\000\022\012\114\013\072\014\111\015" +
    "\117\016\115\022\164\034\113\045\116\001\001\000\002" +
    "\001\001\000\004\115\166\001\001\000\022\012\114\013" +
    "\072\014\111\015\117\016\115\022\167\034\113\045\116" +
    "\001\001\000\002\001\001\000\004\117\171\001\001\000" +
    "\022\012\114\013\072\014\111\015\117\016\115\022\172" +
    "\034\113\045\116\001\001\000\002\001\001\000\022\012" +
    "\114\013\072\014\111\015\117\016\115\022\174\034\113" +
    "\045\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\054\013\072\030\071\031\065\034\061\035\066" +
    "\036\177\040\063\041\052\042\070\045\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\210\013\072\034\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\124\013\072\033\127\034\113\051\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\114\013\072\014\111\015\117\016\223\017\217\020\224" +
    "\021\220\023\225\034\113\045\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\012\114\013\072\014\111" +
    "\015\117\016\265\017\217\020\224\021\220\022\264\023" +
    "\266\034\113\045\116\001\001\000\022\012\114\013\072" +
    "\014\111\015\117\016\223\017\263\034\113\045\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\233\001\001\000\026\012\114\013\072\014" +
    "\111\015\117\016\223\017\217\020\230\021\220\034\113" +
    "\045\116\001\001\000\002\001\001\000\024\012\114\013" +
    "\072\014\111\015\117\016\223\017\217\021\232\034\113" +
    "\045\116\001\001\000\002\001\001\000\030\012\054\013" +
    "\072\030\071\031\065\034\061\035\066\036\234\040\063" +
    "\041\052\042\070\045\076\001\001\000\004\065\235\001" +
    "\001\000\004\043\237\001\001\000\030\012\054\013\072" +
    "\030\071\031\065\034\061\035\066\036\240\040\063\041" +
    "\052\042\070\045\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\261\001\001\000\004\073\257\001" +
    "\001\000\004\072\255\001\001\000\004\071\253\001\001" +
    "\000\004\070\251\001\001\000\004\075\247\001\001\000" +
    "\020\012\114\013\072\014\111\015\117\016\250\034\113" +
    "\045\116\001\001\000\002\001\001\000\020\012\114\013" +
    "\072\014\111\015\117\016\252\034\113\045\116\001\001" +
    "\000\002\001\001\000\020\012\114\013\072\014\111\015" +
    "\117\016\254\034\113\045\116\001\001\000\002\001\001" +
    "\000\020\012\114\013\072\014\111\015\117\016\256\034" +
    "\113\045\116\001\001\000\002\001\001\000\020\012\114" +
    "\013\072\014\111\015\117\016\260\034\113\045\116\001" +
    "\001\000\002\001\001\000\020\012\114\013\072\014\111" +
    "\015\117\016\262\034\113\045\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\272\013\072\034\113\001\001\000\002\001\001" +
    "\000\030\012\114\013\072\014\111\015\117\016\223\017" +
    "\217\020\224\021\220\023\274\034\113\045\116\001\001" +
    "\000\002\001\001\000\004\067\276\001\001\000\002\001" +
    "\001\000\030\012\054\013\072\030\071\031\065\034\061" +
    "\035\066\036\300\040\063\041\052\042\070\045\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\304" +
    "\013\072\034\113\050\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\034\025\315\046\037\047\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\320\001\001\000\030\012\054\013\072\030\071" +
    "\031\065\034\061\035\066\036\321\040\063\041\052\042" +
    "\070\045\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\017\026\020\032\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\017\026\020\032\327" +
    "\001\001\000\002\001\001\000\004\054\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\034\025\334" +
    "\046\037\047\032\001\001\000\002\001\001\000\010\003" +
    "\014\004\013\037\336\001\001\000\002\001\001\000\030" +
    "\012\054\013\072\030\071\031\065\034\061\035\066\036" +
    "\340\040\063\041\052\042\070\045\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\347\011\344\001\001\000\002\001\001\000\004\013" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\363\006\361\007\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Coder coder = new Coder();

    public Coder getCoder() {
        return coder;
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_END ::= error END 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN SENTENCIA IF, WHILE O FOR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA_END ::= ESTR_IF END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_END ::= ESTR_WHILE END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_END ::= ESTR_FOR END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_PUNTOYCOMA ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Error sintáctico: ERROR EN SENTENCIA ASIGNACION, LLAMADA A FUNCION O EXPRESION" + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_PUNTOYCOMA ::= LLAMADA_FUNCION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_PUNTOYCOMA ::= INC_DEC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_PUNTOYCOMA ::= ASIGNACION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIAS ::= SENTENCIA_END SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIAS ::= SENTENCIA_PUNTOYCOMA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNACION ::= IDENTIFICADOR NT$33 OprASIG_DIV NT$34 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$34 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$34",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$33 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$33",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNACION ::= IDENTIFICADOR NT$31 OprASIG_MUL NT$32 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$31 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ASIGNACION ::= IDENTIFICADOR NT$29 OprASIG_RESTA NT$30 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$29 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ASIGNACION ::= IDENTIFICADOR NT$27 OprASIG_MAS NT$28 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$27 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNACION ::= IDENTIFICADOR NT$25 OprASIGNACION NT$26 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().evalBinaria(); parser.getCoder().generarCodigoAsignacion( (String)t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$25 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPO ::= TYPE_REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO ::= TYPE_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPO ::= TYPE_STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPO ::= TYPE_CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPO ::= TYPE_SHORTINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TIPO ::= TYPE_LONGINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIPO ::= TYPE_INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMETRO ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMETRO ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMETROS_NO_VACIOS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETROS_NO_VACIOS ::= PARAMETRO COMA PARAMETROS_NO_VACIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMETROS ::= PARAMETROS_NO_VACIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMETRO_READ ::= error PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: La funcion solo acepta 1 parámetro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMETRO_READ ::= TERMINO PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMETRO_READ ::= PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LLAMADA_FUNCION ::= IDENTIFICADOR PARENTESIS_ABRE PARAMETROS PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LLAMADA_FUNCION ::= WRITE PARENTESIS_ABRE PARAMETROS_NO_VACIOS PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADA_FUNCION ::= READ PARENTESIS_ABRE PARAMETRO_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NUMERO ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.getCoder().recordarDO("Int", (String) i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NUMERO ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; parser.getCoder().recordarDO("Float", (String)f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TERMINO ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TERMINO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.getCoder().recordarDO((String)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TERMINO ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TERMINO ::= PARENTESIS_ABRE EXP PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INC_DEC ::= TERMINO Op_DEC 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarOperacion((String)o); parser.getCoder().postIncDec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INC_DEC ::= TERMINO Op_INC 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarOperacion((String)o); parser.getCoder().postIncDec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INC_DEC ::= Op_DEC NT$24 TERMINO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getCoder().preIncDec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$24 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INC_DEC ::= Op_INC NT$23 TERMINO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getCoder().preIncDec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$23 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // UNARIO ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // UNARIO ::= INC_DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MULTIPLICATIVOS ::= UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_MOD NT$22 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$22 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_DIV NT$21 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$21 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpDIV NT$20 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$20 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpMUL NT$19 UNARIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$19 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ADITIVOS ::= MULTIPLICATIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ADITIVOS ::= ADITIVOS OpRESTA NT$18 MULTIPLICATIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$18 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ADITIVOS ::= ADITIVOS OpSUMA NT$17 MULTIPLICATIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$17 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND_REL ::= PARENTESIS_ABRE CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND_REL ::= ADITIVOS OpDIFERENTE NT$16 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$16 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND_REL ::= ADITIVOS OpMENOR_IGUAL NT$15 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$15 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND_REL ::= ADITIVOS OpMENOR NT$14 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$14 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND_REL ::= ADITIVOS OpMAYOR_IGUAL NT$13 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$13 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND_REL ::= ADITIVOS OpMAYOR NT$12 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$12 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND_REL ::= ADITIVOS OpIGUAL NT$11 ADITIVOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$11 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  parser.getCoder().recordarOperacion((String)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND_NOT ::= COND_REL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND_NOT ::= OpNOT COND_REL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND_AND ::= COND_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND_AND ::= COND_AND OpAND COND_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= COND_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= CONDICION OpOR COND_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= ADITIVOS 
            {
              Object RESULT =null;
		 RESULT = "numero"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IDENTIFICADORES ::= IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLE ::= error TIPO 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE VARIABLE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARIABLE ::= IDENTIFICADORES DOS_PUNTOS TIPO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarVariablesEnTSimbolos((String)tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLES ::= VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARIABLES ::= VARIABLE PUNTOYCOMA VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARAR_VARIABLES ::= VAR VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONSTANTE ::= error STRING 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONSTANTE ::= error NUMERO 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONSTANTE ::= IDENTIFICADOR OpIGUAL STRING 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarConstanteEnTSimbolos((String)i, "String", s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONSTANTE ::= IDENTIFICADOR OpIGUAL NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().guardarConstanteEnTSimbolos((String)i, "Numero", n);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONSTANTES ::= CONSTANTE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONSTANTES ::= CONSTANTE PUNTOYCOMA CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARAR_CONSTANTES ::= CONST CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONSTANTES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ESTR_WHILE ::= WHILE NT$9 CONDICION DO NT$10 BEGIN SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getCoder().end_while(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 parser.getCoder().evalExp_While(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.getCoder().start_while(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTR_FOR ::= FOR ASIGNACION TO EXP DO BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_FOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTR_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESTR_ELSE ::= ELSE SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ESTR_IF ::= IF NT$6 CONDICION THEN NT$7 SENTENCIAS NT$8 ESTR_ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getCoder().end_if(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_IF",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 parser.getCoder().else_if(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 parser.getCoder().evalExp_if(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.getCoder().start_if(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGUMENTO ::= TIPO NT$5 IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getCoder().recordarIdentificador((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarTipo((String)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGUMENTOS_P ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGUMENTOS_P ::= COMA ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGUMENTOS_NO_VACIO ::= ARGUMENTO ARGUMENTOS_P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_NO_VACIO",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGUMENTOS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGUMENTOS ::= ARGUMENTOS_NO_VACIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE_DECLARACIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE_DECLARACIONES ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION_BLOQUE ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN FUNCION" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_BLOQUE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO NT$4 BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_BLOQUE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getCoder().recordarTipo((String)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= FUNCTION NT$3 IDENTIFICADOR FUNCION_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getCoder().guardarFuncionEnTsimbolo((String)i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.getCoder().startFunction();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROCEDIMIENTO_BLOQUE ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN PROCEDIMIENTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_BLOQUE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDIMIENTO_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_BLOQUE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDIMIENTO ::= PROCEDURE IDENTIFICADOR PROCEDIMIENTO_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= FUNCION NT$2 END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.getCoder().endFuncion(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= PROCEDIMIENTO END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA_PROGRAMA ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN PROGRAMA, FALTA UN BEGIN O END"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROGRAMA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESTRUCTURA_PROGRAMA ::= PROGRAM IDENTIFICADOR NT$0 BLOQUE_DECLARACIONES BLOQUE_FUNCIONES_PROCEDIMIENTOS BEGIN NT$1 SENTENCIAS END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROGRAMA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 parser.getCoder().iniciarCode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.getCoder().iniciarVar(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ESTRUCTURA_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

