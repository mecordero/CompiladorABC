
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 31 21:38:21 CST 2018
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 31 21:38:21 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\030\004" +
    "\000\002\030\003\000\002\026\014\000\002\031\004\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\004\004\000\002\011\005\000\002\011" +
    "\004\000\002\012\005\000\002\005\004\000\002\006\005" +
    "\000\002\006\004\000\002\007\005\000\002\010\005\000" +
    "\002\010\003\000\002\021\003\000\002\021\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\005\000\002\025" +
    "\003\000\002\022\005\000\002\022\003\000\002\023\004" +
    "\000\002\023\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\013\005\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\033\006\000\002\027\006" +
    "\000\002\027\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\035\004\000\002\035\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\004\000\002" +
    "\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\040\004\031\005\007\006\033\007\025\010" +
    "\036\011\014\013\040\014\006\031\004\034\023\036\042" +
    "\056\037\057\013\060\020\061\017\001\002\000\016\006" +
    "\051\007\025\010\036\011\014\013\040\014\006\001\002" +
    "\000\004\002\ufffe\001\002\000\012\006\051\007\025\010" +
    "\036\011\014\001\002\000\004\002\uffb4\001\002\000\010" +
    "\002\uffe1\032\uffe1\033\uffe1\001\002\000\010\002\uffe3\032" +
    "\uffe3\033\uffe3\001\002\000\044\002\uffd0\005\uffd0\012\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0" +
    "\033\uffd0\001\002\000\004\002\uffb7\001\002\000\020\006" +
    "\051\007\025\010\036\011\014\013\040\014\006\034\023" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffd\001" +
    "\002\000\004\006\161\001\002\000\004\002\uffb6\001\002" +
    "\000\044\002\uffcc\005\uffcc\012\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\001\002\000" +
    "\004\002\uffe9\001\002\000\010\002\uffe7\005\uffe7\012\uffe7" +
    "\001\002\000\004\005\160\001\002\000\044\002\uffcb\005" +
    "\uffcb\012\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\032\uffcb\033\uffcb\001\002\000\044\002\uffd8\005\uffd8" +
    "\012\uffd8\015\103\016\104\017\106\020\105\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\032\uffd8\033\uffd8\001\002\000\044\002\uffd3\005\uffd3\012" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\032" +
    "\uffd3\033\uffd3\001\002\000\004\002\uffff\001\002\000\004" +
    "\006\151\001\002\000\044\002\uffce\005\uffce\012\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032\uffce\033" +
    "\uffce\001\002\000\050\002\uffcd\011\052\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\051\136\052\140\053\141" +
    "\054\142\055\137\001\002\000\024\002\uffe8\021\075\022" +
    "\074\023\076\024\073\025\072\026\070\027\071\030\077" +
    "\001\002\000\004\002\135\001\002\000\044\002\uffca\005" +
    "\uffca\012\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\032\uffca\033\uffca\001\002\000\004\002\uffb8\001\002" +
    "\000\012\006\051\007\025\010\036\011\014\001\002\000" +
    "\010\002\uffe5\032\120\033\uffe5\001\002\000\004\006\122" +
    "\001\002\000\006\002\uffea\033\046\001\002\000\006\002" +
    "\ufffb\061\017\001\002\000\004\002\ufffc\001\002\000\020" +
    "\006\051\007\025\010\036\011\014\013\040\014\006\031" +
    "\004\001\002\000\010\002\uffe6\032\120\033\uffe6\001\002" +
    "\000\022\021\075\022\074\023\076\024\073\025\072\026" +
    "\070\027\071\030\077\001\002\000\046\002\uffcd\005\uffcd" +
    "\011\052\012\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\032\uffcd\033\uffcd\001\002\000\020\040\053\041" +
    "\062\042\060\043\055\044\057\045\063\046\054\001\002" +
    "\000\010\005\uffc6\006\uffc6\047\uffc6\001\002\000\010\005" +
    "\uffc0\006\uffc0\047\uffc0\001\002\000\010\005\uffc3\006\uffc3" +
    "\047\uffc3\001\002\000\004\006\065\001\002\000\010\005" +
    "\uffc2\006\uffc2\047\uffc2\001\002\000\010\005\uffc4\006\uffc4" +
    "\047\uffc4\001\002\000\004\012\064\001\002\000\010\005" +
    "\uffc5\006\uffc5\047\uffc5\001\002\000\010\005\uffc1\006\uffc1" +
    "\047\uffc1\001\002\000\044\002\uffc9\005\uffc9\012\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9\033" +
    "\uffc9\001\002\000\006\012\uffc7\035\066\001\002\000\020" +
    "\040\053\041\062\042\060\043\055\044\057\045\063\046" +
    "\054\001\002\000\004\012\uffc8\001\002\000\016\006\051" +
    "\007\025\010\036\011\014\013\040\014\006\001\002\000" +
    "\016\006\051\007\025\010\036\011\014\013\040\014\006" +
    "\001\002\000\016\006\051\007\025\010\036\011\014\013" +
    "\040\014\006\001\002\000\016\006\051\007\025\010\036" +
    "\011\014\013\040\014\006\001\002\000\016\006\051\007" +
    "\025\010\036\011\014\013\040\014\006\001\002\000\016" +
    "\006\051\007\025\010\036\011\014\013\040\014\006\001" +
    "\002\000\016\006\051\007\025\010\036\011\014\013\040" +
    "\014\006\001\002\000\016\006\051\007\025\010\036\011" +
    "\014\013\040\014\006\001\002\000\014\002\uffdb\021\075" +
    "\022\074\032\uffdb\033\uffdb\001\002\000\014\002\uffe0\021" +
    "\075\022\074\032\uffe0\033\uffe0\001\002\000\044\002\uffda" +
    "\005\uffda\012\uffda\015\103\016\104\017\106\020\105\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\032\uffda\033\uffda\001\002\000\016\006\051\007" +
    "\025\010\036\011\014\013\040\014\006\001\002\000\016" +
    "\006\051\007\025\010\036\011\014\013\040\014\006\001" +
    "\002\000\016\006\051\007\025\010\036\011\014\013\040" +
    "\014\006\001\002\000\016\006\051\007\025\010\036\011" +
    "\014\013\040\014\006\001\002\000\044\002\uffd5\005\uffd5" +
    "\012\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\032\uffd5\033\uffd5\001\002\000\044\002\uffd4\005\uffd4\012" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\032" +
    "\uffd4\033\uffd4\001\002\000\044\002\uffd6\005\uffd6\012\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6" +
    "\033\uffd6\001\002\000\044\002\uffd7\005\uffd7\012\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\032\uffd7\033" +
    "\uffd7\001\002\000\044\002\uffd9\005\uffd9\012\uffd9\015\103" +
    "\016\104\017\106\020\105\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9" +
    "\001\002\000\014\002\uffdf\021\075\022\074\032\uffdf\033" +
    "\uffdf\001\002\000\014\002\uffde\021\075\022\074\032\uffde" +
    "\033\uffde\001\002\000\014\002\uffdc\021\075\022\074\032" +
    "\uffdc\033\uffdc\001\002\000\014\002\uffdd\021\075\022\074" +
    "\032\uffdd\033\uffdd\001\002\000\020\006\051\007\025\010" +
    "\036\011\014\013\040\014\006\031\004\001\002\000\010" +
    "\002\uffe4\032\uffe4\033\uffe4\001\002\000\006\035\132\037" +
    "\uffeb\001\002\000\004\037\130\001\002\000\006\002\ufff0" +
    "\061\ufff0\001\002\000\004\005\126\001\002\000\010\002" +
    "\uffee\006\122\061\uffee\001\002\000\006\002\uffef\061\uffef" +
    "\001\002\000\020\040\053\041\062\042\060\043\055\044" +
    "\057\045\063\046\054\001\002\000\004\005\uffed\001\002" +
    "\000\004\006\122\001\002\000\004\037\uffec\001\002\000" +
    "\044\002\uffd2\005\uffd2\012\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\032\uffd2\033\uffd2\001\002\000\004" +
    "\002\001\001\002\000\020\006\051\007\025\010\036\011" +
    "\014\013\040\014\006\034\023\001\002\000\020\006\051" +
    "\007\025\010\036\011\014\013\040\014\006\034\023\001" +
    "\002\000\020\006\051\007\025\010\036\011\014\013\040" +
    "\014\006\034\023\001\002\000\020\006\051\007\025\010" +
    "\036\011\014\013\040\014\006\034\023\001\002\000\020" +
    "\006\051\007\025\010\036\011\014\013\040\014\006\034" +
    "\023\001\002\000\012\005\uffe8\012\uffe8\021\075\022\074" +
    "\001\002\000\004\005\uffbc\001\002\000\004\005\uffbd\001" +
    "\002\000\004\005\uffbe\001\002\000\004\005\uffbb\001\002" +
    "\000\004\005\uffbf\001\002\000\004\023\156\001\002\000" +
    "\004\005\154\001\002\000\006\002\ufff4\036\ufff4\001\002" +
    "\000\010\002\ufff2\006\151\036\ufff2\001\002\000\006\002" +
    "\ufff3\036\ufff3\001\002\000\020\006\051\007\025\010\036" +
    "\011\014\013\040\014\006\034\023\001\002\000\004\005" +
    "\ufff1\001\002\000\004\002\uffb5\001\002\000\004\011\162" +
    "\001\002\000\020\040\053\041\062\042\060\043\055\044" +
    "\057\045\063\046\054\001\002\000\004\012\164\001\002" +
    "\000\004\037\165\001\002\000\020\040\053\041\062\042" +
    "\060\043\055\044\057\045\063\046\054\001\002\000\004" +
    "\047\167\001\002\000\004\004\031\001\002\000\004\036" +
    "\042\001\002\000\006\002\ufffa\061\ufffa\001\002\000\004" +
    "\012\173\001\002\000\044\002\uffcf\005\uffcf\012\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033" +
    "\uffcf\001\002\000\044\002\uffd1\005\uffd1\012\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1" +
    "\001\002\000\010\002\uffe2\032\uffe2\033\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\046\003\034\004\027\005\004\013\011\014" +
    "\031\015\026\016\025\017\033\020\007\021\014\022\040" +
    "\023\010\024\021\025\042\026\043\030\015\033\020\034" +
    "\023\001\001\000\020\013\011\014\031\015\026\016\025" +
    "\017\047\020\174\033\020\001\001\000\002\001\001\000" +
    "\010\013\173\014\031\033\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\011\014\031\015\026\016\025" +
    "\017\142\024\171\033\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\152\012\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\133\014\031\033\020\001\001\000\002\001\001\000\010" +
    "\006\123\007\124\010\122\001\001\000\002\001\001\000" +
    "\006\026\043\030\044\001\001\000\002\001\001\000\024" +
    "\013\011\014\031\015\026\016\025\017\047\020\007\022" +
    "\046\023\010\033\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\055\027\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\055\027\066\001" +
    "\001\000\002\001\001\000\016\013\011\014\031\015\026" +
    "\016\025\017\116\033\020\001\001\000\016\013\011\014" +
    "\031\015\026\016\025\017\115\033\020\001\001\000\016" +
    "\013\011\014\031\015\026\016\025\017\114\033\020\001" +
    "\001\000\016\013\011\014\031\015\026\016\025\017\113" +
    "\033\020\001\001\000\014\013\011\014\031\015\026\016" +
    "\112\033\020\001\001\000\014\013\011\014\031\015\026" +
    "\016\101\033\020\001\001\000\016\013\011\014\031\015" +
    "\026\016\025\017\100\033\020\001\001\000\016\013\011" +
    "\014\031\015\026\016\025\017\077\033\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\011\014\031\015\111\033\020\001\001\000\012\013" +
    "\011\014\031\015\110\033\020\001\001\000\012\013\011" +
    "\014\031\015\107\033\020\001\001\000\012\013\011\014" +
    "\031\015\106\033\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\011\014\031\015\026\016" +
    "\025\017\047\020\007\023\120\033\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\126\007\124\010\122" +
    "\001\001\000\002\001\001\000\004\002\130\001\001\000" +
    "\002\001\001\000\004\010\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\011\014" +
    "\031\015\026\016\025\017\142\024\147\033\020\001\001" +
    "\000\020\013\011\014\031\015\026\016\025\017\142\024" +
    "\146\033\020\001\001\000\020\013\011\014\031\015\026" +
    "\016\025\017\142\024\145\033\020\001\001\000\020\013" +
    "\011\014\031\015\026\016\025\017\142\024\144\033\020" +
    "\001\001\000\020\013\011\014\031\015\026\016\025\017" +
    "\142\024\143\033\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\154\012\151\001\001\000" +
    "\002\001\001\000\020\013\011\014\031\015\026\016\025" +
    "\017\142\024\156\033\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\055\027\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\165\001\001\000\002\001\001\000\004\004\167\001\001" +
    "\000\004\005\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        System.out.println("ERROR:" + message);
      }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= ASIGNACION PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;
		 System.out.println(" sentencias 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;
		 System.out.println(" sentencias 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= IDENTIFICADOR OprASIG_DIV EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION ::= IDENTIFICADOR OprASIG_MUL EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= IDENTIFICADOR OprASIG_RESTA EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION ::= IDENTIFICADOR OprASIG_MAS EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= IDENTIFICADOR OprASIGNACION EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= TYPE_REAL 
            {
              Object RESULT =null;
		 System.out.println(" tipo 7 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= TYPE_BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println(" tipo 6 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= TYPE_STRING 
            {
              Object RESULT =null;
		 System.out.println(" tipo 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= TYPE_CHAR 
            {
              Object RESULT =null;
		 System.out.println(" tipo 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= TYPE_SHORTINT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= TYPE_LONGINT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= TYPE_INT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGUMENTOS ::= TIPO IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" argumentos 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGUMENTOS ::= TIPO IDENTIFICADOR COMA ARGUMENTOS 
            {
              Object RESULT =null;
		 System.out.println(" argumentos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LLAMADA_FUNCION ::= IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println(" funcion "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NUMERO ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println(" numero 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NUMERO ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println(" numero 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TERMINO ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;
		 System.out.println(" termino 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TERMINO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" termino 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERMINO ::= NUMERO 
            {
              Object RESULT =null;
		 System.out.println(" termino 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERMINO ::= PARENTESIS_ABRE EXP PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println(" termino 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // UNARIO ::= TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UNARIO ::= OpDEC TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UNARIO ::= OpINC TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MULTIPLICATIVOS ::= UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_MOD UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_DIV UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpDIV UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpMUL UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ADITIVOS ::= MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ADITIVOS ::= ADITIVOS OpRESTA MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ADITIVOS ::= ADITIVOS OpSUMA MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND_REL ::= ADITIVOS OpDIFERENTE ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 6 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COND_REL ::= ADITIVOS OpMENOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COND_REL ::= ADITIVOS OpMENOR ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COND_REL ::= ADITIVOS OpMAYOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COND_REL ::= ADITIVOS OpMAYOR ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COND_REL ::= ADITIVOS OpIGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COND_NOT ::= COND_REL 
            {
              Object RESULT =null;
		 System.out.println(" cond_not 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COND_NOT ::= Op_NOT COND_REL 
            {
              Object RESULT =null;
		 System.out.println(" cond_not 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COND_AND ::= COND_NOT 
            {
              Object RESULT =null;
		 System.out.println(" cond_and 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COND_AND ::= COND_AND Op_AND COND_NOT 
            {
              Object RESULT =null;
		 System.out.println(" cond_and 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICION ::= COND_AND 
            {
              Object RESULT =null;
		 System.out.println(" condicion 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDICION ::= CONDICION Op_OR COND_AND 
            {
              Object RESULT =null;
		 System.out.println(" condicion 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= STRING 
            {
              Object RESULT =null;
		 System.out.println(" exp 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" exp 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= EXP 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= CONDICION 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" identificadores 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDENTIFICADORES ::= IDENTIFICADOR COMA IDENTIFICADORES 
            {
              Object RESULT =null;
		 System.out.println(" identificadores 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLE ::= IDENTIFICADORES DOS_PUNTOS TIPO 
            {
              Object RESULT =null;
		 System.out.println(" variable "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLES ::= VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" variables 2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLES ::= VARIABLE PUNTOYCOMA VARIABLES 
            {
              Object RESULT =null;
		 System.out.println(" variables 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARAR_VARIABLES ::= VAR VARIABLES 
            {
              Object RESULT =null;
		 System.out.println(" declarar_variables "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONSTANTE ::= IDENTIFICADOR OpIGUAL EXP 
            {
              Object RESULT =null;
		 System.out.println("constante"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONSTANTES ::= CONSTANTE PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" constantes 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONSTANTES ::= CONSTANTE PUNTOYCOMA CONSTANTES 
            {
              Object RESULT =null;
		 System.out.println(" constantes 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARAR_CONSTANTES ::= CONST CONSTANTES 
            {
              Object RESULT =null;
		 System.out.println(" declarar_constantes "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONSTANTES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINEA_CUERPO ::= SENTENCIAS 
            {
              Object RESULT =null;
		 System.out.println(" linea_cuerpo 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEA_CUERPO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINEA_CUERPO ::= ASIGNACION 
            {
              Object RESULT =null;
		 System.out.println(" linea_cuerpo 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEA_CUERPO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINEA_CUERPO ::= EXP 
            {
              Object RESULT =null;
		 System.out.println(" linea_cuerpo 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEA_CUERPO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINEAS_CUERPO ::= LINEA_CUERPO 
            {
              Object RESULT =null;
		 System.out.println(" lineas_cuerpo 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS_CUERPO",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LINEAS_CUERPO ::= LINEA_CUERPO LINEAS_CUERPO 
            {
              Object RESULT =null;
		 System.out.println(" lineas_cuerpo 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS_CUERPO",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= FUNCTION IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO BEGIN DECLARAR_CONSTANTES DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;
		 System.out.println(" funciones 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		 System.out.println(" funciones 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TEMPORAL ::= FUNCIONES 
            {
              Object RESULT =null;
		 System.out.println(" temp 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TEMPORAL ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;
		 System.out.println(" temp 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TEMPORAL ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;
		 System.out.println(" temp 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TEMPORAL ::= SENTENCIA 
            {
              Object RESULT =null;
		 System.out.println(" temp 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TEMPORAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

