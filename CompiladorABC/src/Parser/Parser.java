
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 02 19:35:23 CST 2018
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 02 19:35:23 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\032\004" +
    "\000\002\032\003\000\002\031\013\000\002\030\004\000" +
    "\002\030\003\000\002\026\015\000\002\037\004\000\002" +
    "\037\004\000\002\037\003\000\002\037\003\000\002\027" +
    "\005\000\002\033\004\000\002\033\002\000\002\040\012" +
    "\000\002\004\004\000\002\011\005\000\002\011\004\000" +
    "\002\012\005\000\002\012\005\000\002\005\004\000\002" +
    "\006\005\000\002\006\004\000\002\007\005\000\002\010" +
    "\005\000\002\010\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\005\000\002\025\003\000\002\022\005\000" +
    "\002\022\003\000\002\023\004\000\002\023\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\015\004\000\002\015\004\000\002\015" +
    "\003\000\002\013\005\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\034\006\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\036\004\000\002\036\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\021" +
    "\003\000\002\021\004\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\012\004\015\036\010\056\005\062\007\001" +
    "\002\000\004\002\000\001\002\000\004\006\157\001\002" +
    "\000\004\002\155\001\002\000\004\006\052\001\002\000" +
    "\004\006\031\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\ufffd\001\002\000\010\002" +
    "\ufffb\050\ufffb\062\007\001\002\000\004\006\016\001\002" +
    "\000\004\023\023\001\002\000\004\005\021\001\002\000" +
    "\010\002\uffee\036\uffee\047\uffee\001\002\000\012\002\uffec" +
    "\006\016\036\uffec\047\uffec\001\002\000\010\002\uffed\036" +
    "\uffed\047\uffed\001\002\000\010\007\027\010\025\034\026" +
    "\001\002\000\004\005\uffeb\001\002\000\026\005\uffc5\012" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\063\uffc5\064\uffc5\001\002\000\004\005\uffea\001\002\000" +
    "\026\005\uffc6\012\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\063\uffc6\064\uffc6\001\002\000\006\002" +
    "\ufffc\050\ufffc\001\002\000\010\012\uffe4\035\uffe4\037\uffe4" +
    "\001\002\000\006\035\037\037\040\001\002\000\010\002" +
    "\uffe9\004\uffe9\047\uffe9\001\002\000\004\005\035\001\002" +
    "\000\012\002\uffe7\004\uffe7\006\031\047\uffe7\001\002\000" +
    "\010\002\uffe8\004\uffe8\047\uffe8\001\002\000\004\006\051" +
    "\001\002\000\020\040\046\041\043\042\044\043\047\044" +
    "\041\045\045\046\042\001\002\000\006\005\uffbf\006\uffbf" +
    "\001\002\000\006\005\uffbd\006\uffbd\001\002\000\006\005" +
    "\uffc2\006\uffc2\001\002\000\006\005\uffc1\006\uffc1\001\002" +
    "\000\006\005\uffbe\006\uffbe\001\002\000\006\005\uffc3\006" +
    "\uffc3\001\002\000\006\005\uffc0\006\uffc0\001\002\000\004" +
    "\005\uffe6\001\002\000\010\012\uffe5\035\uffe5\037\uffe5\001" +
    "\002\000\004\011\053\001\002\000\020\040\046\041\043" +
    "\042\044\043\047\044\041\045\045\046\042\001\002\000" +
    "\004\006\151\001\002\000\004\012\056\001\002\000\006" +
    "\004\015\036\010\001\002\000\004\047\064\001\002\000" +
    "\006\004\015\047\ufff4\001\002\000\006\036\010\047\ufff3" +
    "\001\002\000\004\047\ufff5\001\002\000\004\047\ufff6\001" +
    "\002\000\016\005\074\006\075\056\005\057\066\060\067" +
    "\062\007\001\002\000\004\050\uffaf\001\002\000\004\050" +
    "\uffb4\001\002\000\004\050\uffb3\001\002\000\004\050\150" +
    "\001\002\000\004\050\uffb5\001\002\000\004\005\147\001" +
    "\002\000\004\005\146\001\002\000\004\050\uffb1\001\002" +
    "\000\016\011\102\051\076\052\100\053\101\054\103\055" +
    "\077\001\002\000\020\006\117\007\027\010\025\011\106" +
    "\013\112\014\114\034\105\001\002\000\020\006\117\007" +
    "\027\010\025\011\106\013\112\014\114\034\105\001\002" +
    "\000\020\006\117\007\027\010\025\011\106\013\112\014" +
    "\114\034\105\001\002\000\020\006\117\007\027\010\025" +
    "\011\106\013\112\014\114\034\105\001\002\000\004\006" +
    "\031\001\002\000\020\006\117\007\027\010\025\011\106" +
    "\013\112\014\114\034\105\001\002\000\026\005\uffce\012" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\063\uffce\064\uffce\001\002\000\012\005\uffe2\012\uffe2\063" +
    "\uffe2\064\uffe2\001\002\000\020\006\117\007\027\010\025" +
    "\011\106\013\112\014\114\034\105\001\002\000\026\005" +
    "\uffc9\012\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\063\uffc9\064\uffc9\001\002\000\026\005\uffcb\012" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\063\uffcb\064\uffcb\001\002\000\026\005\uffc7\012\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\063\uffc7" +
    "\064\uffc7\001\002\000\012\006\117\007\027\010\025\011" +
    "\106\001\002\000\016\005\uffe3\012\uffe3\021\132\022\131" +
    "\063\uffe3\064\uffe3\001\002\000\012\006\117\007\027\010" +
    "\025\011\106\001\002\000\026\005\uffd3\012\uffd3\015\120" +
    "\016\121\017\123\020\122\021\uffd3\022\uffd3\063\uffd3\064" +
    "\uffd3\001\002\000\006\005\uffb9\063\uffb9\001\002\000\030" +
    "\005\uffc8\011\102\012\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\063\uffc8\064\uffc8\001\002\000\016" +
    "\006\117\007\027\010\025\011\106\013\112\014\114\001" +
    "\002\000\016\006\117\007\027\010\025\011\106\013\112" +
    "\014\114\001\002\000\016\006\117\007\027\010\025\011" +
    "\106\013\112\014\114\001\002\000\016\006\117\007\027" +
    "\010\025\011\106\013\112\014\114\001\002\000\026\005" +
    "\uffd0\012\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\063\uffd0\064\uffd0\001\002\000\026\005\uffcf\012" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\063\uffcf\064\uffcf\001\002\000\026\005\uffd1\012\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\063\uffd1" +
    "\064\uffd1\001\002\000\026\005\uffd2\012\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\063\uffd2\064\uffd2" +
    "\001\002\000\026\005\uffcc\012\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\063\uffcc\064\uffcc\001\002" +
    "\000\016\006\117\007\027\010\025\011\106\013\112\014" +
    "\114\001\002\000\016\006\117\007\027\010\025\011\106" +
    "\013\112\014\114\001\002\000\026\005\uffd5\012\uffd5\015" +
    "\120\016\121\017\123\020\122\021\uffd5\022\uffd5\063\uffd5" +
    "\064\uffd5\001\002\000\026\005\uffd4\012\uffd4\015\120\016" +
    "\121\017\123\020\122\021\uffd4\022\uffd4\063\uffd4\064\uffd4" +
    "\001\002\000\026\005\uffcd\012\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\063\uffcd\064\uffcd\001\002" +
    "\000\004\012\137\001\002\000\026\005\uffca\012\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\063\uffca" +
    "\064\uffca\001\002\000\006\012\141\035\037\001\002\000" +
    "\026\005\uffc4\012\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\063\uffc4\064\uffc4\001\002\000\006\005" +
    "\uffba\063\uffba\001\002\000\006\005\uffbb\063\uffbb\001\002" +
    "\000\006\005\uffb8\063\uffb8\001\002\000\006\005\uffbc\063" +
    "\uffbc\001\002\000\004\050\uffb0\001\002\000\004\050\uffb2" +
    "\001\002\000\010\002\ufffa\050\ufffa\062\ufffa\001\002\000" +
    "\006\012\ufff0\035\152\001\002\000\020\040\046\041\043" +
    "\042\044\043\047\044\041\045\045\046\042\001\002\000" +
    "\004\012\ufff2\001\002\000\004\012\ufff1\001\002\000\004" +
    "\002\001\001\002\000\004\063\160\001\002\000\014\051" +
    "\076\052\100\053\101\054\103\055\077\001\002\000\020" +
    "\006\117\007\027\010\025\011\106\013\112\014\114\034" +
    "\105\001\002\000\004\064\162\001\002\000\004\047\163" +
    "\001\002\000\016\005\074\006\075\056\005\057\066\060" +
    "\067\062\007\001\002\000\004\050\165\001\002\000\006" +
    "\002\uffef\050\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\016\003\005\004\011\005\010\031\013\032" +
    "\003\040\012\001\001\000\002\001\001\000\004\035\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\032\007\033\010\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\013\032\027\001" +
    "\001\000\006\011\017\012\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\021\012" +
    "\016\001\001\000\002\001\001\000\004\014\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\035\007\033\010\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\053" +
    "\027\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\060\005\057\037\056\001\001\000\002\001\001" +
    "\000\004\004\062\001\001\000\004\005\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\067\031\013" +
    "\032\064\034\072\035\071\040\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\107\014\106" +
    "\015\103\016\114\017\112\024\144\034\110\001\001\000" +
    "\020\013\107\014\106\015\103\016\114\017\112\024\143" +
    "\034\110\001\001\000\020\013\107\014\106\015\103\016" +
    "\114\017\112\024\142\034\110\001\001\000\020\013\107" +
    "\014\106\015\103\016\114\017\112\024\141\034\110\001" +
    "\001\000\004\010\137\001\001\000\020\013\107\014\106" +
    "\015\103\016\114\017\112\024\115\034\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\107\014\106" +
    "\015\103\016\114\017\112\024\135\034\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\134\014\106\034\110\001\001\000\002\001\001\000" +
    "\010\013\127\014\106\034\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\107\014" +
    "\106\015\126\034\110\001\001\000\012\013\107\014\106" +
    "\015\125\034\110\001\001\000\012\013\107\014\106\015" +
    "\124\034\110\001\001\000\012\013\107\014\106\015\123" +
    "\034\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\107\014\106\015\103\016\133\034\110\001\001\000" +
    "\014\013\107\014\106\015\103\016\132\034\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\152\001\001\000\006\002" +
    "\053\027\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\107\014\106\015\103\016\114\017\112\024\160" +
    "\034\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\163\031\013\032\064\034\072\035\071\040\070" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        System.out.println("ERROR:" + message);
      }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= LLAMADA_FUNCION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= ASIGNACION PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= ESTR_FOR 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;
		 System.out.println(" sentencias 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;
		 System.out.println(" sentencias 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= IDENTIFICADOR OprASIG_DIV EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= IDENTIFICADOR OprASIG_MUL EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= IDENTIFICADOR OprASIG_RESTA EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= IDENTIFICADOR OprASIG_MAS EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION ::= IDENTIFICADOR OprASIGNACION EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= TYPE_REAL 
            {
              Object RESULT =null;
		 System.out.println(" tipo 7 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= TYPE_BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println(" tipo 6 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= TYPE_STRING 
            {
              Object RESULT =null;
		 System.out.println(" tipo 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= TYPE_CHAR 
            {
              Object RESULT =null;
		 System.out.println(" tipo 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= TYPE_SHORTINT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= TYPE_LONGINT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= TYPE_INT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LLAMADA_FUNCION ::= IDENTIFICADOR PARENTESIS_ABRE IDENTIFICADORES PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println(" funcion "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NUMERO ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println(" numero 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NUMERO ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println(" numero 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TERMINO ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;
		 System.out.println(" termino 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TERMINO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" termino 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TERMINO ::= NUMERO 
            {
              Object RESULT =null;
		 System.out.println(" termino 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TERMINO ::= PARENTESIS_ABRE EXP PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println(" termino 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // UNARIO ::= TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // UNARIO ::= OpDEC TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // UNARIO ::= OpINC TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MULTIPLICATIVOS ::= UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_MOD UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_DIV UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpDIV UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpMUL UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ADITIVOS ::= MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ADITIVOS ::= ADITIVOS OpRESTA MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ADITIVOS ::= ADITIVOS OpSUMA MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND_REL ::= ADITIVOS OpDIFERENTE ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 6 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND_REL ::= ADITIVOS OpMENOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND_REL ::= ADITIVOS OpMENOR ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND_REL ::= ADITIVOS OpMAYOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND_REL ::= ADITIVOS OpMAYOR ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND_REL ::= ADITIVOS OpIGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COND_NOT ::= COND_REL 
            {
              Object RESULT =null;
		 System.out.println(" cond_not 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COND_NOT ::= Op_NOT COND_REL 
            {
              Object RESULT =null;
		 System.out.println(" cond_not 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COND_AND ::= COND_NOT 
            {
              Object RESULT =null;
		 System.out.println(" cond_and 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COND_AND ::= COND_AND Op_AND COND_NOT 
            {
              Object RESULT =null;
		 System.out.println(" cond_and 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= COND_AND 
            {
              Object RESULT =null;
		 System.out.println(" condicion 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= CONDICION Op_OR COND_AND 
            {
              Object RESULT =null;
		 System.out.println(" condicion 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= STRING 
            {
              Object RESULT =null;
		 System.out.println(" exp 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" exp 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" identificadores 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDENTIFICADORES ::= IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" identificadores 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIABLE ::= IDENTIFICADORES DOS_PUNTOS TIPO 
            {
              Object RESULT =null;
		 System.out.println(" variable "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIABLES ::= VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLES ::= VARIABLE PUNTOYCOMA VARIABLES 
            {
              Object RESULT =null;
		 System.out.println(" variables 2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARAR_VARIABLES ::= VAR VARIABLES 
            {
              Object RESULT =null;
		 System.out.println(" declarar_variables1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONSTANTE ::= IDENTIFICADOR OpIGUAL STRING 
            {
              Object RESULT =null;
		 System.out.println("constante"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONSTANTE ::= IDENTIFICADOR OpIGUAL NUMERO 
            {
              Object RESULT =null;
		 System.out.println("constante"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONSTANTES ::= CONSTANTE PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" constantes 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONSTANTES ::= CONSTANTE PUNTOYCOMA CONSTANTES 
            {
              Object RESULT =null;
		 System.out.println(" constantes 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARAR_CONSTANTES ::= CONST CONSTANTES 
            {
              Object RESULT =null;
		 System.out.println(" declarar_constantes "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONSTANTES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTR_FOR ::= FOR ASIGNACION TO EXP DO BEGIN SENTENCIA END 
            {
              Object RESULT =null;
		 System.out.println(" BE  1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_FOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGUMENTOS_P ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGUMENTOS_P ::= COMA ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARGUMENTOS ::= TIPO IDENTIFICADOR ARGUMENTOS_P 
            {
              Object RESULT =null;
		 System.out.println(" argumentos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE_DECLARACIONES ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_DECLARACIONES ::= DECLARAR_CONSTANTES DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= FUNCTION IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO BLOQUE_DECLARACIONES BEGIN SENTENCIA END 
            {
              Object RESULT =null;
		 System.out.println(" funcion "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;
		 System.out.println(" funciones 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		 System.out.println(" funciones 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDIMIENTO ::= PROCEDURE IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA BLOQUE_DECLARACIONES BEGIN SENTENCIA END 
            {
              Object RESULT =null;
		 System.out.println(" procedimiento "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDIMIENTOS ::= PROCEDIMIENTO 
            {
              Object RESULT =null;
		 System.out.println(" procedimiento 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDIMIENTOS ::= PROCEDIMIENTO PROCEDIMIENTOS 
            {
              Object RESULT =null;
		 System.out.println(" procedimientos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TEMPORAL ::= ESTR_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TEMPORAL ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TEMPORAL ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TEMPORAL ::= PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TEMPORAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

