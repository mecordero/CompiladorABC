
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 14 20:43:20 CST 2018
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 14 20:43:20 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\045\011\000\002\045" +
    "\003\000\002\034\005\000\002\034\005\000\002\034\002" +
    "\000\002\030\005\000\002\030\002\000\002\027\005\000" +
    "\002\055\010\000\002\055\004\000\002\026\005\000\002" +
    "\026\002\000\002\024\005\000\002\054\012\000\002\054" +
    "\004\000\002\040\004\000\002\040\003\000\002\040\003" +
    "\000\002\040\002\000\002\025\003\000\002\047\004\000" +
    "\002\047\002\000\002\031\004\000\002\031\002\000\002" +
    "\050\004\000\002\043\006\000\002\043\007\000\002\044" +
    "\004\000\002\041\011\000\002\042\007\000\002\003\004" +
    "\000\002\010\005\000\002\010\004\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\004\000\002" +
    "\004\004\000\002\005\005\000\002\005\004\000\002\006" +
    "\005\000\002\006\004\000\002\007\005\000\002\007\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\020\005\000\002\020\003\000\002" +
    "\021\004\000\002\021\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\014\003\000\002\014\003\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\035" +
    "\005\000\002\035\006\000\002\035\006\000\002\051\003" +
    "\000\002\051\004\000\002\051\004\000\002\053\003\000" +
    "\002\053\002\000\002\052\005\000\002\052\003\000\002" +
    "\052\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\037\004\000\002\037\004\000\002\037\002\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\003\004\065\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\322\001\002\000\004\006\007" +
    "\001\002\000\014\004\010\034\011\045\uffee\057\uffee\060" +
    "\uffee\001\002\000\006\003\307\006\310\001\002\000\006" +
    "\003\273\006\274\001\002\000\010\045\ufffc\057\022\060" +
    "\016\001\002\000\012\004\010\045\ufff0\057\ufff0\060\ufff0" +
    "\001\002\000\010\045\uffef\057\uffef\060\uffef\001\002\000" +
    "\010\045\ufff1\057\ufff1\060\ufff1\001\002\000\004\006\261" +
    "\001\002\000\004\046\257\001\002\000\004\046\255\001" +
    "\002\000\004\045\252\001\002\000\004\006\023\001\002" +
    "\000\006\003\024\011\026\001\002\000\004\005\251\001" +
    "\002\000\004\046\ufff4\001\002\000\022\012\uffeb\036\027" +
    "\037\037\040\036\041\032\042\033\043\041\044\030\001" +
    "\002\000\014\004\uffa6\005\uffa6\006\uffa6\034\uffa6\045\uffa6" +
    "\001\002\000\014\004\uffa0\005\uffa0\006\uffa0\034\uffa0\045" +
    "\uffa0\001\002\000\006\012\uffe9\033\246\001\002\000\014" +
    "\004\uffa3\005\uffa3\006\uffa3\034\uffa3\045\uffa3\001\002\000" +
    "\014\004\uffa2\005\uffa2\006\uffa2\034\uffa2\045\uffa2\001\002" +
    "\000\004\006\245\001\002\000\004\012\uffed\001\002\000" +
    "\014\004\uffa4\005\uffa4\006\uffa4\034\uffa4\045\uffa4\001\002" +
    "\000\014\004\uffa5\005\uffa5\006\uffa5\034\uffa5\045\uffa5\001" +
    "\002\000\004\012\042\001\002\000\014\004\uffa1\005\uffa1" +
    "\006\uffa1\034\uffa1\045\uffa1\001\002\000\004\035\043\001" +
    "\002\000\020\036\027\037\037\040\036\041\032\042\033" +
    "\043\041\044\030\001\002\000\010\004\010\034\011\045" +
    "\uffee\001\002\000\004\045\046\001\002\000\034\003\070" +
    "\006\072\007\065\010\073\011\053\046\uff98\054\074\055" +
    "\052\056\056\066\054\067\062\070\050\071\060\001\002" +
    "\000\004\046\244\001\002\000\004\011\235\001\002\000" +
    "\006\066\143\067\144\001\002\000\024\006\116\007\065" +
    "\010\073\011\053\027\174\066\054\067\062\070\050\071" +
    "\060\001\002\000\024\006\116\007\065\010\073\011\053" +
    "\032\107\066\054\067\062\070\050\071\060\001\002\000" +
    "\016\006\116\007\065\010\073\011\053\070\050\071\060" +
    "\001\002\000\004\046\ufff3\001\002\000\024\006\116\007" +
    "\065\010\073\011\053\027\174\066\054\067\062\070\050" +
    "\071\060\001\002\000\010\005\171\066\uffb4\067\uffb4\001" +
    "\002\000\004\011\166\001\002\000\004\046\165\001\002" +
    "\000\016\006\116\007\065\010\073\011\053\070\050\071" +
    "\060\001\002\000\004\005\163\001\002\000\036\003\070" +
    "\006\072\007\065\010\073\011\053\046\uff98\054\074\055" +
    "\052\056\056\064\uff98\066\054\067\062\070\050\071\060" +
    "\001\002\000\056\005\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\030\uffb3\031\uffb3\033\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\066\uffb3\067\uffb3\001\002\000\004" +
    "\046\161\001\002\000\036\003\070\006\072\007\065\010" +
    "\073\011\053\046\uff98\054\074\055\052\056\056\064\uff98" +
    "\066\054\067\062\070\050\071\060\001\002\000\006\005" +
    "\156\046\157\001\002\000\056\005\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6" +
    "\033\uffb6\061\uffb6\062\uffb6\063\uffb6\066\uffb6\067\uffb6\001" +
    "\002\000\022\011\117\047\101\050\103\051\104\052\105" +
    "\053\102\066\uffb5\067\uffb5\001\002\000\056\005\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030" +
    "\uffb2\031\uffb2\033\uffb2\061\uffb2\062\uffb2\063\uffb2\066\uffb2" +
    "\067\uffb2\001\002\000\004\006\100\001\002\000\004\005" +
    "\076\001\002\000\036\003\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\046\uff96\054\uff96\055\uff96\056\uff96\064\uff96\066" +
    "\uff96\067\uff96\070\uff96\071\uff96\001\002\000\004\061\151" +
    "\001\002\000\014\047\101\050\103\051\104\052\105\053" +
    "\102\001\002\000\024\006\116\007\065\010\073\011\053" +
    "\032\107\066\054\067\062\070\050\071\060\001\002\000" +
    "\024\006\116\007\065\010\073\011\053\032\107\066\054" +
    "\067\062\070\050\071\060\001\002\000\024\006\116\007" +
    "\065\010\073\011\053\032\107\066\054\067\062\070\050" +
    "\071\060\001\002\000\024\006\116\007\065\010\073\011" +
    "\053\032\107\066\054\067\062\070\050\071\060\001\002" +
    "\000\024\006\116\007\065\010\073\011\053\032\107\066" +
    "\054\067\062\070\050\071\060\001\002\000\050\005\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\030\uffbe\031\uffbe\061\uffbe\062\uffbe\063\uffbe\001\002\000" +
    "\012\005\uffd3\012\uffd3\061\uffd3\062\uffd3\001\002\000\054" +
    "\005\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\030\uffbc\031\uffbc\061\uffbc\062\uffbc\063\uffbc\066" +
    "\143\067\144\001\002\000\056\005\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4" +
    "\033\uffb4\061\uffb4\062\uffb4\063\uffb4\066\uffb4\067\uffb4\001" +
    "\002\000\016\005\uffd4\012\uffd4\017\140\020\137\061\uffd4" +
    "\062\uffd4\001\002\000\050\005\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\001\002\000\006\005\uff9c\061\uff9c" +
    "\001\002\000\050\005\uffc3\012\uffc3\013\127\014\130\015" +
    "\132\016\131\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\001\002\000\060\005\uffb5\011\117\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\030\uffb5" +
    "\031\uffb5\033\uffb5\061\uffb5\062\uffb5\063\uffb5\066\uffb5\067" +
    "\uffb5\001\002\000\022\006\116\007\065\010\073\011\053" +
    "\012\uffaa\032\120\070\050\071\060\001\002\000\004\012" +
    "\uffa8\001\002\000\006\012\uffa7\033\125\001\002\000\004" +
    "\012\uffab\001\002\000\004\012\124\001\002\000\056\005" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\030\uffaf\031\uffaf\033\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\066\uffaf\067\uffaf\001\002\000\020\006\116\007\065\010" +
    "\073\011\053\032\120\070\050\071\060\001\002\000\004" +
    "\012\uffa9\001\002\000\022\006\116\007\065\010\073\011" +
    "\053\066\054\067\062\070\050\071\060\001\002\000\022" +
    "\006\116\007\065\010\073\011\053\066\054\067\062\070" +
    "\050\071\060\001\002\000\022\006\116\007\065\010\073" +
    "\011\053\066\054\067\062\070\050\071\060\001\002\000" +
    "\022\006\116\007\065\010\073\011\053\066\054\067\062" +
    "\070\050\071\060\001\002\000\050\005\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\001\002\000\050\005\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\030\uffbf\031\uffbf\061\uffbf\062\uffbf\063\uffbf\001\002\000" +
    "\050\005\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\030\uffc1\031\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\001\002\000\050\005\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\001\002\000\022\006\116\007\065\010\073" +
    "\011\053\066\054\067\062\070\050\071\060\001\002\000" +
    "\022\006\116\007\065\010\073\011\053\066\054\067\062" +
    "\070\050\071\060\001\002\000\050\005\uffc5\012\uffc5\013" +
    "\127\014\130\015\132\016\131\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\050\005\uffc4" +
    "\012\uffc4\013\127\014\130\015\132\016\131\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\030\uffc4\031\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000" +
    "\050\005\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\030\uffb9\031\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\001\002\000\050\005\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\001\002\000\006\005\uff9d\061\uff9d\001\002" +
    "\000\006\005\uff9e\061\uff9e\001\002\000\006\005\uff9b\061" +
    "\uff9b\001\002\000\006\005\uff9f\061\uff9f\001\002\000\024" +
    "\006\116\007\065\010\073\011\053\032\107\066\054\067" +
    "\062\070\050\071\060\001\002\000\004\062\153\001\002" +
    "\000\004\045\154\001\002\000\034\003\070\006\072\007" +
    "\065\010\073\011\053\046\uff98\054\074\055\052\056\056" +
    "\066\054\067\062\070\050\071\060\001\002\000\004\046" +
    "\uffe4\001\002\000\036\003\uff94\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\046\uff94\054\uff94\055\uff94\056\uff94\064\uff94\066" +
    "\uff94\067\uff94\070\uff94\071\uff94\001\002\000\036\003\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\046\uff90\054\uff90\055" +
    "\uff90\056\uff90\064\uff90\066\uff90\067\uff90\070\uff90\071\uff90" +
    "\001\002\000\006\046\uff9a\064\uff9a\001\002\000\036\003" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\046\uff91\054\uff91" +
    "\055\uff91\056\uff91\064\uff91\066\uff91\067\uff91\070\uff91\071" +
    "\uff91\001\002\000\006\046\uff99\064\uff99\001\002\000\036" +
    "\003\uff97\006\uff97\007\uff97\010\uff97\011\uff97\046\uff97\054" +
    "\uff97\055\uff97\056\uff97\064\uff97\066\uff97\067\uff97\070\uff97" +
    "\071\uff97\001\002\000\050\005\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba\061" +
    "\uffba\062\uffba\063\uffba\001\002\000\036\003\uff93\006\uff93" +
    "\007\uff93\010\uff93\011\uff93\046\uff93\054\uff93\055\uff93\056" +
    "\uff93\064\uff93\066\uff93\067\uff93\070\uff93\071\uff93\001\002" +
    "\000\020\006\116\007\065\010\073\011\053\032\120\070" +
    "\050\071\060\001\002\000\004\012\170\001\002\000\056" +
    "\005\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\030\uffb0\031\uffb0\033\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\066\uffb0\067\uffb0\001\002\000\036\003\uff95\006\uff95" +
    "\007\uff95\010\uff95\011\uff95\046\uff95\054\uff95\055\uff95\056" +
    "\uff95\064\uff95\066\uff95\067\uff95\070\uff95\071\uff95\001\002" +
    "\000\012\030\uffcd\031\uffcd\062\uffcd\063\uffcd\001\002\000" +
    "\012\030\uffcf\031\uffcf\062\uffcf\063\uffcf\001\002\000\022" +
    "\006\116\007\065\010\073\011\053\066\054\067\062\070" +
    "\050\071\060\001\002\000\032\017\140\020\137\021\216" +
    "\022\214\023\211\024\212\025\213\026\215\030\uffc6\031" +
    "\uffc6\062\uffc6\063\uffc6\001\002\000\012\030\203\031\uffd1" +
    "\062\uffd1\063\uffd1\001\002\000\006\031\201\063\200\001" +
    "\002\000\036\003\070\006\072\007\065\010\073\011\053" +
    "\046\uff98\054\074\055\052\056\056\064\uff98\066\054\067" +
    "\062\070\050\071\060\001\002\000\024\006\116\007\065" +
    "\010\073\011\053\027\174\066\054\067\062\070\050\071" +
    "\060\001\002\000\012\030\203\031\uffd2\062\uffd2\063\uffd2" +
    "\001\002\000\024\006\116\007\065\010\073\011\053\027" +
    "\174\066\054\067\062\070\050\071\060\001\002\000\012" +
    "\030\uffd0\031\uffd0\062\uffd0\063\uffd0\001\002\000\006\046" +
    "\uffe7\064\207\001\002\000\004\046\uffe6\001\002\000\034" +
    "\003\070\006\072\007\065\010\073\011\053\046\uff98\054" +
    "\074\055\052\056\056\066\054\067\062\070\050\071\060" +
    "\001\002\000\004\046\uffe5\001\002\000\022\006\116\007" +
    "\065\010\073\011\053\066\054\067\062\070\050\071\060" +
    "\001\002\000\022\006\116\007\065\010\073\011\053\066" +
    "\054\067\062\070\050\071\060\001\002\000\022\006\116" +
    "\007\065\010\073\011\053\066\054\067\062\070\050\071" +
    "\060\001\002\000\022\006\116\007\065\010\073\011\053" +
    "\066\054\067\062\070\050\071\060\001\002\000\022\006" +
    "\116\007\065\010\073\011\053\066\054\067\062\070\050" +
    "\071\060\001\002\000\022\006\116\007\065\010\073\011" +
    "\053\066\054\067\062\070\050\071\060\001\002\000\016" +
    "\017\140\020\137\030\uffcc\031\uffcc\062\uffcc\063\uffcc\001" +
    "\002\000\016\017\140\020\137\030\uffc7\031\uffc7\062\uffc7" +
    "\063\uffc7\001\002\000\016\017\140\020\137\030\uffcb\031" +
    "\uffcb\062\uffcb\063\uffcb\001\002\000\016\017\140\020\137" +
    "\030\uffc8\031\uffc8\062\uffc8\063\uffc8\001\002\000\016\017" +
    "\140\020\137\030\uffc9\031\uffc9\062\uffc9\063\uffc9\001\002" +
    "\000\016\017\140\020\137\030\uffca\031\uffca\062\uffca\063" +
    "\uffca\001\002\000\012\030\uffce\031\uffce\062\uffce\063\uffce" +
    "\001\002\000\050\005\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\001\002\000\004\012\230\001\002\000\056" +
    "\005\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\030\uffb7\031\uffb7\033\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\066\uffb7\067\uffb7\001\002\000\006\031\201\062\232" +
    "\001\002\000\004\045\233\001\002\000\034\003\070\006" +
    "\072\007\065\010\073\011\053\046\uff98\054\074\055\052" +
    "\056\056\066\054\067\062\070\050\071\060\001\002\000" +
    "\004\046\uffe3\001\002\000\022\003\236\006\116\007\065" +
    "\010\073\011\053\012\241\070\050\071\060\001\002\000" +
    "\004\012\243\001\002\000\004\012\242\001\002\000\056" +
    "\005\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\030\uffb1\031\uffb1\033\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\066\uffb1\067\uffb1\001\002\000\056\005\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae" +
    "\031\uffae\033\uffae\061\uffae\062\uffae\063\uffae\066\uffae\067" +
    "\uffae\001\002\000\056\005\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\030\uffad\031\uffad\033\uffad" +
    "\061\uffad\062\uffad\063\uffad\066\uffad\067\uffad\001\002\000" +
    "\056\005\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\030\uffac\031\uffac\033\uffac\061\uffac\062\uffac" +
    "\063\uffac\066\uffac\067\uffac\001\002\000\036\003\uff92\006" +
    "\uff92\007\uff92\010\uff92\011\uff92\046\uff92\054\uff92\055\uff92" +
    "\056\uff92\064\uff92\066\uff92\067\uff92\070\uff92\071\uff92\001" +
    "\002\000\006\012\uffe8\033\uffe8\001\002\000\022\012\uffeb" +
    "\036\027\037\037\040\036\041\032\042\033\043\041\044" +
    "\030\001\002\000\004\012\uffec\001\002\000\004\012\uffea" +
    "\001\002\000\004\046\ufff2\001\002\000\034\003\070\006" +
    "\072\007\065\010\073\011\053\046\uff98\054\074\055\052" +
    "\056\056\066\054\067\062\070\050\071\060\001\002\000" +
    "\004\046\254\001\002\000\004\002\000\001\002\000\010" +
    "\045\ufffc\057\022\060\016\001\002\000\004\045\ufffe\001" +
    "\002\000\010\045\ufffc\057\022\060\016\001\002\000\004" +
    "\045\ufffd\001\002\000\006\003\262\011\264\001\002\000" +
    "\004\005\272\001\002\000\004\046\ufff9\001\002\000\022" +
    "\012\uffeb\036\027\037\037\040\036\041\032\042\033\043" +
    "\041\044\030\001\002\000\004\012\266\001\002\000\010" +
    "\004\010\034\011\045\uffee\001\002\000\004\045\270\001" +
    "\002\000\034\003\070\006\072\007\065\010\073\011\053" +
    "\046\uff98\054\074\055\052\056\056\066\054\067\062\070" +
    "\050\071\060\001\002\000\004\046\ufff8\001\002\000\004" +
    "\046\ufff7\001\002\000\020\036\027\037\037\040\036\041" +
    "\032\042\033\043\041\044\030\001\002\000\006\033\uffd5" +
    "\035\uffd5\001\002\000\006\033\302\035\303\001\002\000" +
    "\012\004\uffdb\045\uffdb\057\uffdb\060\uffdb\001\002\000\004" +
    "\005\300\001\002\000\016\003\273\004\uffd9\006\274\045" +
    "\uffd9\057\uffd9\060\uffd9\001\002\000\012\004\uffda\045\uffda" +
    "\057\uffda\060\uffda\001\002\000\004\006\305\001\002\000" +
    "\020\036\027\037\037\040\036\041\032\042\033\043\041" +
    "\044\030\001\002\000\004\005\uffd8\001\002\000\006\033" +
    "\uffd6\035\uffd6\001\002\000\004\005\uffd7\001\002\000\010" +
    "\007\065\010\073\032\321\001\002\000\004\021\315\001" +
    "\002\000\004\005\313\001\002\000\010\045\uffe2\057\uffe2" +
    "\060\uffe2\001\002\000\014\003\307\006\310\045\uffe0\057" +
    "\uffe0\060\uffe0\001\002\000\010\045\uffe1\057\uffe1\060\uffe1" +
    "\001\002\000\010\007\065\010\073\032\317\001\002\000" +
    "\004\005\uffdf\001\002\000\004\005\uffde\001\002\000\004" +
    "\005\uffdd\001\002\000\004\005\uffdc\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\045\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\013\004\012" +
    "\040\011\001\001\000\006\010\311\011\310\001\001\000" +
    "\010\005\275\006\276\007\274\001\001\000\010\024\016" +
    "\027\017\034\020\001\001\000\004\003\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\033\025\037\047\034\050\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\043\001\001\000\010\003\013\004\012\040\044" +
    "\001\001\000\002\001\001\000\030\012\050\013\070\032" +
    "\066\033\063\035\056\036\062\037\054\041\060\042\046" +
    "\043\065\046\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\107\013\070\014\105" +
    "\015\114\016\174\017\171\020\175\021\172\023\230\035" +
    "\110\046\112\001\001\000\022\012\107\013\070\014\105" +
    "\015\114\016\111\022\226\035\110\046\112\001\001\000" +
    "\010\012\225\013\070\035\110\001\001\000\002\001\001" +
    "\000\030\012\107\013\070\014\105\015\114\016\174\017" +
    "\171\020\175\021\172\023\176\035\110\046\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\163\013\070\035\110\001\001\000\002\001\001" +
    "\000\030\012\050\013\070\032\066\033\063\035\056\036" +
    "\062\037\161\041\060\042\046\043\065\046\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\050\013" +
    "\070\032\066\033\063\035\056\036\062\037\157\041\060" +
    "\042\046\043\065\046\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\107\013\070" +
    "\014\105\015\114\016\111\022\147\035\110\046\112\001" +
    "\001\000\022\012\107\013\070\014\105\015\114\016\111" +
    "\022\146\035\110\046\112\001\001\000\022\012\107\013" +
    "\070\014\105\015\114\016\111\022\145\035\110\046\112" +
    "\001\001\000\022\012\107\013\070\014\105\015\114\016" +
    "\111\022\144\035\110\046\112\001\001\000\022\012\107" +
    "\013\070\014\105\015\114\016\111\022\113\035\110\046" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\120\013\070\035\110\052\121\053\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\120\013" +
    "\070\035\110\052\125\001\001\000\002\001\001\000\014" +
    "\012\107\013\070\014\135\035\110\046\112\001\001\000" +
    "\014\012\107\013\070\014\134\035\110\046\112\001\001" +
    "\000\014\012\107\013\070\014\133\035\110\046\112\001" +
    "\001\000\014\012\107\013\070\014\132\035\110\046\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\107\013\070\014\105" +
    "\015\141\035\110\046\112\001\001\000\016\012\107\013" +
    "\070\014\105\015\140\035\110\046\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\107\013\070\014\105\015" +
    "\114\016\111\022\151\035\110\046\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\050\013\070\032" +
    "\066\033\063\035\056\036\062\037\154\041\060\042\046" +
    "\043\065\046\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\120\013\070\035\110\052\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\012\107" +
    "\013\070\014\105\015\114\016\174\017\224\035\110\046" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\050\013\070\032\066\033\063\035" +
    "\056\036\062\037\204\041\060\042\046\043\065\046\074" +
    "\001\001\000\026\012\107\013\070\014\105\015\114\016" +
    "\174\017\171\020\201\021\172\035\110\046\112\001\001" +
    "\000\002\001\001\000\024\012\107\013\070\014\105\015" +
    "\114\016\174\017\171\021\203\035\110\046\112\001\001" +
    "\000\002\001\001\000\004\044\205\001\001\000\002\001" +
    "\001\000\030\012\050\013\070\032\066\033\063\035\056" +
    "\036\062\037\207\041\060\042\046\043\065\046\074\001" +
    "\001\000\002\001\001\000\020\012\107\013\070\014\105" +
    "\015\114\016\223\035\110\046\112\001\001\000\020\012" +
    "\107\013\070\014\105\015\114\016\222\035\110\046\112" +
    "\001\001\000\020\012\107\013\070\014\105\015\114\016" +
    "\221\035\110\046\112\001\001\000\020\012\107\013\070" +
    "\014\105\015\114\016\220\035\110\046\112\001\001\000" +
    "\020\012\107\013\070\014\105\015\114\016\217\035\110" +
    "\046\112\001\001\000\020\012\107\013\070\014\105\015" +
    "\114\016\216\035\110\046\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\050\013\070\032\066" +
    "\033\063\035\056\036\062\037\233\041\060\042\046\043" +
    "\065\046\074\001\001\000\002\001\001\000\012\012\236" +
    "\013\070\035\110\051\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\033\025\247\047\034\050\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\050\013\070\032\066\033\063\035\056\036\062" +
    "\037\252\041\060\042\046\043\065\046\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\016\027\017" +
    "\034\255\001\001\000\002\001\001\000\010\024\016\027" +
    "\017\034\257\001\001\000\002\001\001\000\004\055\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\033\025\264\047\034\050\030\001\001\000\002\001\001" +
    "\000\010\003\013\004\012\040\266\001\001\000\002\001" +
    "\001\000\030\012\050\013\070\032\066\033\063\035\056" +
    "\036\062\037\270\041\060\042\046\043\065\046\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\300\006\276\007\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\313\011\310" +
    "\001\001\000\002\001\001\000\004\013\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_END ::= error END 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN SENTENCIA IF, WHILE O FOR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_END ::= ESTR_IF END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_END ::= ESTR_WHILE END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_END ::= ESTR_FOR END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_PUNTOYCOMA ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN SENTENCIA ASIGNACION, LLAMADA A FUNCION O EXPRESION"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_PUNTOYCOMA ::= LLAMADA_FUNCION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_PUNTOYCOMA ::= INC_DEC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_PUNTOYCOMA ::= ASIGNACION PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIAS ::= SENTENCIA_END SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIAS ::= SENTENCIA_PUNTOYCOMA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ASIGNACION ::= IDENTIFICADOR OprASIG_DIV EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIGNACION ::= IDENTIFICADOR OprASIG_MUL EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACION ::= IDENTIFICADOR OprASIG_RESTA EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNACION ::= IDENTIFICADOR OprASIG_MAS EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGNACION ::= IDENTIFICADOR OprASIGNACION EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO ::= TYPE_REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO ::= TYPE_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO ::= TYPE_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO ::= TYPE_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO ::= TYPE_SHORTINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= TYPE_LONGINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= TYPE_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROS_NO_VACIOS ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROS_NO_VACIOS ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETROS_NO_VACIOS ::= TERMINO COMA PARAMETROS_NO_VACIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_NO_VACIOS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETROS ::= PARAMETROS_NO_VACIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMETRO_READ ::= error PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: La funcion solo acepta 1 parámetro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETRO_READ ::= TERMINO PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETRO_READ ::= PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_READ",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LLAMADA_FUNCION ::= IDENTIFICADOR PARENTESIS_ABRE PARAMETROS PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LLAMADA_FUNCION ::= WRITE PARENTESIS_ABRE PARAMETROS_NO_VACIOS PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LLAMADA_FUNCION ::= READ PARENTESIS_ABRE PARAMETRO_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NUMERO ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NUMERO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TERMINO ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TERMINO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TERMINO ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TERMINO ::= PARENTESIS_ABRE EXP PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INC_DEC ::= TERMINO Op_DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INC_DEC ::= TERMINO Op_INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INC_DEC ::= Op_DEC TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INC_DEC ::= Op_INC TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DEC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // UNARIO ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // UNARIO ::= INC_DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MULTIPLICATIVOS ::= UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_MOD UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_DIV UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpDIV UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpMUL UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ADITIVOS ::= MULTIPLICATIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ADITIVOS ::= ADITIVOS OpRESTA MULTIPLICATIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ADITIVOS ::= ADITIVOS OpSUMA MULTIPLICATIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND_REL ::= ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND_REL ::= ADITIVOS OpDIFERENTE ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND_REL ::= ADITIVOS OpMENOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND_REL ::= ADITIVOS OpMENOR ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND_REL ::= ADITIVOS OpMAYOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND_REL ::= ADITIVOS OpMAYOR ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND_REL ::= ADITIVOS OpIGUAL ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND_NOT ::= COND_REL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND_NOT ::= OpNOT COND_REL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND_AND ::= COND_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COND_AND ::= COND_AND OpAND COND_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= COND_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= CONDICION OpOR COND_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IDENTIFICADORES ::= IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARIABLE ::= error TIPO 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE VARIABLE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIABLE ::= IDENTIFICADORES DOS_PUNTOS TIPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLES ::= VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARIABLES ::= VARIABLE PUNTOYCOMA VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARAR_VARIABLES ::= VAR VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONSTANTE ::= error STRING 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONSTANTE ::= error NUMERO 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN DECLARACION DE CONSTANTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONSTANTE ::= IDENTIFICADOR OpIGUAL STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONSTANTE ::= IDENTIFICADOR OpIGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONSTANTES ::= CONSTANTE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONSTANTES ::= CONSTANTE PUNTOYCOMA CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARAR_CONSTANTES ::= CONST CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONSTANTES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ESTR_WHILE ::= WHILE CONDICION DO BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_WHILE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESTR_FOR ::= FOR ASIGNACION TO EXP DO BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_FOR",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESTR_ELSE ::= ELSE SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_ELSE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESTR_IF ::= IF CONDICION THEN SENTENCIAS ESTR_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_IF",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ESTR_IF ::= IF CONDICION THEN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_IF",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGUMENTO ::= TIPO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGUMENTOS_P ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGUMENTOS_P ::= COMA ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGUMENTOS_NO_VACIO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_NO_VACIO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGUMENTOS_NO_VACIO ::= ARGUMENTO ARGUMENTOS_P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_NO_VACIO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARGUMENTOS ::= ARGUMENTOS_NO_VACIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE_DECLARACIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUE_DECLARACIONES ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION_BLOQUE ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN FUNCION"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_BLOQUE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_BLOQUE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= FUNCTION IDENTIFICADOR FUNCION_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONES ::= FUNCION END FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDIMIENTO_BLOQUE ::= error PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN PROCEDIMIENTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_BLOQUE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDIMIENTO_BLOQUE ::= PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_BLOQUE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTO ::= PROCEDURE IDENTIFICADOR PROCEDIMIENTO_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDIMIENTOS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDIMIENTOS ::= PROCEDIMIENTO END PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= FUNCION END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE_FUNCIONES_PROCEDIMIENTOS ::= PROCEDIMIENTO END BLOQUE_FUNCIONES_PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCIONES_PROCEDIMIENTOS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTRUCTURA_PROGRAMA ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico: ERROR EN PROGRAMA, FALTA UN BEGIN O END"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROGRAMA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ESTRUCTURA_PROGRAMA ::= PROGRAM IDENTIFICADOR BLOQUE_DECLARACIONES BLOQUE_FUNCIONES_PROCEDIMIENTOS BEGIN SENTENCIAS END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROGRAMA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ESTRUCTURA_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

