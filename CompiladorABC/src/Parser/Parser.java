
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 02 23:12:20 CST 2018
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 02 23:12:20 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\032\005\000\002\032\002\000\002\031\013\000" +
    "\002\030\005\000\002\030\002\000\002\026\014\000\002" +
    "\041\004\000\002\041\004\000\002\041\003\000\002\041" +
    "\003\000\002\027\005\000\002\033\004\000\002\033\002" +
    "\000\002\042\011\000\002\043\007\000\002\004\004\000" +
    "\002\011\005\000\002\011\004\000\002\012\005\000\002" +
    "\012\005\000\002\005\004\000\002\006\005\000\002\006" +
    "\004\000\002\007\005\000\002\010\005\000\002\010\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\022\005\000\002\022\003\000\002" +
    "\023\004\000\002\023\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\003\000\002\013\005" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\036\006\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\002\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\016\002\ufffa\004\017\036\011\056\006\057" +
    "\005\062\010\001\002\000\004\002\000\001\002\000\020" +
    "\006\123\007\031\010\026\011\112\013\114\014\120\031" +
    "\176\001\002\000\004\006\102\001\002\000\004\002\100" +
    "\001\002\000\004\006\057\001\002\000\004\006\036\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffe\001\002" +
    "\000\004\050\035\001\002\000\004\050\033\001\002\000" +
    "\004\050\032\001\002\000\004\006\020\001\002\000\004" +
    "\023\025\001\002\000\004\005\023\001\002\000\010\002" +
    "\uffec\036\uffec\047\uffec\001\002\000\012\002\uffea\006\020" +
    "\036\uffea\047\uffea\001\002\000\010\002\uffeb\036\uffeb\047" +
    "\uffeb\001\002\000\010\007\031\010\026\034\030\001\002" +
    "\000\046\005\uffc3\012\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\032\uffc3\033\uffc3\063\uffc3\064\uffc3\001" +
    "\002\000\004\005\uffe9\001\002\000\004\005\uffe8\001\002" +
    "\000\046\005\uffc4\012\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\032\uffc4\033\uffc4\063\uffc4\064\uffc4\001" +
    "\002\000\004\002\ufffc\001\002\000\006\002\ufffa\062\010" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\ufffd\001" +
    "\002\000\010\012\uffe2\035\uffe2\037\uffe2\001\002\000\006" +
    "\035\044\037\045\001\002\000\010\002\uffe7\004\uffe7\047" +
    "\uffe7\001\002\000\004\005\042\001\002\000\012\002\uffe5" +
    "\004\uffe5\006\036\047\uffe5\001\002\000\010\002\uffe6\004" +
    "\uffe6\047\uffe6\001\002\000\004\006\056\001\002\000\020" +
    "\040\053\041\050\042\051\043\054\044\046\045\052\046" +
    "\047\001\002\000\006\005\uffbd\006\uffbd\001\002\000\006" +
    "\005\uffbb\006\uffbb\001\002\000\006\005\uffc0\006\uffc0\001" +
    "\002\000\006\005\uffbf\006\uffbf\001\002\000\006\005\uffbc" +
    "\006\uffbc\001\002\000\006\005\uffc1\006\uffc1\001\002\000" +
    "\006\005\uffbe\006\uffbe\001\002\000\004\005\uffe4\001\002" +
    "\000\010\012\uffe3\035\uffe3\037\uffe3\001\002\000\004\011" +
    "\060\001\002\000\020\040\053\041\050\042\051\043\054" +
    "\044\046\045\052\046\047\001\002\000\004\006\074\001" +
    "\002\000\004\012\063\001\002\000\006\004\017\036\011" +
    "\001\002\000\004\047\071\001\002\000\006\004\017\047" +
    "\ufff3\001\002\000\006\036\011\047\ufff2\001\002\000\004" +
    "\047\ufff4\001\002\000\004\047\ufff5\001\002\000\002\001" +
    "\002\000\004\050\073\001\002\000\004\050\ufff9\001\002" +
    "\000\006\012\uffef\035\075\001\002\000\020\040\053\041" +
    "\050\042\051\043\054\044\046\045\052\046\047\001\002" +
    "\000\004\012\ufff1\001\002\000\004\012\ufff0\001\002\000" +
    "\004\002\001\001\002\000\004\063\153\001\002\000\014" +
    "\051\103\052\105\053\106\054\107\055\104\001\002\000" +
    "\020\006\123\007\031\010\026\011\112\013\114\014\120" +
    "\034\111\001\002\000\020\006\123\007\031\010\026\011" +
    "\112\013\114\014\120\034\111\001\002\000\020\006\123" +
    "\007\031\010\026\011\112\013\114\014\120\034\111\001" +
    "\002\000\020\006\123\007\031\010\026\011\112\013\114" +
    "\014\120\034\111\001\002\000\020\006\123\007\031\010" +
    "\026\011\112\013\114\014\120\034\111\001\002\000\046" +
    "\005\uffcc\012\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\032\uffcc\033\uffcc\063\uffcc\064\uffcc\001\002\000" +
    "\012\005\uffe0\012\uffe0\063\uffe0\064\uffe0\001\002\000\020" +
    "\006\123\007\031\010\026\011\112\013\114\014\120\034" +
    "\111\001\002\000\046\005\uffc7\012\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\063\uffc7" +
    "\064\uffc7\001\002\000\012\006\123\007\031\010\026\011" +
    "\112\001\002\000\046\005\uffc9\012\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\063\uffc9" +
    "\064\uffc9\001\002\000\016\005\uffe1\012\uffe1\021\141\022" +
    "\140\063\uffe1\064\uffe1\001\002\000\046\005\uffc5\012\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5" +
    "\033\uffc5\063\uffc5\064\uffc5\001\002\000\012\006\123\007" +
    "\031\010\026\011\112\001\002\000\006\005\uffb7\063\uffb7" +
    "\001\002\000\046\005\uffd1\012\uffd1\015\127\016\130\017" +
    "\132\020\131\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\063\uffd1\064" +
    "\uffd1\001\002\000\050\005\uffc6\011\124\012\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6" +
    "\063\uffc6\064\uffc6\001\002\000\004\006\036\001\002\000" +
    "\006\012\126\035\044\001\002\000\046\005\uffc2\012\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\032\uffc2" +
    "\033\uffc2\063\uffc2\064\uffc2\001\002\000\016\006\123\007" +
    "\031\010\026\011\112\013\114\014\120\001\002\000\016" +
    "\006\123\007\031\010\026\011\112\013\114\014\120\001" +
    "\002\000\016\006\123\007\031\010\026\011\112\013\114" +
    "\014\120\001\002\000\016\006\123\007\031\010\026\011" +
    "\112\013\114\014\120\001\002\000\046\005\uffce\012\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032\uffce" +
    "\033\uffce\063\uffce\064\uffce\001\002\000\046\005\uffcd\012" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\063\uffcd\064\uffcd\001\002\000\046\005\uffcf" +
    "\012\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\063\uffcf\064\uffcf\001\002\000\046\005" +
    "\uffd0\012\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\032\uffd0\033\uffd0\063\uffd0\064\uffd0\001\002\000\046" +
    "\005\uffca\012\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\032\uffca\033\uffca\063\uffca\064\uffca\001\002\000" +
    "\016\006\123\007\031\010\026\011\112\013\114\014\120" +
    "\001\002\000\016\006\123\007\031\010\026\011\112\013" +
    "\114\014\120\001\002\000\046\005\uffd3\012\uffd3\015\127" +
    "\016\130\017\132\020\131\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3\033\uffd3" +
    "\063\uffd3\064\uffd3\001\002\000\046\005\uffd2\012\uffd2\015" +
    "\127\016\130\017\132\020\131\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\032\uffd2\033" +
    "\uffd2\063\uffd2\064\uffd2\001\002\000\046\005\uffcb\012\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb" +
    "\033\uffcb\063\uffcb\064\uffcb\001\002\000\004\012\146\001" +
    "\002\000\046\005\uffc8\012\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8\063\uffc8\064\uffc8" +
    "\001\002\000\006\005\uffb8\063\uffb8\001\002\000\006\005" +
    "\uffb9\063\uffb9\001\002\000\006\005\uffb6\063\uffb6\001\002" +
    "\000\006\005\uffba\063\uffba\001\002\000\020\006\123\007" +
    "\031\010\026\011\112\013\114\014\120\034\111\001\002" +
    "\000\004\064\155\001\002\000\004\047\156\001\002\000" +
    "\016\005\165\006\170\050\uffb3\056\006\057\005\060\161" +
    "\001\002\000\004\050\uffee\001\002\000\004\005\173\001" +
    "\002\000\004\050\uffad\001\002\000\004\050\uffaf\001\002" +
    "\000\004\005\uffb2\001\002\000\004\005\uffb0\001\002\000" +
    "\004\005\uffb1\001\002\000\004\050\171\001\002\000\004" +
    "\050\uffae\001\002\000\016\011\124\051\103\052\105\053" +
    "\106\054\107\055\104\001\002\000\016\005\165\006\170" +
    "\050\uffb3\056\006\057\005\060\161\001\002\000\004\050" +
    "\uffb4\001\002\000\016\005\165\006\170\050\uffb3\056\006" +
    "\057\005\060\161\001\002\000\004\050\uffb5\001\002\000" +
    "\010\032\206\033\uffde\064\uffde\001\002\000\016\006\123" +
    "\007\031\010\026\011\112\013\114\014\120\001\002\000" +
    "\010\032\uffda\033\uffda\064\uffda\001\002\000\022\021\141" +
    "\022\140\023\217\024\215\025\213\026\214\027\212\030" +
    "\216\001\002\000\010\032\uffdc\033\uffdc\064\uffdc\001\002" +
    "\000\006\033\204\064\203\001\002\000\004\047\210\001" +
    "\002\000\020\006\123\007\031\010\026\011\112\013\114" +
    "\014\120\031\176\001\002\000\010\032\206\033\uffdf\064" +
    "\uffdf\001\002\000\020\006\123\007\031\010\026\011\112" +
    "\013\114\014\120\031\176\001\002\000\010\032\uffdd\033" +
    "\uffdd\064\uffdd\001\002\000\016\005\165\006\170\050\uffb3" +
    "\056\006\057\005\060\161\001\002\000\004\050\uffed\001" +
    "\002\000\016\006\123\007\031\010\026\011\112\013\114" +
    "\014\120\001\002\000\016\006\123\007\031\010\026\011" +
    "\112\013\114\014\120\001\002\000\016\006\123\007\031" +
    "\010\026\011\112\013\114\014\120\001\002\000\016\006" +
    "\123\007\031\010\026\011\112\013\114\014\120\001\002" +
    "\000\016\006\123\007\031\010\026\011\112\013\114\014" +
    "\120\001\002\000\016\006\123\007\031\010\026\011\112" +
    "\013\114\014\120\001\002\000\014\021\141\022\140\032" +
    "\uffd9\033\uffd9\064\uffd9\001\002\000\014\021\141\022\140" +
    "\032\uffd4\033\uffd4\064\uffd4\001\002\000\014\021\141\022" +
    "\140\032\uffd8\033\uffd8\064\uffd8\001\002\000\014\021\141" +
    "\022\140\032\uffd6\033\uffd6\064\uffd6\001\002\000\014\021" +
    "\141\022\140\032\uffd7\033\uffd7\064\uffd7\001\002\000\014" +
    "\021\141\022\140\032\uffd5\033\uffd5\064\uffd5\001\002\000" +
    "\010\032\uffdb\033\uffdb\064\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\020\003\006\004\012\005\011\031\014\032" +
    "\003\042\013\043\015\001\001\000\002\001\001\000\026" +
    "\013\114\014\112\015\107\016\121\017\177\020\176\022" +
    "\174\023\200\025\201\036\116\001\001\000\004\037\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\037\007\040\010\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\021\012\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\023\012" +
    "\020\001\001\000\002\001\001\000\004\014\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\014\032\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\042\007\040\010\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\060\027\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\065\005\064\041\063\001\001\000" +
    "\002\001\001\000\004\004\067\001\001\000\004\005\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\075\001\001\000\006\002\060\027\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\114\014\112\015" +
    "\107\016\121\017\115\024\151\036\116\001\001\000\020" +
    "\013\114\014\112\015\107\016\121\017\115\024\150\036" +
    "\116\001\001\000\020\013\114\014\112\015\107\016\121" +
    "\017\115\024\147\036\116\001\001\000\020\013\114\014" +
    "\112\015\107\016\121\017\115\024\146\036\116\001\001" +
    "\000\020\013\114\014\112\015\107\016\121\017\115\024" +
    "\120\036\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\114\014\112\015\107\016\121\017\115\024" +
    "\144\036\116\001\001\000\002\001\001\000\010\013\143" +
    "\014\112\036\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\136\014\112\036\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\114\014\112\015\135\036\116\001" +
    "\001\000\012\013\114\014\112\015\134\036\116\001\001" +
    "\000\012\013\114\014\112\015\133\036\116\001\001\000" +
    "\012\013\114\014\112\015\132\036\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\114\014\112\015\107" +
    "\016\142\036\116\001\001\000\014\013\114\014\112\015" +
    "\107\016\141\036\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\114\014\112\015\107\016" +
    "\121\017\115\024\153\036\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\034\157\035\165\036\163\037" +
    "\162\040\156\042\161\043\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\034" +
    "\157\035\165\036\163\037\162\040\171\042\161\043\166" +
    "\001\001\000\002\001\001\000\020\034\157\035\165\036" +
    "\163\037\162\040\173\042\161\043\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\114\014\112\015" +
    "\107\016\121\017\177\020\225\036\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\114\014\112\015\107" +
    "\016\121\017\177\020\176\022\204\023\200\036\116\001" +
    "\001\000\002\001\001\000\022\013\114\014\112\015\107" +
    "\016\121\017\177\020\176\023\206\036\116\001\001\000" +
    "\002\001\001\000\020\034\157\035\165\036\163\037\162" +
    "\040\210\042\161\043\166\001\001\000\002\001\001\000" +
    "\016\013\114\014\112\015\107\016\121\017\224\036\116" +
    "\001\001\000\016\013\114\014\112\015\107\016\121\017" +
    "\223\036\116\001\001\000\016\013\114\014\112\015\107" +
    "\016\121\017\222\036\116\001\001\000\016\013\114\014" +
    "\112\015\107\016\121\017\221\036\116\001\001\000\016" +
    "\013\114\014\112\015\107\016\121\017\220\036\116\001" +
    "\001\000\016\013\114\014\112\015\107\016\121\017\217" +
    "\036\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_END ::= IF 
            {
              Object RESULT =null;
		 System.out.println(" sentencia end 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_END ::= ESTR_WHILE 
            {
              Object RESULT =null;
		 System.out.println(" sentencia end 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_END ::= ESTR_FOR 
            {
              Object RESULT =null;
		 System.out.println(" sentencia end 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_END",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_PUNTOYCOMA ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_PUNTOYCOMA ::= PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_PUNTOYCOMA ::= ASIGNACION 
            {
              Object RESULT =null;
		 System.out.println(" sentencia 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUNTOYCOMA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIAS ::= SENTENCIA_END END SENTENCIAS 
            {
              Object RESULT =null;
		 System.out.println(" sentencias 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS ::= SENTENCIA_PUNTOYCOMA PUNTOYCOMA SENTENCIAS 
            {
              Object RESULT =null;
		 System.out.println(" sentencias 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= IDENTIFICADOR OprASIG_DIV EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= IDENTIFICADOR OprASIG_MUL EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= IDENTIFICADOR OprASIG_RESTA EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= IDENTIFICADOR OprASIG_MAS EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= IDENTIFICADOR OprASIGNACION EXP 
            {
              Object RESULT =null;
		 System.out.println(" asignacion 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= TYPE_REAL 
            {
              Object RESULT =null;
		 System.out.println(" tipo 7 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= TYPE_BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println(" tipo 6 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= TYPE_STRING 
            {
              Object RESULT =null;
		 System.out.println(" tipo 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= TYPE_CHAR 
            {
              Object RESULT =null;
		 System.out.println(" tipo 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= TYPE_SHORTINT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= TYPE_LONGINT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= TYPE_INT 
            {
              Object RESULT =null;
		 System.out.println(" tipo 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LLAMADA_FUNCION ::= IDENTIFICADOR PARENTESIS_ABRE IDENTIFICADORES PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println(" funcion "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NUMERO ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println(" numero 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NUMERO ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println(" numero 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMERO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TERMINO ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;
		 System.out.println(" termino 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TERMINO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" termino 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TERMINO ::= NUMERO 
            {
              Object RESULT =null;
		 System.out.println(" termino 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TERMINO ::= PARENTESIS_ABRE EXP PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 System.out.println(" termino 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // UNARIO ::= TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // UNARIO ::= OpDEC TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // UNARIO ::= OpINC TERMINO 
            {
              Object RESULT =null;
		 System.out.println(" unario 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MULTIPLICATIVOS ::= UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_MOD UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MULTIPLICATIVOS ::= MULTIPLICATIVOS Op_DIV UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpDIV UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MULTIPLICATIVOS ::= MULTIPLICATIVOS OpMUL UNARIO 
            {
              Object RESULT =null;
		 System.out.println(" multiplicativos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTIPLICATIVOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ADITIVOS ::= MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ADITIVOS ::= ADITIVOS OpRESTA MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ADITIVOS ::= ADITIVOS OpSUMA MULTIPLICATIVOS 
            {
              Object RESULT =null;
		 System.out.println(" aditivos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADITIVOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND_REL ::= ADITIVOS OpDIFERENTE ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 6 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND_REL ::= ADITIVOS OpMENOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 5 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND_REL ::= ADITIVOS OpMENOR ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 4 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND_REL ::= ADITIVOS OpMAYOR_IGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 3 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND_REL ::= ADITIVOS OpMAYOR ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND_REL ::= ADITIVOS OpIGUAL ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" cond_rel 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_REL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND_NOT ::= COND_REL 
            {
              Object RESULT =null;
		 System.out.println(" cond_not 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND_NOT ::= Op_NOT COND_REL 
            {
              Object RESULT =null;
		 System.out.println(" cond_not 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_NOT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COND_AND ::= COND_NOT 
            {
              Object RESULT =null;
		 System.out.println(" cond_and 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COND_AND ::= COND_AND Op_AND COND_NOT 
            {
              Object RESULT =null;
		 System.out.println(" cond_and 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_AND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= COND_AND 
            {
              Object RESULT =null;
		 System.out.println(" condicion 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= CONDICION Op_OR COND_AND 
            {
              Object RESULT =null;
		 System.out.println(" condicion 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= STRING 
            {
              Object RESULT =null;
		 System.out.println(" exp 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= ADITIVOS 
            {
              Object RESULT =null;
		 System.out.println(" exp 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" identificadores 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IDENTIFICADORES ::= IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.println(" identificadores 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARIABLE ::= IDENTIFICADORES DOS_PUNTOS TIPO 
            {
              Object RESULT =null;
		 System.out.println(" variable "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARIABLES ::= VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIABLES ::= VARIABLE PUNTOYCOMA VARIABLES 
            {
              Object RESULT =null;
		 System.out.println(" variables 2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARAR_VARIABLES ::= VAR VARIABLES 
            {
              Object RESULT =null;
		 System.out.println(" declarar_variables1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONSTANTE ::= IDENTIFICADOR OpIGUAL STRING 
            {
              Object RESULT =null;
		 System.out.println("constante"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONSTANTE ::= IDENTIFICADOR OpIGUAL NUMERO 
            {
              Object RESULT =null;
		 System.out.println("constante"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONSTANTES ::= CONSTANTE PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println(" constantes 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONSTANTES ::= CONSTANTE PUNTOYCOMA CONSTANTES 
            {
              Object RESULT =null;
		 System.out.println(" constantes 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARAR_CONSTANTES ::= CONST CONSTANTES 
            {
              Object RESULT =null;
		 System.out.println(" declarar_constantes "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONSTANTES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTR_WHILE ::= WHILE CONDICION DO BEGIN SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_WHILE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTR_FOR ::= FOR ASIGNACION TO EXP DO BEGIN SENTENCIAS 
            {
              Object RESULT =null;
		 System.out.println(" BE  1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTR_FOR",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGUMENTOS_P ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGUMENTOS_P ::= COMA ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_P",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGUMENTOS ::= TIPO IDENTIFICADOR ARGUMENTOS_P 
            {
              Object RESULT =null;
		 System.out.println(" argumentos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_DECLARACIONES ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_DECLARACIONES ::= DECLARAR_CONSTANTES DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_DECLARACIONES ::= DECLARAR_VARIABLES DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= FUNCTION IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA DOS_PUNTOS TIPO BLOQUE_DECLARACIONES BEGIN SENTENCIAS 
            {
              Object RESULT =null;
		 System.out.println(" funcion "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES ::= 
            {
              Object RESULT =null;
		 System.out.println(" funciones 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= FUNCION END FUNCIONES 
            {
              Object RESULT =null;
		 System.out.println(" funciones 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTO ::= PROCEDURE IDENTIFICADOR PARENTESIS_ABRE ARGUMENTOS PARENTESIS_CIERRA BLOQUE_DECLARACIONES BEGIN SENTENCIA END 
            {
              Object RESULT =null;
		 System.out.println(" procedimiento "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDIMIENTOS ::= 
            {
              Object RESULT =null;
		 System.out.println(" procedimiento 2 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDIMIENTOS ::= PROCEDIMIENTO END PROCEDIMIENTOS 
            {
              Object RESULT =null;
		 System.out.println(" procedimientos 1 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TEMPORAL ::= ESTR_WHILE END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TEMPORAL ::= ESTR_FOR END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TEMPORAL ::= DECLARAR_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TEMPORAL ::= DECLARAR_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TEMPORAL ::= PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEMPORAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TEMPORAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

