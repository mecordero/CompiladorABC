/* The following code was generated by JFlex 1.6.1 */

package Scanner;

import Clases.Tipo_token;
import static Clases.Tipo_token.*;
import Clases.ScannerException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/yanil/Google Drive/IIS.2018/COMPILADORES/PROYECTO/CompiladorABC/CompiladorABC/src/Scanner/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\64\1\64\1\4\22\0\1\55\1\44\1\43"+
    "\1\45\3\44\1\0\1\62\1\62\1\6\1\53\1\56\1\50\1\54"+
    "\1\5\1\47\10\2\1\51\1\63\1\56\1\61\1\57\1\60\1\0"+
    "\1\44\1\11\1\16\1\26\1\13\1\17\1\34\1\20\1\31\1\22"+
    "\1\1\1\41\1\24\1\36\1\12\1\23\1\37\1\1\1\14\1\30"+
    "\1\25\1\35\1\32\1\33\1\42\1\15\1\1\1\46\1\0\1\52"+
    "\3\44\1\11\1\16\1\26\1\13\1\17\1\34\1\20\1\31\1\22"+
    "\1\1\1\41\1\24\1\36\1\12\1\23\1\37\1\1\1\14\1\30"+
    "\1\25\1\35\1\32\1\33\1\42\1\15\1\1\1\7\1\44\1\10"+
    "\1\44\6\0\1\64\252\0\2\21\115\0\1\27\u1ea8\0\1\64\1\64"+
    "\u0100\0\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\2\5\1\2\7\3"+
    "\1\2\5\3\1\2\10\3\2\2\7\5\3\1\1\6"+
    "\1\4\2\0\2\3\1\0\2\3\1\0\1\3\1\7"+
    "\6\3\4\7\6\3\3\0\4\3\1\0\3\3\1\0"+
    "\6\3\1\0\1\10\1\0\1\11\1\0\1\6\1\12"+
    "\1\13\10\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\2\0\1\3\1\7\4\3\1\0\1\13\1\12\3\3"+
    "\1\0\1\3\1\0\2\3\2\0\4\3\1\0\3\3"+
    "\2\0\1\14\1\3\1\0\1\3\2\0\2\3\1\0"+
    "\2\3\1\0\1\13\1\0\3\3\1\0\1\3\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\65\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\65"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u013e\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\65\0\u0bcd\0\152"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u0601\0\u0601\0\u10fa\0\u06d5\0\u112f\0\u1164\0\u112f\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691"+
    "\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u1164\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\u1b89\0\u1bbe\0\u1bf3\0\65\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7"+
    "\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f"+
    "\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\3\1\30\1\31\1\32\1\33\1\34\1\35\1\2"+
    "\1\3\1\36\1\37\1\2\1\40\1\41\1\4\1\42"+
    "\1\4\1\41\1\43\1\44\1\5\2\41\1\45\1\46"+
    "\1\41\1\47\67\0\2\3\2\0\2\50\2\0\10\3"+
    "\1\0\5\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\1\51\1\52\6\0\10\51\1\0\5\51"+
    "\1\0\10\51\1\0\2\51\4\0\1\52\1\0\1\52"+
    "\2\0\1\53\15\0\1\54\51\0\1\41\6\0\4\55"+
    "\1\0\1\5\2\0\10\55\1\0\5\55\1\0\10\55"+
    "\1\0\2\55\4\0\1\55\1\0\1\55\3\0\1\55"+
    "\1\0\1\41\6\0\4\56\3\0\1\5\10\56\1\0"+
    "\5\56\1\0\10\56\1\0\2\56\4\0\1\56\1\0"+
    "\1\56\3\0\1\56\10\0\2\3\2\0\2\50\2\0"+
    "\1\3\1\57\1\3\1\60\4\3\1\0\5\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\10\3\1\61\1\62\1\63\3\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\10\3\1\64\1\65\1\66"+
    "\3\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\6\3\1\67\1\3"+
    "\1\0\5\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\4\3\1\70"+
    "\1\3\1\71\1\3\1\0\1\3\1\72\3\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\1\3\1\57\6\3\1\0\2\3"+
    "\1\73\2\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\10\3\1\0"+
    "\1\3\1\74\3\3\1\0\10\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\15\0\1\75\21\0\1\76\31\0\2\3"+
    "\2\0\2\50\2\0\1\3\1\77\6\3\1\0\5\3"+
    "\1\0\4\3\1\100\3\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\3\3\1\100"+
    "\4\3\1\0\5\3\1\0\4\3\1\100\3\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\4\0\2\3\2\0\2\50"+
    "\2\0\1\101\7\3\1\0\1\3\1\102\3\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\3\3\1\103\1\104\3\3\1\0"+
    "\1\3\1\100\3\3\1\0\1\3\1\105\6\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\4\0\2\3\2\0\2\50"+
    "\2\0\1\73\7\3\1\0\1\3\1\106\3\3\1\0"+
    "\1\3\1\30\6\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\22\0\1\107\5\0\1\110\3\0\1\111\34\0\2\3"+
    "\2\0\2\50\2\0\6\3\1\63\1\3\1\0\3\3"+
    "\1\112\1\3\1\0\1\3\1\113\6\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\1\114\7\3\1\0\5\3\1\0\10\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\3\3\1\115\4\3\1\116\1\117\4\3\1\0\1\3"+
    "\1\120\6\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\1\121\7\3\1\122\1\123"+
    "\1\124\3\3\1\0\5\3\1\125\2\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\1\3\1\126\6\3\1\0\5\3\1\0\10\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\4\0\2\3\2\0\2\50"+
    "\2\0\10\3\1\0\1\3\1\57\3\3\1\0\10\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\4\0\2\3\2\0"+
    "\2\50\2\0\1\127\2\3\1\130\4\3\1\0\5\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\10\3\1\0\1\3\1\114"+
    "\3\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\6\131\2\0\10\131\1\0\5\131\1\0\10\131"+
    "\1\0\2\131\1\132\2\131\1\0\3\131\2\0\3\131"+
    "\1\0\2\131\51\0\1\133\66\0\1\41\6\0\1\41"+
    "\60\0\1\41\3\0\1\41\7\0\1\134\44\0\1\134"+
    "\1\0\1\134\72\0\1\41\1\47\63\0\2\41\1\47"+
    "\62\0\1\41\6\0\2\51\6\0\10\51\1\0\5\51"+
    "\1\0\10\51\1\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\1\135\11\0\1\51\1\52\6\0\10\51\1\0"+
    "\5\51\1\0\10\51\1\0\2\51\4\0\1\52\1\0"+
    "\1\52\2\0\1\136\11\0\1\137\1\140\6\0\10\137"+
    "\1\0\5\137\1\0\10\137\1\0\2\137\4\0\1\140"+
    "\1\0\1\140\14\0\3\54\5\0\10\54\1\0\5\54"+
    "\1\0\10\54\1\0\2\54\4\0\1\54\1\0\1\54"+
    "\3\0\1\54\10\0\4\55\1\0\1\5\2\0\10\55"+
    "\1\0\5\55\1\0\10\55\1\0\2\55\4\0\1\55"+
    "\1\0\1\55\3\0\1\55\10\0\2\3\2\0\2\50"+
    "\2\0\2\3\1\100\5\3\1\0\5\3\1\0\10\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\4\0\2\3\2\0"+
    "\2\50\2\0\3\3\1\141\4\3\1\0\5\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\27\0\1\76"+
    "\41\0\2\3\2\0\2\50\2\0\10\3\1\0\2\3"+
    "\1\100\2\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\10\3\1\0"+
    "\3\3\1\100\1\3\1\0\10\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\35\0\1\76\33\0\2\3\2\0\2\50"+
    "\2\0\10\3\1\0\5\3\1\0\2\3\1\100\5\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\4\0\2\3\2\0"+
    "\2\50\2\0\10\3\1\0\5\3\1\0\3\3\1\142"+
    "\4\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\1\143\7\3\1\0\4\3\1\144"+
    "\1\0\7\3\1\145\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\10\3\1\0\3\3"+
    "\1\146\1\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\7\3\1\147"+
    "\1\0\5\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\10\3\1\0"+
    "\1\3\1\150\3\3\1\0\10\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\4\0\2\3\2\0\2\50\2\0\10\3"+
    "\1\0\5\3\1\151\1\146\7\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\4\0\2\3\2\0\2\50\2\0\10\3"+
    "\1\0\3\3\1\152\1\3\1\0\10\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\27\0\1\153\1\76\40\0\2\3"+
    "\2\0\2\50\2\0\10\3\1\0\2\3\1\154\1\100"+
    "\1\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\5\3\1\155\2\3"+
    "\1\0\5\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\1\3\1\156"+
    "\6\3\1\0\5\3\1\0\10\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\4\0\2\3\2\0\2\50\2\0\10\3"+
    "\1\0\5\3\1\0\5\3\1\146\2\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\10\3\1\0\5\3\1\0\7\3\1\146\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\6\3\1\157\1\3\1\0\5\3\1\0\10\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\4\0\2\3\2\0\2\50"+
    "\2\0\1\3\1\160\6\3\1\0\5\3\1\0\10\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\30\0\1\76\53\0"+
    "\1\161\73\0\1\162\42\0\2\3\2\0\2\50\2\0"+
    "\3\3\1\163\4\3\1\0\5\3\1\0\10\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\4\0\2\3\2\0\2\50"+
    "\2\0\10\3\1\0\1\3\1\164\3\3\1\0\10\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\4\0\2\3\2\0"+
    "\2\50\2\0\3\3\1\100\4\3\1\0\5\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\10\3\1\165\1\70\4\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\30\0\1\166"+
    "\40\0\2\3\2\0\2\50\2\0\10\3\1\0\3\3"+
    "\1\167\1\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\10\3\1\122"+
    "\1\123\4\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\10\3\1\0"+
    "\2\3\1\73\2\3\1\0\10\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\27\0\1\151\41\0\2\3\2\0\2\50"+
    "\2\0\10\3\1\0\2\3\1\146\2\3\1\0\10\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\4\0\2\3\2\0"+
    "\2\50\2\0\3\3\1\170\4\3\1\0\5\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\1\3\1\171\6\3\1\0\5\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\10\3\1\0\3\3\1\172"+
    "\1\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\10\3\1\0\4\3"+
    "\1\173\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\10\3\1\0\1\3"+
    "\1\174\3\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\52\0\1\175\16\0\2\137\6\0\10\137\1\0"+
    "\5\137\1\0\10\137\1\0\2\137\4\0\1\137\1\0"+
    "\1\137\14\0\1\137\1\176\6\0\10\137\1\0\5\137"+
    "\1\0\10\137\1\0\2\137\4\0\1\176\1\0\1\176"+
    "\14\0\1\137\1\140\6\0\6\137\1\177\1\137\1\0"+
    "\5\137\1\0\10\137\1\0\2\137\4\0\1\140\1\0"+
    "\1\140\14\0\2\3\2\0\2\50\2\0\1\200\7\3"+
    "\1\0\5\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\1\3\1\74"+
    "\6\3\1\0\5\3\1\0\10\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\4\0\2\3\2\0\2\50\2\0\2\3"+
    "\1\100\5\3\1\0\2\3\1\100\2\3\1\0\10\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\4\0\2\3\2\0"+
    "\2\50\2\0\10\3\1\0\1\3\1\201\3\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\6\3\1\202\1\3\1\0\5\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\6\3\1\100\1\3\1\0"+
    "\5\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\10\3\1\203\1\157"+
    "\4\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\10\3\1\0\2\3"+
    "\1\204\2\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\22\0\1\76\46\0\2\3\2\0\2\50\2\0"+
    "\10\3\1\0\1\3\1\100\3\3\1\0\10\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\24\0\2\205\43\0\2\3"+
    "\2\0\2\50\2\0\10\3\1\205\1\206\4\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\6\3\1\62\1\3\1\0\5\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\7\3\1\207\1\0\5\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\1\3\1\100\6\3\1\0"+
    "\5\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\10\3\1\0\5\3"+
    "\1\107\1\63\7\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\24\0\2\210\56\0\1\211\51\0\2\3\2\0\2\50"+
    "\2\0\10\3\1\210\1\212\4\3\1\0\10\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\4\0\2\3\2\0\2\50"+
    "\2\0\3\3\1\213\4\3\1\0\5\3\1\0\10\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\30\0\1\151\70\0"+
    "\1\76\34\0\2\3\2\0\2\50\2\0\10\3\1\0"+
    "\5\3\1\0\1\3\1\100\6\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\4\0\2\3\2\0\2\50\2\0\10\3"+
    "\1\0\5\3\1\0\3\3\1\214\4\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\10\3\1\0\4\3\1\215\1\0\10\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\10\3\1\61\1\62\4\3\1\0\10\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\10\3\1\0\5\3\1\0\10\3\1\216\1\217\1\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\7\3\1\220\1\0\4\3\1\221\1\0\10\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\53\0\1\222\15\0\1\137"+
    "\1\176\6\0\10\137\1\0\5\137\1\0\10\137\1\0"+
    "\2\137\4\0\1\176\1\223\1\176\1\0\1\223\1\0"+
    "\1\224\10\0\2\3\2\0\2\50\2\0\4\3\1\100"+
    "\3\3\1\0\5\3\1\0\10\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\4\0\2\3\2\0\2\50\2\0\3\3"+
    "\1\57\4\3\1\0\5\3\1\0\10\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\1\63\7\3\1\0\5\3\1\0\10\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\15\0\1\76\53\0\2\3\2\0"+
    "\2\50\2\0\6\3\1\225\1\3\1\0\5\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\15\0\1\151"+
    "\53\0\2\3\2\0\2\50\2\0\1\3\1\146\6\3"+
    "\1\0\5\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\4\0\2\3\2\0\2\50\2\0\10\3\1\226"+
    "\1\227\4\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\15\0\1\230\77\0\1\231\40\0\2\3\2\0"+
    "\2\50\2\0\1\3\1\232\6\3\1\0\5\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\10\3\1\0\3\3\1\207\1\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\1\201\7\3\1\0\5\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\4\0"+
    "\2\3\2\0\2\50\2\0\10\3\1\0\3\3\1\233"+
    "\1\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\22\0\1\234\46\0\2\3\2\0\2\50\2\0\6\3"+
    "\1\57\1\3\1\0\5\3\1\0\10\3\1\0\2\3"+
    "\3\50\1\0\1\3\1\50\1\3\2\0\1\50\1\0"+
    "\1\50\1\0\2\50\4\0\2\3\2\0\2\50\2\0"+
    "\3\3\1\235\4\3\1\0\5\3\1\0\10\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\4\0\2\3\2\0\2\50"+
    "\2\0\6\3\1\236\1\3\1\0\5\3\1\0\10\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\54\0\1\237\15\0"+
    "\1\240\44\0\1\240\1\0\1\240\3\0\1\224\10\0"+
    "\2\3\2\0\2\50\2\0\1\157\7\3\1\0\5\3"+
    "\1\0\10\3\1\0\2\3\3\50\1\0\1\3\1\50"+
    "\1\3\2\0\1\50\1\0\1\50\1\0\2\50\15\0"+
    "\1\107\53\0\2\3\2\0\2\50\2\0\1\3\1\63"+
    "\6\3\1\0\5\3\1\0\10\3\1\0\2\3\3\50"+
    "\1\0\1\3\1\50\1\3\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\23\0\1\76\65\0\2\226\43\0\2\3"+
    "\2\0\2\50\2\0\7\3\1\100\1\0\5\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\4\0\2\3"+
    "\2\0\2\50\2\0\10\3\1\241\1\242\4\3\1\0"+
    "\10\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\16\0\1\76"+
    "\52\0\2\3\2\0\2\50\2\0\1\243\7\3\1\0"+
    "\5\3\1\0\10\3\1\0\2\3\3\50\1\0\1\3"+
    "\1\50\1\3\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\4\0\2\3\2\0\2\50\2\0\2\3\1\244\5\3"+
    "\1\0\5\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\55\0\1\245\14\0\1\240\44\0\1\240\1\0"+
    "\1\240\36\0\1\203\42\0\2\3\2\0\2\50\2\0"+
    "\10\3\1\0\1\3\1\157\3\3\1\0\10\3\1\0"+
    "\2\3\3\50\1\0\1\3\1\50\1\3\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\4\0\2\3\2\0\2\50"+
    "\2\0\10\3\1\0\5\3\1\0\6\3\1\100\1\3"+
    "\1\0\2\3\3\50\1\0\1\3\1\50\1\3\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\4\0\2\3\2\0"+
    "\2\50\2\0\10\3\1\0\5\3\1\0\5\3\1\246"+
    "\2\3\1\0\2\3\3\50\1\0\1\3\1\50\1\3"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\56\0\1\247"+
    "\12\0\2\3\2\0\2\50\2\0\3\3\1\146\4\3"+
    "\1\0\5\3\1\0\10\3\1\0\2\3\3\50\1\0"+
    "\1\3\1\50\1\3\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8162];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\33\1\1\11\6\1\1\11"+
    "\4\1\2\0\2\1\1\0\2\1\1\0\11\1\1\11"+
    "\10\1\3\0\4\1\1\0\3\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\13\1\1\0\1\1\1\0"+
    "\5\1\2\0\2\1\2\0\6\1\1\0\5\1\1\0"+
    "\1\1\1\0\2\1\2\0\4\1\1\0\3\1\2\0"+
    "\1\11\1\1\1\0\1\1\2\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;

    public int yyline() {
    	return this.yyline;
    }

    public void error(String msg, String caracteres, int linea) throws ScannerException {
        throw new ScannerException("El caracter es inválido", caracteres, linea);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tipo_token yylex() throws java.io.IOException, ScannerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Identificador erróneo: no se puede utilizar los caracter !&# en los identificadores.", yytext(),yyline()); return ERROR;
            }
          case 14: break;
          case 2: 
            { error("El caracter es inválido", yytext(), yyline()); return ERROR;
            }
          case 15: break;
          case 3: 
            { return IDENTIFICADOR;
            }
          case 16: break;
          case 4: 
            { /*Ignore*/
            }
          case 17: break;
          case 5: 
            { return OPERADOR;
            }
          case 18: break;
          case 6: 
            { error("Numero erróneo: no se puede finalizar un número con punto", yytext(),yyline()); return ERROR;
            }
          case 19: break;
          case 7: 
            { return PALABRA_RESERVADA;
            }
          case 20: break;
          case 8: 
            { return STRING;
            }
          case 21: break;
          case 9: 
            { error("Numero erróneo: no se puede iniciar un número con punto", yytext(),yyline()); return ERROR;
            }
          case 22: break;
          case 10: 
            { error("Numero erróneo: no se puede ingresar letras dentro de un número.", yytext(),yyline()); return ERROR;
            }
          case 23: break;
          case 11: 
            { return FLOAT;
            }
          case 24: break;
          case 12: 
            { return ERROR;
            }
          case 25: break;
          case 13: 
            { return CHAR;
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
