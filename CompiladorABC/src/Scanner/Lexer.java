/* The following code was generated by JFlex 1.6.1 */

package Scanner;

import Clases.Tipo_token;
import static Clases.Tipo_token.*;
import Clases.ScannerException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Meli/Documents/TEC/2018 2do Sem/Compiladores e Interpretes/Proyecto/CompiladorABC/CompiladorABC/src/Scanner/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\7\1\7\1\4\22\0\1\62\1\5\1\60"+
    "\1\57\3\5\1\0\1\10\1\12\1\11\1\47\1\46\1\51\1\55"+
    "\1\6\1\61\11\2\1\54\1\46\1\53\1\50\1\52\1\0\1\5"+
    "\1\15\1\20\1\31\1\35\1\21\1\37\1\22\1\34\1\24\1\1"+
    "\1\43\1\27\1\44\1\25\1\26\1\41\1\1\1\16\1\33\1\30"+
    "\1\40\1\45\1\36\1\56\1\17\1\1\1\46\1\0\1\46\3\5"+
    "\1\15\1\20\1\31\1\35\1\21\1\37\1\22\1\34\1\24\1\1"+
    "\1\43\1\27\1\44\1\25\1\26\1\41\1\1\1\16\1\33\1\30"+
    "\1\40\1\45\1\36\1\56\1\17\1\1\1\13\1\5\1\14\1\5"+
    "\6\0\1\7\153\0\1\5\76\0\2\23\115\0\1\32\u1ea8\0\1\7"+
    "\1\7\u0100\0\1\42\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\4\5\1\1\5\2"+
    "\1\1\6\2\1\1\10\2\5\5\1\2\2\1\1\3"+
    "\1\6\1\3\1\7\1\4\2\0\1\4\11\2\4\10"+
    "\1\0\2\2\1\5\6\2\3\0\3\2\1\0\1\2"+
    "\1\10\1\2\1\0\3\2\1\0\7\2\1\11\1\2"+
    "\1\12\3\0\1\13\1\0\2\6\1\7\1\14\2\0"+
    "\1\4\7\2\1\0\1\2\1\0\5\2\2\0\3\2"+
    "\2\0\1\2\1\10\4\2\1\12\1\13\1\14\1\0"+
    "\1\14\1\6\1\0\1\4\3\2\1\0\1\2\1\0"+
    "\2\2\2\0\4\2\1\0\3\2\1\14\1\0\1\15"+
    "\1\2\1\0\1\2\2\0\2\2\1\0\2\2\1\0"+
    "\4\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\314\0\377\0\u0132"+
    "\0\63\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\63\0\u0af5\0\146\0\u0b28\0\u0b5b\0\u0b8e\0\146"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u0693\0\u1155\0\u06f9\0\u1188"+
    "\0\u11bb\0\u11ee\0\u1188\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u0891\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea"+
    "\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782"+
    "\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\63"+
    "\0\63\0\u191a\0\u194d\0\u12ba\0\u1980\0\u19b3\0\u1320\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16"+
    "\0\u1d49\0\u194d\0\u1d7c\0\63\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0"+
    "\0\u2013\0\u2046\0\u2079";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\2\1\6\1\0\1\7"+
    "\1\10\1\11\1\12\1\2\1\13\1\14\1\3\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\3\1\31\1\32\1\33\1\34"+
    "\1\35\1\2\1\3\1\36\1\37\1\11\1\40\1\11"+
    "\1\41\1\42\1\43\1\10\1\44\1\45\1\46\1\47"+
    "\1\50\1\5\64\0\2\3\12\0\6\3\1\0\6\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\1\51\1\52\12\0\6\51\1\0\6\51\1\0"+
    "\7\51\1\0\3\51\7\0\1\53\1\51\2\0\1\52"+
    "\7\0\1\54\41\0\1\11\23\0\1\55\121\0\1\11"+
    "\12\0\14\56\1\57\46\56\1\0\2\3\12\0\1\3"+
    "\1\60\4\3\1\0\1\3\1\61\4\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\4\3\1\62\1\3\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\2\3\1\63\1\3\1\64\1\3\1\0\2\3"+
    "\1\65\3\3\1\0\7\3\1\0\3\3\10\0\1\3"+
    "\2\0\1\3\2\0\2\3\12\0\6\3\1\0\1\3"+
    "\1\66\1\3\1\67\2\3\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\6\3"+
    "\1\0\2\3\1\70\3\3\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\26\0\1\71\11\0\1\72"+
    "\24\0\2\3\12\0\6\3\1\0\1\3\1\73\4\3"+
    "\1\0\4\3\1\74\2\3\1\0\3\3\10\0\1\3"+
    "\2\0\1\3\2\0\2\3\12\0\6\3\1\75\1\76"+
    "\1\3\1\77\3\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\2\0\2\3\12\0\1\3\1\100"+
    "\4\3\1\0\6\3\1\0\4\3\1\74\2\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\1\101\5\3\1\0\2\3\1\102\3\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\1\3\1\103\1\104\3\3\1\0\2\3\1\74"+
    "\3\3\1\0\1\3\1\105\5\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\2\0\2\3\12\0\1\67\5\3"+
    "\1\0\2\3\1\106\3\3\1\0\1\3\1\37\5\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\22\0\1\107"+
    "\6\0\1\110\3\0\1\111\27\0\2\3\12\0\4\3"+
    "\1\112\1\3\1\0\4\3\1\113\1\3\1\0\1\3"+
    "\1\114\5\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\6\3\1\115\1\116\1\3\1\117"+
    "\3\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\1\3\1\120\4\3\1\121"+
    "\1\122\5\3\1\0\1\3\1\123\5\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\1\124"+
    "\5\3\1\125\1\126\1\3\1\127\3\3\1\0\5\3"+
    "\1\130\1\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\6\3\1\0\1\3\1\131\4\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\1\132\1\133\4\3\1\0\6\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\6\3\1\0\2\3\1\61\3\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\1\134\5\3\1\0\6\3\1\0"+
    "\7\3\1\0\3\3\10\0\1\3\2\0\1\3\50\0"+
    "\2\11\62\0\2\11\61\0\1\11\1\0\1\10\60\0"+
    "\1\11\1\0\1\11\1\10\11\0\1\135\56\0\1\135"+
    "\2\0\2\3\12\0\6\3\1\0\2\3\1\136\3\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\3\0\1\137\56\0\1\137\1\0\1\140\3\141\1\142"+
    "\2\141\1\0\3\141\2\140\6\141\1\140\6\141\1\140"+
    "\7\141\1\140\15\141\1\143\2\141\1\0\1\51\1\144"+
    "\12\0\6\51\1\0\6\51\1\0\7\51\1\0\3\51"+
    "\7\0\1\53\1\51\2\0\1\144\2\0\2\51\12\0"+
    "\6\51\1\0\6\51\1\0\7\51\1\0\3\51\7\0"+
    "\1\145\1\51\2\0\1\51\2\0\1\51\1\52\12\0"+
    "\4\51\1\146\1\51\1\0\6\51\1\0\7\51\1\0"+
    "\3\51\7\0\1\147\1\51\2\0\1\52\2\0\1\145"+
    "\1\150\12\0\6\145\1\0\6\145\1\0\7\145\1\0"+
    "\3\145\10\0\1\145\2\0\1\150\1\0\4\54\1\0"+
    "\2\54\1\0\53\54\11\151\1\152\51\151\14\56\1\153"+
    "\131\56\1\0\2\3\12\0\1\3\1\154\4\3\1\0"+
    "\6\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\6\3\1\0\6\3\1\0"+
    "\2\3\1\100\4\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\1\155\5\3\1\0\5\3"+
    "\1\156\1\0\6\3\1\157\1\0\3\3\10\0\1\3"+
    "\2\0\1\3\2\0\2\3\12\0\6\3\1\0\4\3"+
    "\1\160\1\3\1\0\7\3\1\0\3\3\10\0\1\3"+
    "\2\0\1\3\2\0\2\3\12\0\5\3\1\161\1\0"+
    "\6\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\6\3\1\0\2\3\1\162"+
    "\3\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\6\3\1\0\6\3\1\0"+
    "\2\3\1\74\4\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\6\3\1\0\6\3\1\163"+
    "\1\160\6\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\6\3\1\0\4\3\1\164\1\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\30\0\1\165\1\72\33\0\2\3\12\0\6\3\1\0"+
    "\3\3\1\166\1\74\1\3\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\30\0\1\72\34\0\2\3"+
    "\12\0\6\3\1\0\3\3\1\74\2\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\4\3\1\100\1\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\3\3\1\167\2\3\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\1\3\1\170\4\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\6\3\1\0\5\3\1\160\1\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\6\3\1\0\6\3\1\160\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\4\3\1\171\1\3\1\0\6\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\6\3\1\0\1\3\1\172\4\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\31\0\1\72\50\0"+
    "\1\173\72\0\1\174\35\0\2\3\12\0\6\3\1\0"+
    "\4\3\1\74\1\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\2\0\2\3\12\0\1\3\1\175"+
    "\4\3\1\0\6\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\2\0\2\3\12\0\6\3\1\0"+
    "\2\3\1\176\3\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\46\0\1\11\16\0\2\3\12\0"+
    "\6\3\1\0\6\3\1\0\7\3\1\0\2\3\1\100"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\6\3"+
    "\1\0\6\3\1\0\3\3\1\177\3\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\6\3"+
    "\1\200\1\63\5\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\31\0\1\201\33\0\2\3\12\0"+
    "\6\3\1\0\4\3\1\202\1\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\6\3\1\125\1\126\5\3\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\6\3"+
    "\1\0\3\3\1\67\2\3\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\30\0\1\163\34\0\2\3"+
    "\12\0\6\3\1\0\3\3\1\160\2\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\1\3\1\203\4\3\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\1\3\1\204\4\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\4\3\1\205\1\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\5\3\1\206\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\6\3\1\0\2\3\1\207\3\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\1\3\1\74\4\3\1\0\6\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\1\3\1\100\4\3\1\0\6\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\61\0\1\210\3\0"+
    "\6\142\1\0\3\142\2\0\6\142\1\0\6\142\1\0"+
    "\7\142\1\0\15\142\1\210\2\142\1\0\6\142\1\0"+
    "\3\142\2\0\6\142\1\0\6\142\1\0\7\142\1\0"+
    "\15\142\1\211\2\142\1\0\1\51\1\144\12\0\4\51"+
    "\1\146\1\51\1\0\6\51\1\0\7\51\1\0\3\51"+
    "\7\0\1\147\1\51\2\0\1\144\2\0\2\145\12\0"+
    "\6\145\1\0\6\145\1\0\7\145\1\0\3\145\10\0"+
    "\1\145\2\0\1\145\2\0\1\51\1\212\12\0\6\51"+
    "\1\0\6\51\1\0\7\51\1\0\3\51\1\0\1\213"+
    "\1\0\1\213\3\0\1\145\1\51\2\0\1\212\2\0"+
    "\1\145\1\214\12\0\6\145\1\0\6\145\1\0\7\145"+
    "\1\0\3\145\10\0\1\145\2\0\1\214\2\0\1\145"+
    "\1\150\12\0\4\145\1\215\1\145\1\0\6\145\1\0"+
    "\7\145\1\0\3\145\10\0\1\145\2\0\1\150\1\0"+
    "\11\151\1\216\63\151\1\217\50\151\1\0\2\3\12\0"+
    "\1\220\5\3\1\0\6\3\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\6\3"+
    "\1\0\3\3\1\74\2\3\1\0\2\3\1\74\4\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\2\3\1\221\3\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\4\3\1\222\1\3\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\4\3\1\74\1\3\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\223\1\171\5\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\6\3\1\0\3\3\1\224\2\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\22\0\1\72\42\0"+
    "\2\3\12\0\6\3\1\0\2\3\1\74\3\3\1\0"+
    "\7\3\1\0\3\3\10\0\1\3\2\0\1\3\24\0"+
    "\2\225\37\0\2\3\12\0\6\3\1\225\1\226\5\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\4\3\1\76\1\3\1\0\6\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\5\3\1\227\1\0\6\3\1\0"+
    "\7\3\1\0\3\3\10\0\1\3\2\0\1\3\2\0"+
    "\2\3\12\0\6\3\1\0\1\3\1\74\4\3\1\0"+
    "\7\3\1\0\3\3\10\0\1\3\2\0\1\3\2\0"+
    "\2\3\12\0\6\3\1\0\6\3\1\107\1\112\6\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\24\0\2\230"+
    "\54\0\1\231\45\0\2\3\12\0\6\3\1\230\1\232"+
    "\5\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\1\3\1\233\4\3\1\0"+
    "\6\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\6\3\1\0\1\3\1\70"+
    "\4\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\31\0\1\163\66\0\1\72\27\0\2\3\12\0"+
    "\6\3\1\0\6\3\1\0\1\3\1\74\5\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\6\3\1\0\6\3\1\0\3\3\1\234\3\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\6\3\1\0\5\3\1\235\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\6\3"+
    "\1\75\1\76\5\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\2\0\2\3\12\0\6\3\1\0"+
    "\6\3\1\0\7\3\1\236\1\237\2\3\10\0\1\3"+
    "\2\0\1\3\2\0\2\3\12\0\5\3\1\240\1\0"+
    "\5\3\1\241\1\0\7\3\1\0\3\3\10\0\1\3"+
    "\2\0\1\3\2\0\1\51\1\212\12\0\6\51\1\0"+
    "\6\51\1\0\7\51\1\0\3\51\7\0\1\145\1\51"+
    "\2\0\1\212\3\0\1\242\56\0\1\242\2\0\1\145"+
    "\1\214\12\0\6\145\1\0\6\145\1\0\7\145\1\0"+
    "\3\145\1\0\1\243\1\0\1\243\4\0\1\145\2\0"+
    "\1\214\1\244\11\151\1\216\1\217\50\151\1\0\2\3"+
    "\12\0\2\3\1\74\3\3\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\1\3\1\66\4\3\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\1\112\5\3\1\0\6\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\26\0\1\72\36\0"+
    "\2\3\12\0\4\3\1\245\1\3\1\0\6\3\1\0"+
    "\7\3\1\0\3\3\10\0\1\3\2\0\1\3\26\0"+
    "\1\163\36\0\2\3\12\0\6\3\1\0\1\3\1\160"+
    "\4\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\2\0\2\3\12\0\6\3\1\246\1\247\5\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\26\0\1\250\65\0\1\251\33\0\2\3\12\0\6\3"+
    "\1\0\1\3\1\252\4\3\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\6\3"+
    "\1\0\4\3\1\227\1\3\1\0\7\3\1\0\3\3"+
    "\10\0\1\3\2\0\1\3\2\0\2\3\12\0\1\221"+
    "\5\3\1\0\6\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\2\0\2\3\12\0\6\3\1\0"+
    "\4\3\1\253\1\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\22\0\1\254\42\0\2\3\12\0"+
    "\4\3\1\66\1\3\1\0\6\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\1\3\1\255\4\3\1\0\6\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\2\0\2\3\12\0"+
    "\4\3\1\256\1\3\1\0\6\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\3\0\1\242\56\0"+
    "\1\242\1\244\1\0\2\3\12\0\1\171\5\3\1\0"+
    "\6\3\1\0\7\3\1\0\3\3\10\0\1\3\2\0"+
    "\1\3\26\0\1\107\36\0\2\3\12\0\6\3\1\0"+
    "\1\3\1\112\4\3\1\0\7\3\1\0\3\3\10\0"+
    "\1\3\2\0\1\3\23\0\1\72\63\0\2\246\37\0"+
    "\2\3\12\0\5\3\1\74\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\257\1\260\5\3\1\0\7\3\1\0"+
    "\3\3\10\0\1\3\2\0\1\3\36\0\1\72\26\0"+
    "\2\3\12\0\1\261\5\3\1\0\6\3\1\0\7\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\2\0\2\3"+
    "\12\0\6\3\1\0\6\3\1\0\2\3\1\262\4\3"+
    "\1\0\3\3\10\0\1\3\2\0\1\3\27\0\1\223"+
    "\35\0\2\3\12\0\6\3\1\0\2\3\1\171\3\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\6\3\1\0\6\3\1\0\7\3"+
    "\1\0\1\3\1\74\1\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\6\3\1\0\6\3\1\0\5\3"+
    "\1\263\1\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\2\0\2\3\12\0\1\3\1\160\4\3\1\0\6\3"+
    "\1\0\7\3\1\0\3\3\10\0\1\3\2\0\1\3"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\43\1\2\0"+
    "\13\1\1\11\2\1\1\0\11\1\3\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\12\1\3\0\1\1\1\0"+
    "\4\1\2\0\10\1\1\0\1\1\1\0\5\1\2\0"+
    "\3\1\2\0\6\1\2\11\1\1\1\0\2\1\1\0"+
    "\4\1\1\0\1\1\1\0\2\1\2\0\4\1\1\0"+
    "\4\1\1\0\1\11\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\2\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;

    public int yyline() {
    	return this.yyline;
    }

    public void error(String msg, String caracteres, int linea) throws ScannerException {
        throw new ScannerException(msg, caracteres, linea+1);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tipo_token yylex() throws java.io.IOException, ScannerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("El caracter es inválido", yytext(), yyline()); return ERROR;
            }
          case 14: break;
          case 2: 
            { return IDENTIFICADOR;
            }
          case 15: break;
          case 3: 
            { return INTEGER;
            }
          case 16: break;
          case 4: 
            { /*Ignore*/
            }
          case 17: break;
          case 5: 
            { return OPERADOR;
            }
          case 18: break;
          case 6: 
            { error("Número erróneo: no se puede ingresar letras dentro de un número.", yytext(),yyline()); return ERROR;
            }
          case 19: break;
          case 7: 
            { error("Número erróneo: no se puede finalizar un número con punto", yytext(),yyline()); return ERROR;
            }
          case 20: break;
          case 8: 
            { return PALABRA_RESERVADA;
            }
          case 21: break;
          case 9: 
            { error("Número erróneo: no se puede iniciar un número con punto", yytext(),yyline()); return ERROR;
            }
          case 22: break;
          case 10: 
            { return CHAR;
            }
          case 23: break;
          case 11: 
            { return STRING;
            }
          case 24: break;
          case 12: 
            { return FLOAT;
            }
          case 25: break;
          case 13: 
            { return ERROR;
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
